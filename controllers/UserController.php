





























































































}    // ...existing code...    }        $this->logger = $loggingHelper->getLoggerByCategory('user');    {    public function __construct(LoggingHelper $loggingHelper)    protected $logger;{class UserController  return getLogger('application'); // ✅ Return Default Logger  }     return $loggers[$category];     }         return new Logger('fallback');         error_log("❌ [LOGGER] Logger for category '{$category}' not initialized.");     if (!isset($loggers[$category])) {     global $loggers; { function getLogger($category = 'application') // ✅ Function to Retrieve Logger by Category  }     }         error_log("❌ [LOGGER] Failed to initialize logger for {$category}: " . $e->getMessage());     } catch (Exception $e) {         $loggers[$category] = $logger;          $logger->pushHandler($streamHandler);         $streamHandler->setFormatter($formatter);                );            true            true,            "Y-m-d H:i:s",            "[%datetime%] [%channel%] %level_name%: %message%\n",         $formatter = new LineFormatter(         // ✅ JSON Formatting for Structured Logs          $streamHandler = new StreamHandler($logFile, Logger::DEBUG);         $logger = new Logger($category);     try {      }         chmod($logFile, 0664);         }             continue;             error_log("❌ [LOGGER] Failed to create log file: {$logFile}");         if (!touch($logFile)) {     if (!file_exists($logFile)) {      $logFile = "{$logDir}/{$fileName}"; foreach ($logFiles as $category => $fileName) {  $loggers = [];  ];     'system'      => 'system.log'     'security'    => 'security.log',     'api'         => 'api.log',     'db'          => 'db.log',     'auth'        => 'auth.log',     'application' => 'application.log', $logFiles = [ // ✅ Log Categories (Separated Logs for Different Services)  }     }         die("❌ Logger initialization failed: Could not create log directory.\n");         error_log("❌ [LOGGER] Failed to create logs directory: {$logDir}");     if (!mkdir($logDir, 0775, true)) { if (!is_dir($logDir)) { $logDir = __DIR__ . '/../logs'; // ✅ Define Log Directory  use App\Helpers\LoggingHelper; use Psr\Log\LoggerInterface; use Monolog\Formatter\LineFormatter; use Monolog\Handler\StreamHandler; use Monolog\Logger;require_once __DIR__ . '/vendor/autoload.php'; */ * ensuring all services use a single logging instance. * This file initializes Monolog as the application-wide logger, * * Logger Configuration/**<?php