=== App/Views/auth/register.php ===
<?php
/*
|--------------------------------------------------------------------------
| Rejestracja Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi założenie konta.
|
| Ścieżka: App/Views/auth/register.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczna walidacja)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego przetwarzania rejestracji)
| - HTML, CSS (interfejs)
*/


if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}
?>

<h1 class="text-center">Rejestracja</h1>

<div class="auth-container">
    <form id="registerForm">
        <?= csrf_field() ?>
        <div class="mb-3">
            <label for="name" class="form-label">Imię i nazwisko</label>
            <input type="text" class="form-control" id="name" name="name" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Adres e-mail</label>
            <input type="email" class="form-control" id="email" name="email" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Hasło</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <div class="mb-3">
            <label for="confirm_password" class="form-label">Potwierdź hasło</label>
            <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Zarejestruj się</button>
    </form>
    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const registerForm = document.getElementById("registerForm");

    registerForm.addEventListener("submit", function(e) {
        e.preventDefault();
        registerUser(new FormData(registerForm));
    });

    function registerUser(formData) {
        fetch("/api/auth/register.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Rejestracja udana! Przekierowywanie...";
                setTimeout(() => window.location.href = "/auth/login.php", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd rejestracji:", error);
        });
    }
});
</script>
=== App/Views/auth/password_reset_request.php ===
<?php
/*
|--------------------------------------------------------------------------
| Żądanie Resetu Hasła
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi wysłanie prośby o resetowanie hasła.
| Na podany adres e-mail zostanie wysłany link do resetu.
|
| Ścieżka: App/Views/auth/reset_request.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczne wysyłanie resetu)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego wysyłania zapytania)
| - HTML, CSS (interfejs)
*/


if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}
?>

<h1 class="text-center">Resetowanie Hasła</h1>

<div class="auth-container">
    <form id="resetRequestForm">
        <?= csrf_field() ?>
        <div class="mb-3">
            <label for="email" class="form-label">Adres e-mail</label>
            <input type="email" class="form-control" id="email" name="email" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Wyślij link resetujący</button>
    </form>
    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const resetRequestForm = document.getElementById("resetRequestForm");

    resetRequestForm.addEventListener("submit", function(e) {
        e.preventDefault();
        requestPasswordReset(new FormData(resetRequestForm));
    });

    function requestPasswordReset(formData) {
        fetch("/api/auth/reset_request.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Link do resetowania hasła został wysłany na podany e-mail.";
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd wysyłania resetu:", error);
        });
    }
});
</script>
=== App/Views/auth/password_reset.php ===
<?php
/*
|--------------------------------------------------------------------------
| Resetowanie Hasła
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi ustawienie nowego hasła po kliknięciu w link
| resetujący, który został wysłany na jego e-mail.
|
| Ścieżka: App/Views/auth/password_reset.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczne przetwarzanie resetu)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznej zmiany hasła)
| - HTML, CSS (interfejs)
*/


if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}

// Pobranie tokenu resetującego z URL
$token = $_GET['token'] ?? null;
if (!$token) {
    die("Nieprawidłowy link resetujący.");
}
?>

<h1 class="text-center">Ustaw nowe hasło</h1>

<div class="auth-container">
    <form id="passwordResetForm">
        <?= csrf_field() ?>
        <input type="hidden" name="token" value="<?= htmlspecialchars($token) ?>">

        <div class="mb-3">
            <label for="new_password" class="form-label">Nowe hasło</label>
            <input type="password" class="form-control" id="new_password" name="new_password" required>
        </div>
        <div class="mb-3">
            <label for="confirm_password" class="form-label">Potwierdź nowe hasło</label>
            <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Zmień hasło</button>
    </form>
    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const passwordResetForm = document.getElementById("passwordResetForm");

    passwordResetForm.addEventListener("submit", function(e) {
        e.preventDefault();
        resetPassword(new FormData(passwordResetForm));
    });

    function resetPassword(formData) {
        fetch("/api/auth/password_reset.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Hasło zostało zmienione! Możesz się teraz zalogować.";
                setTimeout(() => window.location.href = "/auth/login.php", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd zmiany hasła:", error);
        });
    }
});
</script>
=== App/Views/auth/login.php ===
<?php
/*
|--------------------------------------------------------------------------
| Logowanie Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi zalogowanie się do systemu.
|
| Ścieżka: App/Views/auth/login.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczna walidacja)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego logowania)
| - HTML, CSS (interfejs)
*/

require_once BASE_PATH . '/App/Helpers/SecurityHelper.php'; // Ensure CSRF functions are loaded

if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}
?>

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zaloguj się</title>

    <!-- ✅ Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <!-- ✅ Custom Authentication CSS -->
    <link rel="stylesheet" href="/../../../public/css/auth.css">
</head>
<body class="d-flex justify-content-center align-items-center vh-100 bg-light">

<div class="auth-container bg-white p-4 rounded shadow-lg">
    <h1 class="text-center mb-4">Zaloguj się</h1>

    <form id="loginForm">
        <?= csrf_field(); ?>
        <div class="mb-3">
            <label for="email" class="form-label">Adres e-mail</label>
            <input type="email" class="form-control" id="email" name="email" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Hasło</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Zaloguj się</button>
    </form>
    
    <div id="responseMessage" class="alert mt-3 d-none"></div>
    <p class="text-center mt-3"><a href="/auth/password_reset.php">Nie pamiętasz hasła?</a></p>
</div>

<!-- ✅ Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- ✅ Custom Authentication Script -->
<script src="/js/auth.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const loginForm = document.getElementById("loginForm");

    loginForm.addEventListener("submit", function(e) {
        e.preventDefault();
        
        const formData = new FormData(loginForm);
        formData.append("csrf_token", document.querySelector('input[name="csrf_token"]').value); // Ensure CSRF token is included

        loginUser(formData);
    });

    function loginUser(formData) {
        fetch("/api/auth/login.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.classList.remove("d-none");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Logowanie pomyślne! Przekierowywanie...";
                setTimeout(() => window.location.href = "/dashboard", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd logowania:", error);
        });
    }
});
</script>

</body>
</html>
=== App/Views/admin/admin.css ===
=== App/Views/admin/payments/dashboard.php ===
/*
|--------------------------------------------------------------------------
| Panel Zarządzania Płatnościami
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd wszystkich transakcji, zwrotów
| oraz statystyk finansowych. Obsługuje dynamiczne filtrowanie i obsługę zwrotów.
|
| Ścieżka: App/Views/admin/payments/dashboard.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane transakcji, zwroty)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - Chart.js (wizualizacja płatności)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Panel Płatności</h1>

<div class="admin-container">
    <div class="row">
        <!-- Statystyki płatności -->
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Łączna liczba transakcji</h4>
                    <p id="totalTransactions" class="display-6">0</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Łączna kwota przychodu</h4>
                    <p id="totalRevenue" class="display-6">0 PLN</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Łączna liczba zwrotów</h4>
                    <p id="totalRefunds" class="display-6">0</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtry transakcji -->
    <form id="paymentFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="completed">Zakończona</option>
                <option value="pending">Oczekująca</option>
                <option value="failed">Nieudana</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-control" name="method">
                <option value="">Metoda płatności</option>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela transakcji -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="transactionList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("paymentFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchTransactions(new FormData(filterForm));
    });

    function fetchTransactions(formData = null) {
        let url = "/api/admin/payments.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const transactionTable = document.getElementById("transactionList");
                transactionTable.innerHTML = "";

                if (data.length === 0) {
                    transactionTable.innerHTML = `<tr><td colspan="7" class="text-center text-muted">Brak transakcji spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(transaction => {
                        transactionTable.innerHTML += `
                            <tr>
                                <td>${transaction.id}</td>
                                <td>${transaction.user}</td>
                                <td>${transaction.amount} PLN</td>
                                <td>${transaction.method}</td>
                                <td>${transaction.status}</td>
                                <td>${transaction.date}</td>
                                <td>
                                    ${transaction.status === "completed" ? `<button class="btn btn-danger btn-sm" onclick="processRefund(${transaction.id})">Zwrot</button>` : ""}
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania transakcji:", error));
    }

    function processRefund(transactionId) {
        if (!confirm("Czy na pewno chcesz dokonać zwrotu?")) return;

        fetch(`/api/admin/refund.php?id=${transactionId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Zwrot został pomyślnie przetworzony.");
                    fetchTransactions();
                } else {
                    alert("Błąd zwrotu: " + data.error);
                }
            })
            .catch(error => console.error("Błąd zwrotu:", error));
    }

    fetchTransactions();
});
</script>
=== App/Views/admin/payments/transactions.php ===
/*
|--------------------------------------------------------------------------
| Panel Transakcji Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie wszystkimi
| transakcjami finansowymi systemu. Obsługuje filtrowanie i eksport danych.
|
| Ścieżka: App/Views/admin/payments/transactions.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie, eksport)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane transakcji)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Transakcje Płatności</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Historia Transakcji</h3>
        <div>
            <button class="btn btn-success btn-sm" id="exportCSV">Eksport CSV</button>
            <button class="btn btn-danger btn-sm" id="exportPDF">Eksport PDF</button>
        </div>
    </div>

    <!-- Filtry transakcji -->
    <form id="transactionFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
        </div>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Status transakcji</option>
                <option value="completed">Zakończona</option>
                <option value="pending">Oczekująca</option>
                <option value="failed">Nieudana</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-control" name="method">
                <option value="">Metoda płatności</option>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela transakcji -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody id="transactionList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("transactionFilterForm");
    const exportCSV = document.getElementById("exportCSV");
    const exportPDF = document.getElementById("exportPDF");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchTransactions(new FormData(filterForm));
    });

    exportCSV.addEventListener("click", function() {
        window.location.href = "/api/admin/export_transactions.php?format=csv";
    });

    exportPDF.addEventListener("click", function() {
        window.location.href = "/api/admin/export_transactions.php?format=pdf";
    });

    function fetchTransactions(formData = null) {
        let url = "/api/admin/transactions.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const transactionTable = document.getElementById("transactionList");
                transactionTable.innerHTML = "";

                if (data.length === 0) {
                    transactionTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak transakcji spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(transaction => {
                        transactionTable.innerHTML += `
                            <tr>
                                <td>${transaction.id}</td>
                                <td>${transaction.user}</td>
                                <td>${transaction.amount} PLN</td>
                                <td>${transaction.method}</td>
                                <td>${transaction.status}</td>
                                <td>${transaction.date}</td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania transakcji:", error));
    }

    fetchTransactions();
});
</script>
=== App/Views/admin/payments/refunds.php ===
/*
|--------------------------------------------------------------------------
| Panel Zwrotów Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie zwrotami.
| Administrator może sprawdzić status zwrotów oraz anulować wybrane operacje.
|
| Ścieżka: App/Views/admin/payments/refunds.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie, anulowanie zwrotów)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane zwrotów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Zwroty Płatności</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Historia Zwrotów</h3>
    </div>

    <!-- Filtry zwrotów -->
    <form id="refundFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
        </div>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Status zwrotu</option>
                <option value="pending">Oczekujący</option>
                <option value="completed">Zakończony</option>
                <option value="failed">Nieudany</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela zwrotów -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Kwota</th>
                <th>Status</th>
                <th>Data</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="refundList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("refundFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchRefunds(new FormData(filterForm));
    });

    function fetchRefunds(formData = null) {
        let url = "/api/admin/refunds.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const refundTable = document.getElementById("refundList");
                refundTable.innerHTML = "";

                if (data.length === 0) {
                    refundTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak zwrotów spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(refund => {
                        refundTable.innerHTML += `
                            <tr>
                                <td>${refund.id}</td>
                                <td>${refund.user}</td>
                                <td>${refund.amount} PLN</td>
                                <td>${refund.status}</td>
                                <td>${refund.date}</td>
                                <td>
                                    ${refund.status === "pending" ? `<button class="btn btn-danger btn-sm" onclick="cancelRefund(${refund.id})">Anuluj</button>` : ""}
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania zwrotów:", error));
    }

    function cancelRefund(refundId) {
        if (!confirm("Czy na pewno chcesz anulować ten zwrot?")) return;

        fetch(`/api/admin/cancel_refund.php?id=${refundId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Zwrot został anulowany.");
                    fetchRefunds();
                } else {
                    alert("Błąd anulowania zwrotu: " + data.error);
                }
            })
            .catch(error => console.error("Błąd anulowania zwrotu:", error));
    }

    fetchRefunds();
});
</script>
=== App/Views/admin/dashboard.php ===
<?php require_once __DIR__ . '/../layouts/header.php'; ?>

<h1 class="text-center">Admin Dashboard</h1>

<div class="dashboard-container">
    <!-- Overview Cards -->
    <div class="row">
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Total Users</h4>
                    <p id="totalUsers" class="display-6">0</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Total Bookings</h4>
                    <p id="totalBookings" class="display-6">0</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Total Revenue</h4>
                    <p id="totalRevenue" class="display-6">$0.00</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Graphs -->
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="text-center">Monthly Booking Trends</h5>
                    <canvas id="bookingTrends"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="text-center">Monthly Revenue Trends</h5>
                    <canvas id="revenueTrends"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/js/admin.js"></script>

<?php require_once __DIR__ . '/../layouts/footer.php'; ?>
=== App/Views/admin/users.php ===
/*
|--------------------------------------------------------------------------
| Panel Zarządzania Użytkownikami
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie użytkownikami.
| Obsługuje filtrowanie, edycję, dodawanie i usuwanie użytkowników.
|
| Ścieżka: App/Views/admin/users.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, edycja, usuwanie)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane użytkowników)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Zarządzanie Użytkownikami</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Lista Użytkowników</h3>
        <button class="btn btn-primary" id="addUserBtn">Dodaj Użytkownika</button>
    </div>

    <!-- Filtry użytkowników -->
    <form id="userFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <select class="form-control" name="role">
                <option value="">Wybierz rolę</option>
                <option value="user">Użytkownik</option>
                <option value="admin">Administrator</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Status</option>
                <option value="active">Aktywny</option>
                <option value="inactive">Nieaktywny</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="registration_date" placeholder="Data rejestracji">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela użytkowników -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Imię i nazwisko</th>
                <th>Email</th>
                <th>Rola</th>
                <th>Status</th>
                <th>Data rejestracji</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="userList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<!-- Modal dodawania/edycji użytkownika -->
<div id="userModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modalTitle">Dodaj Użytkownika</h2>
        <form id="userForm">
            <?= csrf_field() ?>
            <input type="hidden" id="userId" name="userId">

            <div class="form-group">
                <label for="name">Imię i nazwisko</label>
                <input type="text" id="name" name="name" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="email">Adres e-mail</label>
                <input type="email" id="email" name="email" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="role">Rola</label>
                <select id="role" name="role" class="form-control" required>
                    <option value="user">Użytkownik</option>
                    <option value="admin">Administrator</option>
                </select>
            </div>

            <div class="form-group">
                <label for="status">Status</label>
                <select id="status" name="status" class="form-control" required>
                    <option value="active">Aktywny</option>
                    <option value="inactive">Nieaktywny</option>
                </select>
            </div>

            <button type="submit" class="btn btn-success">Zapisz</button>
        </form>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("userFilterForm");
    const addUserBtn = document.getElementById("addUserBtn");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchUsers(new FormData(filterForm));
    });

    addUserBtn.addEventListener("click", function() {
        openUserModal();
    });

    function fetchUsers(formData = null) {
        let url = "/api/admin/users.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const userTable = document.getElementById("userList");
                userTable.innerHTML = "";

                if (data.length === 0) {
                    userTable.innerHTML = `<tr><td colspan="7" class="text-center text-muted">Brak użytkowników spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(user => {
                        userTable.innerHTML += `
                            <tr>
                                <td>${user.id}</td>
                                <td>${user.name}</td>
                                <td>${user.email}</td>
                                <td>${user.role}</td>
                                <td>${user.status}</td>
                                <td>${user.registration_date}</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="editUser(${user.id})">Edytuj</button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteUser(${user.id})">Usuń</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania użytkowników:", error));
    }

    fetchUsers();
});
</script>
=== App/Views/admin/audit_logs.php ===
<?php
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}

/*
|--------------------------------------------------------------------------
| Logi Audytowe Administratora
|--------------------------------------------------------------------------
| Ten plik odpowiada za wyświetlanie logów audytowych systemu. Administrator
| może filtrować historię działań użytkowników według ID, rezerwacji, daty i IP.
|
| Ścieżka: App/Views/admin/audit_logs.php
|
| Zależy od:
| - JavaScript: admin.js (obsługa logów, AJAX)
| - CSS: admin.css (stylizacja tabeli, formularzy)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pobierane z bazy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX, dynamiczne ładowanie danych)
| - HTML, CSS (interfejs)
*/
?>
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logi Audytowe</title>
    <link rel="stylesheet" href="path/to/admin.css">
</head>
<body>
    <h1 class="text-center">Logi Audytowe</h1>

    <div class="admin-container">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Historia Zdarzeń w Systemie</h3>
            <button class="btn btn-secondary" id="clearFilters">Wyczyść Filtry</button>
        </div>

        <!-- Filtry -->
        <form id="filterForm" class="row mb-4">
            <?= csrf_field() ?>
            <div class="col-md-2">
                <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
            </div>
            <div class="col-md-2">
                <input type="text" class="form-control" name="booking_id" placeholder="ID Rezerwacji">
            </div>
            <div class="col-md-2">
                <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
            </div>
            <div class="col-md-2">
                <input type="date" class="form-control" name="end_date" placeholder="Data końcowa">
            </div>
            <div class="col-md-2">
                <select class="form-control" name="action_type">
                    <option value="">Rodzaj akcji</option>
                    <option value="login">Logowanie</option>
                    <option value="update">Aktualizacja</option>
                    <option value="delete">Usunięcie</option>
                </select>
            </div>
            <div class="col-md-2 text-end">
                <button type="submit" class="btn btn-primary">Filtruj</button>
            </div>
        </form>

        <!-- Tabela Logów -->
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Użytkownik</th>
                    <th>Akcja</th>
                    <th>Opis</th>
                    <th>ID Rezerwacji</th>
                    <th>Adres IP</th>
                    <th>Data</th>
                </tr>
            </thead>
            <tbody id="auditLogs">
                <!-- Dane będą ładowane dynamicznie -->
            </tbody>
        </table>
    </div>

    <script src="path/to/admin.js"></script>
    <script>
    document.addEventListener("DOMContentLoaded", function() {
        const filterForm = document.getElementById("filterForm");
        const clearFilters = document.getElementById("clearFilters");

        // Obsługa filtrów
        filterForm.addEventListener("submit", function(e) {
            e.preventDefault();
            fetchAuditLogs(new FormData(filterForm));
        });

        clearFilters.addEventListener("click", function() {
            filterForm.reset();
            fetchAuditLogs();
        });

        // Pobieranie logów audytowych przez AJAX
        function fetchAuditLogs(formData = null) {
            let url = "/api/admin/audit_logs.php";
            if (formData) {
                url += "?" + new URLSearchParams(formData).toString();
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    const auditLogsTable = document.getElementById("auditLogs");
                    auditLogsTable.innerHTML = "";
                    data.forEach(log => {
                        auditLogsTable.innerHTML += `
                            <tr>
                                <td>${log.id}</td>
                                <td>${log.user}</td>
                                <td>${log.action}</td>
                                <td>${log.details}</td>
                                <td>${log.booking_id || '-'}</td>
                                <td>${log.ip_address}</td>
                                <td>${log.formatted_date}</td>
                            </tr>
                        `;
                    });
                })
                .catch(error => console.error("Błąd pobierania logów audytowych:", error));
        }

        // Automatyczne załadowanie logów po otwarciu strony
        fetchAuditLogs();
    });
    </script>
</body>
</html>
=== App/Views/admin/logs.php ===
/*
|--------------------------------------------------------------------------
| Logi Systemowe Administratora
|--------------------------------------------------------------------------
| Ten plik odpowiada za wyświetlanie logów systemowych, które pomagają
| administratorowi diagnozować problemy techniczne.
|
| Ścieżka: App/Views/admin/logs.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa logów, AJAX)
| - CSS: /css/admin.css (stylizacja tabeli)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pobierane z bazy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX, dynamiczne ładowanie danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Logi Systemowe</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Przegląd Logów Systemowych</h3>
        <button class="btn btn-secondary" id="clearFilters">Wyczyść Filtry</button>
    </div>

    <!-- Filtry logów -->
    <form id="logFilterForm" class="row mb-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <select class="form-control" name="log_type">
                <option value="">Wybierz typ logu</option>
                <option value="error">Błąd</option>
                <option value="info">Informacja</option>
                <option value="warning">Ostrzeżenie</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="text" class="form-control" name="log_message" placeholder="Wyszukaj w treści logu">
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" name="end_date" placeholder="Data końcowa">
        </div>
        <div class="col-md-2 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela logów -->
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Typ Logu</th>
                <th>Wiadomość</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody id="systemLogs">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
    <p id="noLogsMessage" class="text-center text-muted" style="display:none;">Brak logów spełniających kryteria.</p>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("logFilterForm");
    const clearFilters = document.getElementById("clearFilters");

    // Obsługa filtrów
    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchLogs(new FormData(filterForm));
    });

    clearFilters.addEventListener("click", function() {
        filterForm.reset();
        fetchLogs();
    });

    // Pobieranie logów systemowych przez AJAX
    function fetchLogs(formData = null) {
        let url = "/api/admin/logs.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const logsTable = document.getElementById("systemLogs");
                logsTable.innerHTML = "";
                const noLogsMessage = document.getElementById("noLogsMessage");

                if (data.length === 0) {
                    noLogsMessage.style.display = "block";
                } else {
                    noLogsMessage.style.display = "none";
                    data.forEach(log => {
                        logsTable.innerHTML += `
                            <tr>
                                <td>${log.id}</td>
                                <td>${log.type}</td>
                                <td>${log.message}</td>
                                <td>${log.date}</td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania logów systemowych:", error));
    }

    // Automatyczne załadowanie logów po otwarciu strony
    fetchLogs();
});
</script>
=== App/Views/admin/documents.php ===
/*
|--------------------------------------------------------------------------
| Panel Zarządzania Dokumentami
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie dokumentami 
| przesłanymi przez użytkowników. Obsługuje filtrowanie i podgląd plików.
|
| Ścieżka: App/Views/admin/documents.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie, usuwanie dokumentów)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane dokumentów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Zarządzanie Dokumentami</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Lista Dokumentów</h3>
    </div>

    <!-- Filtry dokumentów -->
    <form id="documentFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
        </div>
        <div class="col-md-3">
            <select class="form-control" name="document_type">
                <option value="">Typ dokumentu</option>
                <option value="contract">Umowa</option>
                <option value="invoice">Faktura</option>
                <option value="identity">Dowód tożsamości</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="upload_date" placeholder="Data przesłania">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela dokumentów -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Typ</th>
                <th>Plik</th>
                <th>Data przesłania</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="documentList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("documentFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchDocuments(new FormData(filterForm));
    });

    function fetchDocuments(formData = null) {
        let url = "/api/admin/documents.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const documentTable = document.getElementById("documentList");
                documentTable.innerHTML = "";

                if (data.length === 0) {
                    documentTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak dokumentów spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(doc => {
                        documentTable.innerHTML += `
                            <tr>
                                <td>${doc.id}</td>
                                <td>${doc.user}</td>
                                <td>${doc.type}</td>
                                <td><a href="${doc.file_url}" target="_blank">Podgląd</a></td>
                                <td>${doc.upload_date}</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" onclick="deleteDocument(${doc.id})">Usuń</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania dokumentów:", error));
    }

    function deleteDocument(documentId) {
        if (!confirm("Czy na pewno chcesz usunąć ten dokument?")) return;

        fetch(`/api/admin/delete_document.php?id=${documentId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Dokument został usunięty.");
                    fetchDocuments();
                } else {
                    alert("Błąd usuwania dokumentu: " + data.error);
                }
            })
            .catch(error => console.error("Błąd usuwania dokumentu:", error));
    }

    fetchDocuments();
});
</script>
=== App/Views/admin/reports.php ===
/*
|--------------------------------------------------------------------------
| Raporty Administratora
|--------------------------------------------------------------------------
| Ten plik umożliwia generowanie raportów dotyczących rezerwacji, płatności,
| użytkowników, aktywności w systemie oraz audytów.
|
| Ścieżka: App/Views/admin/reports.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa generowania raportów, AJAX)
| - CSS: /css/admin.css (stylizacja formularzy i tabeli)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pobierane z bazy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX, dynamiczne generowanie raportów)
| - Chart.js (wizualizacja raportów)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Raporty Systemowe</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Generowanie raportów</h3>
        <button class="btn btn-secondary" id="clearFilters">Reset</button>
    </div>

    <!-- Formularz generowania raportów -->
    <form id="adminReportForm" class="mt-4">
        <?= csrf_field() ?>

        <div class="mb-3">
            <label for="reportType" class="form-label">Typ raportu</label>
            <select class="form-select" id="reportType" name="reportType" required>
                <option value="" disabled selected>Wybierz typ raportu</option>
                <option value="bookings">Rezerwacje</option>
                <option value="payments">Płatności</option>
                <option value="users">Użytkownicy</option>
                <option value="activity">Aktywność użytkowników</option>
                <option value="audit">Logi audytowe</option>
            </select>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="startDate" class="form-label">Data początkowa</label>
                <input type="date" class="form-control" id="startDate" name="startDate" required>
            </div>

            <div class="col-md-6 mb-3">
                <label for="endDate" class="form-label">Data końcowa</label>
                <input type="date" class="form-control" id="endDate" name="endDate" required>
            </div>
        </div>

        <div class="mb-3">
            <label for="format" class="form-label">Format raportu</label>
            <select class="form-select" id="format" name="format" required>
                <option value="csv">CSV</option>
                <option value="pdf">PDF</option>
                <option value="json">JSON</option>
            </select>
        </div>

        <button type="submit" class="btn btn-primary w-100">Generuj raport</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>

    <div class="mt-4">
        <h4>Podgląd raportu</h4>
        <canvas id="reportChart"></canvas>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const reportForm = document.getElementById("adminReportForm");
    const responseMessage = document.getElementById("responseMessage");
    const clearFilters = document.getElementById("clearFilters");

    reportForm.addEventListener("submit", function(e) {
        e.preventDefault();
        generateReport(new FormData(reportForm));
    });

    clearFilters.addEventListener("click", function() {
        reportForm.reset();
        responseMessage.style.display = "none";
    });

    function generateReport(formData) {
        let url = "/api/admin/reports.php";

        fetch(url, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Raport wygenerowany pomyślnie! Pobierz go tutaj: " + data.download_link;
                renderChart(data.chartData);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd generowania raportu:", error);
        });
    }

    function renderChart(chartData) {
        const ctx = document.getElementById("reportChart").getContext("2d");
        new Chart(ctx, {
            type: "bar",
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: "Liczba zgłoszeń",
                    data: chartData.values,
                    backgroundColor: "rgba(54, 162, 235, 0.6)"
                }]
            }
        });
    }
});
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
=== App/Views/admin/settings.php ===
/*
|--------------------------------------------------------------------------
| Ustawienia Systemowe Administratora
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi konfigurację systemu – ustawienia
| ogólne, tryb konserwacji, strefę czasową oraz konfigurację API.
|
| Ścieżka: App/Views/admin/settings.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa formularza ustawień, AJAX)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (przechowywanie ustawień)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do zapisu ustawień)
| - HTML, CSS (interfejs)
*/

<?php
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}

// Improved form validation
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $errors = [];

    if (empty($_POST['setting_name'])) {
        $errors[] = 'Setting name is required';
    }

    if (empty($_POST['setting_value'])) {
        $errors[] = 'Setting value is required';
    }

    if (empty($errors)) {
        // Save settings logic
        // ...existing code...
    } else {
        foreach ($errors as $error) {
            echo "<p>$error</p>";
        }
    }
}
?>

<h1 class="text-center">Ustawienia Systemowe</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Konfiguracja systemu</h3>
        <button class="btn btn-secondary" id="resetSettings">Resetuj</button>
    </div>

    <!-- Formularz ustawień systemowych -->
    <form id="settingsForm" class="mt-4">
        <?= csrf_field() ?>

        <div class="mb-3">
            <label for="site_name" class="form-label">Nazwa strony</label>
            <input type="text" id="site_name" name="site_name" class="form-control" placeholder="Podaj nazwę strony" value="<?= esc($settings['site_name'] ?? '') ?>" required>
        </div>

        <div class="mb-3">
            <label for="admin_email" class="form-label">E-mail administratora</label>
            <input type="email" id="admin_email" name="admin_email" class="form-control" placeholder="Podaj e-mail administratora" value="<?= esc($settings['admin_email'] ?? '') ?>" required>
        </div>

        <div class="mb-3">
            <label for="logo_url" class="form-label">Logo strony (URL)</label>
            <input type="url" id="logo_url" name="logo_url" class="form-control" placeholder="Podaj URL logo" value="<?= esc($settings['logo_url'] ?? '') ?>">
        </div>

        <div class="mb-3">
            <label for="timezone" class="form-label">Strefa czasowa</label>
            <select id="timezone" name="timezone" class="form-select">
                <?php foreach (timezone_identifiers_list() as $tz): ?>
                    <option value="<?= esc($tz) ?>" <?= ($settings['timezone'] ?? '') === $tz ? 'selected' : '' ?>><?= esc($tz) ?></option>
                <?php endforeach; ?>
            </select>
        </div>

        <div class="mb-3">
            <label for="log_limit" class="form-label">Maksymalna liczba logów</label>
            <input type="number" id="log_limit" name="log_limit" class="form-control" value="<?= esc($settings['log_limit'] ?? 1000) ?>" min="100">
        </div>

        <div class="mb-3">
            <label for="api_key" class="form-label">Klucz API</label>
            <input type="text" id="api_key" name="api_key" class="form-control" placeholder="Podaj klucz API" value="<?= esc($settings['api_key'] ?? '') ?>">
        </div>

        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="maintenance_mode" name="maintenance_mode" <?= isset($settings['maintenance_mode']) && $settings['maintenance_mode'] ? 'checked' : '' ?>>
            <label class="form-check-label" for="maintenance_mode">Tryb konserwacji</label>
        </div>

        <button type="submit" class="btn btn-primary w-100">Zapisz zmiany</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const settingsForm = document.getElementById("settingsForm");
    const responseMessage = document.getElementById("responseMessage");
    const resetSettings = document.getElementById("resetSettings");

    settingsForm.addEventListener("submit", function(e) {
        e.preventDefault();
        saveSettings(new FormData(settingsForm));
    });

    resetSettings.addEventListener("click", function() {
        if (confirm("Czy na pewno chcesz przywrócić domyślne ustawienia?")) {
            fetch("/api/admin/reset_settings.php", { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    responseMessage.style.display = "block";
                    responseMessage.className = "alert alert-danger";
                    responseMessage.textContent = "Błąd resetowania ustawień.";
                }
            })
            .catch(error => console.error("Błąd resetowania ustawień:", error));
        }
    });

    function saveSettings(formData) {
        let url = "/api/admin/save_settings.php";

        fetch(url, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Ustawienia zapisane pomyślnie!";
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd zapisywania ustawień:", error);
        });
    }
});
</script>
=== App/Views/layouts/header.php ===
<?php
/*
|--------------------------------------------------------------------------
| Header - Dynamiczny Nagłówek dla Wszystkich Widoków
|--------------------------------------------------------------------------
| Plik przełącza się dynamicznie pomiędzy stroną główną, pulpitem użytkownika
| oraz pulpitem administratora. Wyświetla odpowiednie skróty i powitanie.
|
| Ścieżka: App/Views/layouts/header.php
*/



$isLoggedIn = isset($_SESSION['user_id']);
$isAdmin = isset($_SESSION['user_role']) && $_SESSION['user_role'] === 'admin';
$username = $isLoggedIn ? $_SESSION['username'] : null;

// Pobranie losowego modelu auta z bazy, jeśli są dostępne
$availableCars = []; // Tu wstaw zapytanie do bazy np. SELECT model FROM cars
if (!empty($availableCars)) {
    $randomCar = $availableCars[array_rand($availableCars)];
} else {
    $randomCar = "Twój wymarzony samochód";
}

// Lista powitań zachęcających do rezerwacji i absurdalne nawiązania do samochodów
$greetings = [
    "Hej, $username! $randomCar już czeka na przygodę! 🚗💨",
    "Witaj, $username! Może dziś przejażdżka $randomCar? 🌍",
    "$username, świat stoi przed Tobą otworem! $randomCar już grzeje silnik! 🏎️",
    "Gotowy na podróż, $username? $randomCar nie chce stać w miejscu! 📅",
    "$username, może czas na spontaniczny wypad? $randomCar jest gotowy! 🎒",
    "Nie czekaj, $username – $randomCar znika szybciej niż hot dogi na stacji! ⏳",
    "Witaj, $username! Może dziś coś sportowego? $randomCar czeka na rozgrzanie! 🏁",
    "Nie musisz mieć własnego auta, $username! $randomCar już czeka, by Ci służyć! 🚗",
    "Hej, $username! $randomCar to klucz do niezapomnianej podróży! 💰",
    "$username, weekend bez planu? $randomCar to zawsze dobry pomysł! 🏕️",
    "Dłuższy wyjazd? Krótki city-break? $randomCar nie pyta – jedzie! 🛣️",
    "Nie czekaj do ostatniej chwili, $username! $randomCar chce ruszać! 🔥",
    "Dziś dobry dzień na podróż, $username! $randomCar jest na to gotowy! 🏖️",
    "Niech nic Cię nie zatrzyma, $username! $randomCar tylko czeka na Twój ruch! 🚙",
    "$username, wiesz co robi różnicę? Wybór auta. Może $randomCar? 🏜️",
    "Każda podróż zaczyna się od decyzji – a $randomCar to świetny wybór! 🛤️",
    "Twój plan na dziś: rezerwacja, kluczyki, $randomCar i w drogę! 🚦",
    "$username, czas na nową trasę! $randomCar już gotowy do jazdy! 🚘",
    "Nie odkładaj marzeń na później, $username – wynajmij $randomCar i jedź! 🎯",
    "Najlepsze podróże zaczynają się od rezerwacji! Może $randomCar? 📌",
    "$randomCar mówi, że masz jeszcze czas na rezerwację… ale nie za długo! 🏁",
    "Masz misję, $username! Wsiadaj do $randomCar i ruszaj na wyprawę! 🎯",
    "Nie masz planów na weekend? $randomCar ma je za Ciebie! 🚀",
    "Czyżbyś szukał przygody, $username? $randomCar już pali się do jazdy! 🔥",
    "Twój dzień zapowiada się ciekawie, jeśli wsiądziesz do $randomCar! 🎉",
    "$username, za godzinę w mieście jest koncert. $randomCar to Twoja wejściówka! 🎶",
    "Niespodzianka! Twój $randomCar ma bagażnik pełen optymizmu! 📦😁",
    "$username, w $randomCar radio puszcza tylko najlepsze kawałki do jazdy! 🎧",
    "$randomCar mówi, że potrzebuje wakacji. Zawieź go gdzieś! 🌴",
];

// Losowe powitanie przy każdym załadowaniu
$greeting = $isLoggedIn ? $greetings[array_rand($greetings)] : "Witaj w CarFuse! Wynajmij auto i ruszaj w drogę!";
?>
<script type="module" src="/js/main.js"></script>
<link rel="stylesheet" href="/main.css"> <!-- Ensure correct CSS path -->


<header>
    <nav class="navbar">
        <div class="container">
            <a href="/" class="logo">🚗 CarFuse</a>
            <ul class="nav-links">
                <?php if (!$isLoggedIn): ?>
                    <!-- Użytkownik niezalogowany -->
                    <li><a href="/auth/login">🔑 Zaloguj się</a></li>
                    <li><a href="/auth/register">📝 Zarejestruj się</a></li>
                <?php else: ?>
                    <!-- Użytkownik zalogowany -->
                    <li class="greeting"><?= $greeting ?></li>
                    <?php if ($isAdmin): ?>
                        <!-- Linki dla administratora -->
                        <li><a href="/dashboard">⚙️ Panel Admina</a></li>
                    <?php else: ?>
                        <!-- Linki dla użytkownika -->
                        <li><a href="/dashboard">📊 Panel Użytkownika</a></li>
                    <?php endif; ?>
                    <li><a href="/logout">🚪 Wyloguj się</a></li>
                <?php endif; ?>
            </ul>
        </div>
    </nav>
</header>
=== App/Views/layouts/footer.php ===
<?php
/*
|--------------------------------------------------------------------------
| Footer - Stopka dla Stron Publicznych
|--------------------------------------------------------------------------
| Plik zawiera stopkę strony oraz ładuje globalne zasoby JavaScript.
|
| Ścieżka: App/Views/layouts/footer.php
*/
?>

    </div> <!-- Koniec kontenera -->

    <footer class="footer">
        <div class="container text-center">
            <p>&copy; <?= date("Y"); ?> CarFuse. Wszelkie prawa zastrzeżone.</p>
        </div>
    </footer>
</body>
</html>
=== App/Views/layouts/sidebar.php ===
/*
|--------------------------------------------------------------------------
| Sidebar - Nawigacja w Dashboardzie
|--------------------------------------------------------------------------
| Plik odpowiada za wyświetlanie bocznego menu nawigacyjnego w dashboardzie.
| Umożliwia użytkownikom i administratorom przełączanie się między podstronami.
|
| Ścieżka: App/Views/layouts/sidebar.php
*/

<aside class="sidebar">
    <nav class="sidebar-menu">
        <ul>
            <li><a href="#user/dashboard" class="dashboard-link">📊 Panel</a></li>
            <li><a href="#bookings/view" class="dashboard-link">📅 Moje rezerwacje</a></li>
            <li><a href="#payments/history" class="dashboard-link">💳 Historia płatności</a></li>
            <li><a href="#documents/user_documents" class="dashboard-link">📄 Moje dokumenty</a></li>
            <li><a href="#user/notifications" class="dashboard-link">🔔 Powiadomienia</a></li>
            <li><a href="#user/profile" class="dashboard-link">👤 Profil</a></li>
            <li><a href="#admin/users" class="dashboard-link">👥 Zarządzanie użytkownikami</a></li>
            <li><a href="#admin/audit_logs" class="dashboard-link">📜 Logi audytowe</a></li>
            <li><a href="#admin/logs" class="dashboard-link">📂 Logi systemowe</a></li>
            <li><a href="#admin/reports" class="dashboard-link">📑 Raporty</a></li>
            <li><a href="#admin/settings" class="dashboard-link">⚙️ Ustawienia</a></li>
            <li><a href="/logout">🚪 Wyloguj</a></li>
        </ul>
    </nav>
</aside>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll(".dashboard-link").forEach(link => {
            link.addEventListener("click", function(e) {
                e.preventDefault();
                let targetView = this.getAttribute("href").substring(1);
                fetch(`/App/Views/${targetView}.php`).then(response => response.text()).then(data => {
                    document.getElementById("dashboard-view").innerHTML = data;
                });
            });
        });
    });
</script>
=== App/Views/layouts/modals.php ===
/*
|--------------------------------------------------------------------------
| Modale - Okna Modalne
|--------------------------------------------------------------------------
| Plik zawiera globalne okna modalne wykorzystywane w aplikacji.
|
| Ścieżka: App/Views/layouts/modals.php
*/

<div id="globalModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modalTitle"></h2>
        <div id="modalBody"></div>
        <button class="btn btn-primary" id="modalConfirm">OK</button>
    </div>
</div>
=== App/Views/layouts/alerts.php ===
/*
|--------------------------------------------------------------------------
| Alerts - Globalne Powiadomienia
|--------------------------------------------------------------------------
| Plik odpowiada za wyświetlanie globalnych alertów i powiadomień.
|
| Ścieżka: App/Views/layouts/alerts.php
*/

<div id="alert-container"></div>
=== App/Views/layouts/navbar.php ===
/*
|--------------------------------------------------------------------------
| Navbar - Górna Nawigacja Dashboardu
|--------------------------------------------------------------------------
| Plik odpowiada za wyświetlanie górnej belki nawigacyjnej w dashboardzie.
| Pokazuje podstawowe opcje nawigacyjne i dostęp do ustawień konta.
|
| Ścieżka: App/Views/layouts/navbar.php
*/

<nav class="navbar">
    <div class="container">
        <a href="/dashboard" class="logo">🚗 CarFuse</a>
        <ul class="nav-links">
            <li><a href="#user/profile" class="dashboard-link">👤 Mój Profil</a></li>
            <li><a href="#user/notifications" class="dashboard-link">🔔 Powiadomienia</a></li>
            <li><a href="/logout">🚪 Wyloguj</a></li>
        </ul>
    </div>
</nav>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll(".dashboard-link").forEach(link => {
            link.addEventListener("click", function(e) {
                e.preventDefault();
                let targetView = this.getAttribute("href").substring(1);
                fetch(`/App/Views/${targetView}.php`).then(response => response.text()).then(data => {
                    document.getElementById("dashboard-view").innerHTML = data;
                });
            });
        });
    });
</script>
=== App/Views/payments/make_payment.php ===
<?php
/*
|--------------------------------------------------------------------------
| Dokonaj Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi dokonanie nowej płatności za rezerwacje
| lub inne usługi dostępne w systemie.
|
| Ścieżka: App/Views/payments/make_payment.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne przetwarzanie płatności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (obsługa transakcji)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego przetwarzania płatności)
| - HTML, CSS (interfejs)
*/


if (!isset($_SESSION['user_id'])) {
    header("Location: /auth/login.php");
    exit;
}

$userId = $_SESSION['user_id'];
?>

<h1 class="text-center">Dokonaj Płatności</h1>

<div class="payments-make-container">
    <form id="paymentForm">
        <?= csrf_field() ?>

        <!-- Wybór kwoty -->
        <div class="mb-3">
            <label for="amount" class="form-label">Kwota płatności (PLN)</label>
            <input type="number" class="form-control" id="amount" name="amount" min="1" required>
        </div>

        <!-- Metoda płatności -->
        <div class="mb-3">
            <label for="payment_method" class="form-label">Metoda płatności</label>
            <select class="form-select" id="payment_method" name="payment_method" required>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>

        <div id="cardDetails" style="display:none;">
            <div class="mb-3">
                <label for="card_number" class="form-label">Numer karty</label>
                <input type="text" class="form-control" id="card_number" name="card_number" pattern="\d{16}" placeholder="1234 5678 9012 3456">
            </div>
            <div class="mb-3 row">
                <div class="col">
                    <label for="expiry_date" class="form-label">Data ważności</label>
                    <input type="text" class="form-control" id="expiry_date" name="expiry_date" placeholder="MM/YY">
                </div>
                <div class="col">
                    <label for="cvv" class="form-label">CVV</label>
                    <input type="text" class="form-control" id="cvv" name="cvv" pattern="\d{3}" placeholder="123">
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary w-100">Zapłać</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const paymentTypeSelect = document.getElementById("payment_method");
    const cardDetails = document.getElementById("cardDetails");

    paymentTypeSelect.addEventListener("change", function() {
        cardDetails.style.display = this.value === "card" ? "block" : "none";
    });

    const paymentForm = document.getElementById("paymentForm");

    paymentForm.addEventListener("submit", function(e) {
        e.preventDefault();
        submitPayment(new FormData(paymentForm));
    });

    function submitPayment(formData) {
        fetch("/api/user/make_payment.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Płatność została pomyślnie zrealizowana!";
                setTimeout(() => window.location.href = "/payments/history", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd płatności:", error);
        });
    }
});
</script>
=== App/Views/payments/methods.php ===
<?php
/*
|--------------------------------------------------------------------------
| Metody Płatności Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi zarządzanie zapisanymi metodami płatności.
| Obsługuje dodawanie nowych metod oraz usuwanie zapisanych kart czy kont PayPal.
|
| Ścieżka: App/Views/payments/methods.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne pobieranie metod płatności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane metod płatności)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego pobierania metod płatności)
| - HTML, CSS (interfejs)
*/


if (!isset($_SESSION['user_id'])) {
    header("Location: /auth/login.php");
    exit;
}

$userId = $_SESSION['user_id'];
?>

<h1 class="text-center">Moje Metody Płatności</h1>

<div class="payments-methods-container">
    <!-- Formularz dodawania metody płatności -->
    <form id="addPaymentMethodForm">
        <?= csrf_field() ?>
        <div class="mb-3">
            <label for="payment_type" class="form-label">Wybierz metodę</label>
            <select class="form-select" id="payment_type" name="payment_type" required>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>

        <div id="cardDetails" style="display:none;">
            <div class="mb-3">
                <label for="card_number" class="form-label">Numer karty</label>
                <input type="text" class="form-control" id="card_number" name="card_number" pattern="\d{16}" placeholder="1234 5678 9012 3456">
            </div>
            <div class="mb-3 row">
                <div class="col">
                    <label for="expiry_date" class="form-label">Data ważności</label>
                    <input type="text" class="form-control" id="expiry_date" name="expiry_date" placeholder="MM/YY">
                </div>
                <div class="col">
                    <label for="cvv" class="form-label">CVV</label>
                    <input type="text" class="form-control" id="cvv" name="cvv" pattern="\d{3}" placeholder="123">
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary w-100">Dodaj metodę płatności</button>
    </form>

    <h3 class="mt-4">Zapisane Metody Płatności</h3>
    <ul id="paymentMethodsList" class="list-group">
        <!-- Metody płatności ładowane dynamicznie -->
    </ul>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const paymentTypeSelect = document.getElementById("payment_type");
    const cardDetails = document.getElementById("cardDetails");

    paymentTypeSelect.addEventListener("change", function() {
        cardDetails.style.display = this.value === "card" ? "block" : "none";
    });

    const addPaymentForm = document.getElementById("addPaymentMethodForm");

    addPaymentForm.addEventListener("submit", function(e) {
        e.preventDefault();
        addPaymentMethod(new FormData(addPaymentForm));
    });

    function loadPaymentMethods() {
        fetch("/api/user/get_payment_methods.php")
            .then(response => response.json())
            .then(data => {
                const methodList = document.getElementById("paymentMethodsList");
                methodList.innerHTML = "";

                if (data.length > 0) {
                    data.forEach(method => {
                        methodList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${method.type === "card" ? "💳 Karta kredytowa" : method.type === "paypal" ? "🅿️ PayPal" : "🏦 Przelew bankowy"}</span>
                                <button class="btn btn-sm btn-danger" onclick="deletePaymentMethod(${method.id})">Usuń</button>
                            </li>
                        `;
                    });
                } else {
                    methodList.innerHTML = `<li class="list-group-item text-muted">Brak zapisanych metod płatności</li>`;
                }
            })
            .catch(error => console.error("Błąd ładowania metod płatności:", error));
    }

    function addPaymentMethod(formData) {
        fetch("/api/user/add_payment_method.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Metoda płatności została dodana!");
                loadPaymentMethods();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => console.error("Błąd dodawania metody płatności:", error));
    }

    function deletePaymentMethod(methodId) {
        if (!confirm("Czy na pewno chcesz usunąć tę metodę płatności?")) return;

        fetch(`/api/user/delete_payment_method.php?id=${methodId}`, { method: "POST" })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Metoda płatności została usunięta!");
                loadPaymentMethods();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => console.error("Błąd usuwania metody płatności:", error));
    }

    loadPaymentMethods();
});
</script>
=== App/Views/payments/history.php ===
/*
|--------------------------------------------------------------------------
| Historia Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie historii płatności i ich statusów.
| Obsługuje filtrowanie oraz podgląd szczegółów transakcji.
|
| Ścieżka: App/Views/payments/history.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne pobieranie płatności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane płatności)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego pobierania płatności)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Historia Płatności</h1>

<div class="payments-history-container">
    <!-- Filtry płatności -->
    <form id="paymentFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-4">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="completed">Zakończona</option>
                <option value="pending">Oczekująca</option>
                <option value="failed">Nieudana</option>
            </select>
        </div>
        <div class="col-md-4">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-4 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela płatności -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="paymentList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("paymentFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchPayments(new FormData(filterForm));
    });

    function fetchPayments(formData = null) {
        let url = "/api/user/payments.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const paymentTable = document.getElementById("paymentList");
                paymentTable.innerHTML = "";

                if (data.length === 0) {
                    paymentTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak płatności spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(payment => {
                        paymentTable.innerHTML += `
                            <tr>
                                <td>${payment.id}</td>
                                <td>${payment.amount} PLN</td>
                                <td>${payment.method}</td>
                                <td>${payment.status}</td>
                                <td>${payment.date}</td>
                                <td>
                                    <button class="btn btn-info btn-sm" onclick="viewPayment(${payment.id})">Podgląd</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania płatności:", error));
    }

    function viewPayment(paymentId) {
        fetch(`/api/user/payment_details.php?id=${paymentId}`)
            .then(response => response.json())
            .then(data => {
                alert(`Szczegóły płatności:\n\nKwota: ${data.amount} PLN\nMetoda: ${data.method}\nStatus: ${data.status}\nData: ${data.date}`);
            })
            .catch(error => console.error("Błąd pobierania szczegółów płatności:", error));
    }

    fetchPayments();
});
</script>
=== App/Views/payments/refund.php ===
<?php
/*
|--------------------------------------------------------------------------
| Historia Zwrotów Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie historii swoich zwrotów płatności
| oraz ich statusów. Obsługuje filtrowanie oraz podgląd szczegółów.
|
| Ścieżka: App/Views/payments/refund.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne pobieranie zwrotów)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane zwrotów płatności)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego pobierania zwrotów)
| - HTML, CSS (interfejs)
*/


if (!isset($_SESSION['user_id'])) {
    header("Location: /auth/login.php");
    exit;
}

$userId = $_SESSION['user_id'];
?>

<h1 class="text-center">Historia Zwrotów</h1>

<div class="payments-refund-container">
    <!-- Filtry zwrotów -->
    <form id="refundFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-4">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="processed">Zakończony</option>
                <option value="pending">Oczekujący</option>
                <option value="failed">Nieudany</option>
            </select>
        </div>
        <div class="col-md-4">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-4 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela zwrotów -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="refundList">
            <tr>
                <td colspan="6" class="text-center text-muted">Ładowanie danych...</td>
            </tr>
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("refundFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchRefunds(new FormData(filterForm));
    });

    function fetchRefunds(formData = null) {
        let url = "/api/user/refunds.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const refundTable = document.getElementById("refundList");
                refundTable.innerHTML = "";

                if (data.length === 0) {
                    refundTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak zwrotów spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(refund => {
                        let statusColor;
                        switch (refund.status) {
                            case "processed": statusColor = "text-success"; break;
                            case "pending": statusColor = "text-warning"; break;
                            case "failed": statusColor = "text-danger"; break;
                            default: statusColor = "text-secondary";
                        }

                        refundTable.innerHTML += `
                            <tr>
                                <td>${refund.id}</td>
                                <td>${refund.amount} PLN</td>
                                <td>${refund.method}</td>
                                <td class="${statusColor}">${refund.status}</td>
                                <td>${refund.date}</td>
                                <td>
                                    <button class="btn btn-info btn-sm" onclick="viewRefund(${refund.id})">Podgląd</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania zwrotów:", error));
    }

    function viewRefund(refundId) {
        fetch(`/api/user/refund_details.php?id=${refundId}`)
            .then(response => response.json())
            .then(data => {
                alert(`Szczegóły zwrotu:\n\nKwota: ${data.amount} PLN\nMetoda: ${data.method}\nStatus: ${data.status}\nData: ${data.date}`);
            })
            .catch(error => console.error("Błąd pobierania szczegółów zwrotu:", error));
    }

    fetchRefunds();
});
</script>
=== App/Views/dashboard.php ===
/*
|--------------------------------------------------------------------------
| Dashboard - Centralny Panel dla Użytkownika i Administratora
|--------------------------------------------------------------------------
| Ten plik obsługuje zarówno użytkowników, jak i administratorów.
| Na podstawie roli zmienia dostępne opcje w nawigacji bocznej.
|
| Ścieżka: App/Views/dashboard.php
*/
require_once __DIR__ . '/../layouts/header.php';

// Sprawdzenie roli użytkownika (przykładowa implementacja)
$isAdmin = isset($_SESSION['user_role']) && $_SESSION['user_role'] === 'admin';
?>

<aside class="sidebar">
    <nav class="sidebar-menu">
        <ul>
            <li><a href="#user/dashboard" class="dashboard-link">📊 Panel</a></li>
            <li><a href="#bookings/view" class="dashboard-link">📅 Moje rezerwacje</a></li>
            <li><a href="#payments/history" class="dashboard-link">💳 Historia płatności</a></li>
            <li><a href="#documents/user_documents" class="dashboard-link">📄 Moje dokumenty</a></li>
            <li><a href="#user/notifications" class="dashboard-link">🔔 Powiadomienia</a></li>
            <li><a href="#user/profile" class="dashboard-link">👤 Profil</a></li>

            <?php if ($isAdmin): ?>
                <li><a href="#admin/users" class="dashboard-link">👥 Zarządzanie użytkownikami</a></li>
                <li><a href="#admin/audit_logs" class="dashboard-link">📜 Logi audytowe</a></li>
                <li><a href="#admin/logs" class="dashboard-link">📂 Logi systemowe</a></li>
                <li><a href="#admin/reports" class="dashboard-link">📑 Raporty</a></li>
                <li><a href="#admin/settings" class="dashboard-link">⚙️ Ustawienia</a></li>
                <li><a href="#admin/payments/dashboard" class="dashboard-link">💳 Płatności</a></li>
                <li><a href="#admin/documents/documents" class="dashboard-link">📄 Dokumenty</a></li>
            <?php endif; ?>

            <li><a href="/logout">🚪 Wyloguj</a></li>
        </ul>
    </nav>
</aside>

<div id="dashboard-content">
    <h1 class="text-center">Panel <?= $isAdmin ? 'Administratora' : 'Użytkownika' ?></h1>
    <div id="dashboard-view">
        <?php require_once __DIR__ . '/' . ($isAdmin ? 'admin/dashboard-home.php' : 'user/dashboard-home.php'); ?>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll(".dashboard-link").forEach(link => {
            link.addEventListener("click", function(e) {
                e.preventDefault();
                let targetView = this.getAttribute("href").substring(1);
                fetch(`/App/Views/${targetView}.php`).then(response => response.text()).then(data => {
                    document.getElementById("dashboard-view").innerHTML = data;
                });
            });
        });
    });
</script>

<?php require_once __DIR__ . '/../layouts/footer.php'; ?>
=== App/Views/user/profile.php ===
/*
|--------------------------------------------------------------------------
| Edycja Profilu Użytkownika
|--------------------------------------------------------------------------
| Ten plik pozwala użytkownikowi aktualizować swoje dane, zmieniać hasło
| oraz zarządzać swoim zdjęciem profilowym.
|
| Ścieżka: App/Views/user/profile.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, walidacja formularzy)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane użytkownika)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego zapisu)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Mój Profil</h1>

<div class="user-profile-container">
    <div class="row">
        <!-- Edycja Danych Użytkownika -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h4>Edycja Danych</h4>
                    <form id="profileForm">
                        <?= csrf_field() ?>
                        <div class="mb-3">
                            <label for="name" class="form-label">Imię i nazwisko</label>
                            <input type="text" class="form-control" id="name" name="name" value="<?= esc($user['name']) ?>" required>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Adres e-mail</label>
                            <input type="email" class="form-control" id="email" name="email" value="<?= esc($user['email']) ?>" required>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Zapisz zmiany</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Zmiana Hasła -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h4>Zmiana Hasła</h4>
                    <form id="passwordForm">
                        <?= csrf_field() ?>
                        <div class="mb-3">
                            <label for="current_password" class="form-label">Obecne hasło</label>
                            <input type="password" class="form-control" id="current_password" name="current_password" required>
                        </div>
                        <div class="mb-3">
                            <label for="new_password" class="form-label">Nowe hasło</label>
                            <input type="password" class="form-control" id="new_password" name="new_password" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirm_password" class="form-label">Potwierdź nowe hasło</label>
                            <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
                        </div>
                        <button type="submit" class="btn btn-danger w-100">Zmień hasło</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Zarządzanie Awatarem -->
    <div class="row mt-4">
        <div class="col-md-6 offset-md-3">
            <div class="card shadow text-center">
                <div class="card-body">
                    <h4>Zdjęcie Profilowe</h4>
                    <img src="<?= esc($user['avatar_url'] ?? '/images/default-avatar.png') ?>" class="profile-avatar img-thumbnail mb-3" width="150">
                    <form id="avatarForm" enctype="multipart/form-data">
                        <?= csrf_field() ?>
                        <input type="file" class="form-control mb-2" id="avatar" name="avatar" accept="image/*">
                        <button type="submit" class="btn btn-success">Prześlij nowe zdjęcie</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAvatar()">Usuń zdjęcie</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const profileForm = document.getElementById("profileForm");
    const passwordForm = document.getElementById("passwordForm");
    const avatarForm = document.getElementById("avatarForm");

    profileForm.addEventListener("submit", function(e) {
        e.preventDefault();
        updateProfile(new FormData(profileForm));
    });

    passwordForm.addEventListener("submit", function(e) {
        e.preventDefault();
        updatePassword(new FormData(passwordForm));
    });

    avatarForm.addEventListener("submit", function(e) {
        e.preventDefault();
        updateAvatar(new FormData(avatarForm));
    });

    function updateProfile(formData) {
        fetch("/api/user/update_profile.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            alert(data.success ? "Dane zaktualizowane!" : "Błąd: " + data.error);
        })
        .catch(error => console.error("Błąd aktualizacji profilu:", error));
    }

    function updatePassword(formData) {
        fetch("/api/user/update_password.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            alert(data.success ? "Hasło zmienione!" : "Błąd: " + data.error);
        })
        .catch(error => console.error("Błąd zmiany hasła:", error));
    }

    function updateAvatar(formData) {
        fetch("/api/user/update_avatar.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Zdjęcie profilowe zaktualizowane!");
                location.reload();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => console.error("Błąd aktualizacji awatara:", error));
    }

    function deleteAvatar() {
        if (!confirm("Czy na pewno chcesz usunąć zdjęcie profilowe?")) return;

        fetch("/api/user/delete_avatar.php", { method: "POST" })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Zdjęcie profilowe usunięte!");
                location.reload();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => console.error("Błąd usuwania awatara:", error));
    }
});
</script>
=== App/Views/user/dashboard.php ===
/*
|--------------------------------------------------------------------------
| Panel Użytkownika
|--------------------------------------------------------------------------
| Ten plik jest centralnym miejscem zarządzania kontem użytkownika. Wyświetla
| podsumowanie aktywności oraz umożliwia przełączanie między sekcjami dashboardu.
|
| Ścieżka: App/Views/user/dashboard.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne ładowanie sekcji)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane użytkownika)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania sekcji)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Panel Użytkownika</h1>

<div class="user-dashboard-container">
    <div class="row">
        <!-- Podsumowanie aktywności -->
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Twoje Rezerwacje</h4>
                    <p id="totalBookings" class="display-6">0</p>
                    <a href="#bookings/view" class="dashboard-link">Zarządzaj rezerwacjami</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Historia Płatności</h4>
                    <p id="totalPayments" class="display-6">0 PLN</p>
                    <a href="#payments/history" class="dashboard-link">Zobacz płatności</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Twoje Dokumenty</h4>
                    <p id="totalDocuments" class="display-6">0</p>
                    <a href="#documents/user_documents" class="dashboard-link">Przeglądaj dokumenty</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Ostatnie powiadomienia -->
    <h3 class="mt-4">Ostatnie Powiadomienia</h3>
    <ul id="notificationList" class="list-group">
        <!-- Powiadomienia ładowane dynamicznie -->
    </ul>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    function loadDashboardData() {
        fetch("/api/user/dashboard_summary.php")
            .then(response => response.json())
            .then(data => {
                document.getElementById("totalBookings").textContent = data.totalBookings || 0;
                document.getElementById("totalPayments").textContent = data.totalPayments + " PLN" || "0 PLN";
                document.getElementById("totalDocuments").textContent = data.totalDocuments || 0;

                const notificationList = document.getElementById("notificationList");
                notificationList.innerHTML = "";
                if (data.notifications.length > 0) {
                    data.notifications.forEach(notification => {
                        notificationList.innerHTML += `<li class="list-group-item">${notification.message}</li>`;
                    });
                } else {
                    notificationList.innerHTML = `<li class="list-group-item text-muted">Brak nowych powiadomień</li>`;
                }
            })
            .catch(error => console.error("Błąd ładowania danych użytkownika:", error));
    }

    loadDashboardData();
});
</script>
=== App/Views/user/notifications.php ===
/*
|--------------------------------------------------------------------------
| Powiadomienia Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie powiadomień, oznaczanie ich
| jako przeczytane oraz usuwanie.
|
| Ścieżka: App/Views/user/notifications.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane powiadomień)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania i aktualizacji powiadomień)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Powiadomienia</h1>

<div class="user-notifications-container">
    <ul id="notificationList" class="list-group">
        <!-- Powiadomienia ładowane dynamicznie -->
    </ul>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    function loadNotifications() {
        fetch("/api/user/get_notifications.php")
            .then(response => response.json())
            .then(data => {
                const notificationList = document.getElementById("notificationList");
                notificationList.innerHTML = "";
                
                if (data.length > 0) {
                    data.forEach(notification => {
                        notificationList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${notification.message}</span>
                                <div>
                                    ${notification.is_read ? "" : `<button class="btn btn-sm btn-success" onclick="markAsRead(${notification.id})">Oznacz jako przeczytane</button>`}
                                    <button class="btn btn-sm btn-danger" onclick="deleteNotification(${notification.id})">Usuń</button>
                                </div>
                            </li>
                        `;
                    });
                } else {
                    notificationList.innerHTML = `<li class="list-group-item text-muted">Brak nowych powiadomień</li>`;
                }
            })
            .catch(error => console.error("Błąd ładowania powiadomień:", error));
    }

    function markAsRead(notificationId) {
        fetch(`/api/user/mark_notification_read.php?id=${notificationId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadNotifications();
                } else {
                    alert("Błąd: " + data.error);
                }
            })
            .catch(error => console.error("Błąd oznaczania powiadomienia:", error));
    }

    function deleteNotification(notificationId) {
        if (!confirm("Czy na pewno chcesz usunąć to powiadomienie?")) return;

        fetch(`/api/user/delete_notification.php?id=${notificationId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadNotifications();
                } else {
                    alert("Błąd: " + data.error);
                }
            })
            .catch(error => console.error("Błąd usuwania powiadomienia:", error));
    }

    loadNotifications();
});
</script>
=== App/Views/user/reports.php ===
/*
|--------------------------------------------------------------------------
| Raporty Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi generowanie raportów dotyczących rezerwacji,
| płatności i aktywności w systemie. Raporty mogą być eksportowane do CSV, PDF, JSON.
|
| Ścieżka: App/Views/user/reports.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne generowanie raportów)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane do raportów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego generowania raportów)
| - Chart.js (wizualizacja raportów)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Raporty</h1>

<div class="user-reports-container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow">
                <div class="card-body">
                    <h4>Generowanie Raportów</h4>
                    <form id="reportForm">
                        <?= csrf_field() ?>

                        <div class="mb-3">
                            <label for="reportType" class="form-label">Typ raportu</label>
                            <select class="form-select" id="reportType" name="reportType" required>
                                <option value="" disabled selected>Wybierz typ raportu</option>
                                <option value="bookings">Rezerwacje</option>
                                <option value="payments">Płatności</option>
                                <option value="activity">Aktywność użytkownika</option>
                            </select>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="startDate" class="form-label">Data początkowa</label>
                                <input type="date" class="form-control" id="startDate" name="startDate" required>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="endDate" class="form-label">Data końcowa</label>
                                <input type="date" class="form-control" id="endDate" name="endDate" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="format" class="form-label">Format raportu</label>
                            <select class="form-select" id="format" name="format" required>
                                <option value="csv">CSV</option>
                                <option value="pdf">PDF</option>
                                <option value="json">JSON</option>
                            </select>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Generuj raport</button>
                    </form>

                    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h4>Podgląd raportu</h4>
        <canvas id="reportChart"></canvas>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const reportForm = document.getElementById("reportForm");
    const responseMessage = document.getElementById("responseMessage");

    reportForm.addEventListener("submit", function(e) {
        e.preventDefault();
        generateReport(new FormData(reportForm));
    });

    function generateReport(formData) {
        let url = "/api/user/reports.php";

        fetch(url, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Raport wygenerowany pomyślnie! Pobierz go tutaj: " + data.download_link;
                renderChart(data.chartData);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd generowania raportu:", error);
        });
    }

    function renderChart(chartData) {
        const ctx = document.getElementById("reportChart").getContext("2d");
        new Chart(ctx, {
            type: "bar",
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: "Liczba zgłoszeń",
                    data: chartData.values,
                    backgroundColor: "rgba(54, 162, 235, 0.6)"
                }]
            }
        });
    }
});
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
=== App/Views/bookings/view.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Lista Rezerwacji Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie swoich rezerwacji, filtrowanie
| ich oraz sprawdzanie statusu każdej rezerwacji.
|
| Ścieżka: App/Views/bookings/view.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne ładowanie rezerwacji)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane o rezerwacjach)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania rezerwacji)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Moje Rezerwacje</h1>

<div class="bookings-container">
    <!-- Filtry rezerwacji -->
    <form id="bookingFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-4">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="active">Aktywna</option>
                <option value="completed">Zakończona</option>
                <option value="cancelled">Anulowana</option>
            </select>
        </div>
        <div class="col-md-4">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-4 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela rezerwacji -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Pojazd</th>
                <th>Data rozpoczęcia</th>
                <th>Data zakończenia</th>
                <th>Status</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="bookingList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("bookingFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchBookings(new FormData(filterForm));
    });

    function fetchBookings(formData = null) {
        let url = "/api/user/bookings.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const bookingTable = document.getElementById("bookingList");
                bookingTable.innerHTML = "";

                if (data.length === 0) {
                    bookingTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak rezerwacji spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(booking => {
                        let statusClass = "";
                        switch (booking.status) {
                            case "active":
                                statusClass = "text-success";
                                break;
                            case "completed":
                                statusClass = "text-secondary";
                                break;
                            case "cancelled":
                                statusClass = "text-danger";
                                break;
                        }
                        bookingTable.innerHTML += `
                            <tr>
                                <td>${booking.id}</td>
                                <td>${booking.vehicle}</td>
                                <td>${booking.start_date}</td>
                                <td>${booking.end_date}</td>
                                <td class="${statusClass}">${booking.status}</td>
                                <td>
                                    <button class="btn btn-info btn-sm" onclick="viewBooking(${booking.id})">Podgląd</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania rezerwacji:", error));
    }

    function viewBooking(bookingId) {
        fetch(`/api/user/booking_details.php?id=${bookingId}`)
            .then(response => response.json())
            .then(data => {
                alert(`Szczegóły rezerwacji:\n\nPojazd: ${data.vehicle}\nOd: ${data.start_date}\nDo: ${data.end_date}\nStatus: ${data.status}`);
            })
            .catch(error => console.error("Błąd pobierania szczegółów rezerwacji:", error));
    }

    fetchBookings();
});
</script>
=== App/Views/bookings/create.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Tworzenie Nowej Rezerwacji
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi dokonanie nowej rezerwacji pojazdu.
| Sprawdza dostępność pojazdów i umożliwia wybór metody płatności.
|
| Ścieżka: App/Views/bookings/create.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne sprawdzanie dostępności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pojazdów, dostępność, rezerwacje)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego sprawdzania dostępności)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Nowa Rezerwacja</h1>

<div class="bookings-create-container">
    <form id="bookingForm">
        <?= csrf_field() ?>

        <!-- Wybór pojazdu -->
        <div class="mb-3">
            <label for="vehicle" class="form-label">Wybierz pojazd</label>
            <select class="form-select" id="vehicle" name="vehicle" required>
                <option value="" disabled selected>Wybierz pojazd</option>
                <?php foreach ($vehicles as $vehicle): ?>
                    <option value="<?= esc($vehicle['id']) ?>"><?= esc($vehicle['name']) ?> – <?= esc($vehicle['price']) ?> PLN/dzień</option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- Wybór daty rezerwacji -->
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="start_date" class="form-label">Data rozpoczęcia</label>
                <input type="date" class="form-control" id="start_date" name="start_date" required>
            </div>
            <div class="col-md-6 mb-3">
                <label for="end_date" class="form-label">Data zakończenia</label>
                <input type="date" class="form-control" id="end_date" name="end_date" required>
            </div>
        </div>

        <!-- Metoda płatności -->
        <div class="mb-3">
            <label for="payment_method" class="form-label">Metoda płatności</label>
            <select class="form-select" id="payment_method" name="payment_method" required>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>

        <button type="submit" class="btn btn-primary w-100">Zarezerwuj</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const bookingForm = document.getElementById("bookingForm");
    const responseMessage = document.getElementById("responseMessage");
    const vehicleSelect = document.getElementById("vehicle");

    // Sprawdzanie dostępności pojazdu
    vehicleSelect.addEventListener("change", function() {
        checkAvailability(vehicleSelect.value);
    });

    bookingForm.addEventListener("submit", function(e) {
        e.preventDefault();
        if (validateForm()) {
            submitBooking(new FormData(bookingForm));
        }
    });

    function checkAvailability(vehicleId) {
        if (!vehicleId) return;
        fetch(`/api/bookings/check_availability.php?vehicle_id=${vehicleId}`)
            .then(response => response.json())
            .then(data => {
                if (!data.available) {
                    alert("Wybrany pojazd jest niedostępny w wybranym terminie.");
                    vehicleSelect.value = "";
                }
            })
            .catch(error => console.error("Błąd sprawdzania dostępności:", error));
    }

    function validateForm() {
        const startDate = document.getElementById("start_date").value;
        const endDate = document.getElementById("end_date").value;
        if (new Date(startDate) >= new Date(endDate)) {
            alert("Data zakończenia musi być późniejsza niż data rozpoczęcia.");
            return false;
        }
        return true;
    }

    function submitBooking(formData) {
        fetch("/api/bookings/create.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Rezerwacja została pomyślnie dokonana!";
                setTimeout(() => window.location.href = "/dashboard", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd rezerwacji:", error);
        });
    }
});
</script>
=== App/Views/error.php ===
/*
|--------------------------------------------------------------------------
| Strona Błędów - Obsługa 404, 500 i innych problemów
|--------------------------------------------------------------------------
| Strona wyświetla kreatywny komunikat błędu z tłem przedstawiającym
| autobus komunikacji miejskiej. Obsługuje różne kody błędów.
|
| Ścieżka: App/Views/error.php
*/

<?php


// Pobranie kodu błędu, jeśli nie przekazano, ustaw na 404
$errorCode = isset($_GET['code']) ? intval($_GET['code']) : 404;

// Lista domyślnych komunikatów dla kodów błędów
$errorMessages = [
    403 => "Nie masz uprawnień do tej strony. Może jednak lepiej zostać pasażerem?",
    404 => "Nie udało nam się odnaleźć tej strony. Może została zabrana na pętlę?",
    500 => "Coś poszło nie tak po naszej stronie. Pracujemy nad tym jak kierowca przy zmianie trasy.",
    503 => "System chwilowo niedostępny. Autobus wróci do trasy niebawem!",
];

// Pobranie komunikatu lub ustawienie domyślnego
$errorMessage = $errorMessages[$errorCode] ?? "Wystąpił nieznany błąd. Może to znak, by zrobić sobie przerwę? ☕";
?>

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zamiast jazdy mamy zjazd</title>
    <link rel="stylesheet" href="/css/main.min.css">
    <style>
        body {
            background: url('/images/bus-error.jpg') no-repeat center center fixed;
            background-size: cover;
            text-align: center;
            color: white;
            font-family: Arial, sans-serif;
        }
        .error-container {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.7);
            padding: 30px;
            border-radius: 10px;
            max-width: 600px;
            width: 90%;
        }
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        p {
            font-size: 1.2rem;
            margin-bottom: 20px;
        }
        .error-code {
            font-size: 1rem;
            color: #ffcc00;
        }
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background: #ffcc00;
            color: black;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
        }
        .btn:hover {
            background: #e6b800;
        }
    </style>
</head>
<body>

<div class="error-container">
    <h1>Zamiast jazdy mamy zjazd.</h1>
    <p><?= $errorMessage ?></p>
    <p class="error-code">Kod błędu: <?= $errorCode ?></p>
    <a href="/" class="btn">Powrót na stronę główną</a>
</div>

</body>
</html>
=== App/Views/documents/signing_page.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Podpisywanie Dokumentów
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi podpisywanie dokumentów online.
| Podpisane dokumenty są przechowywane w systemie.
|
| Ścieżka: App/Views/documents/signing_page.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, podpis elektroniczny)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane dokumentów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (Canvas API do podpisywania dokumentów)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Podpisywanie Dokumentów</h1>

<div class="documents-sign-container">
    <h3 class="mt-4">Dokumenty do Podpisania</h3>
    <ul id="signDocumentList" class="list-group">
        <!-- Dokumenty ładowane dynamicznie -->
    </ul>

    <!-- Podgląd dokumentu i podpis elektroniczny -->
    <div id="signingArea" class="mt-4" style="display:none;">
        <h4>Podpisz Dokument</h4>
        <iframe id="documentPreview" style="width:100%; height:400px; border:1px solid #ccc;"></iframe>
        
        <canvas id="signaturePad" class="border mt-3" style="width:100%; height:200px;"></canvas>
        <button class="btn btn-secondary mt-2" onclick="clearSignature()">Wyczyść</button>
        <button class="btn btn-primary mt-2" onclick="submitSignature()">Podpisz</button>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    function loadSignDocuments() {
        fetch("/api/user/get_signable_documents.php")
            .then(response => response.json())
            .then(data => {
                const documentList = document.getElementById("signDocumentList");
                documentList.innerHTML = "";

                if (data.length > 0) {
                    data.forEach(doc => {
                        documentList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${doc.name}</span>
                                <button class="btn btn-sm btn-success" onclick="openSigning('${doc.file_url}', ${doc.id})">Podpisz</button>
                            </li>
                        `;
                    });
                } else {
                    documentList.innerHTML = `<li class="list-group-item text-muted">Brak dokumentów do podpisania</li>`;
                }
            })
            .catch(error => {
                console.error("Błąd ładowania dokumentów:", error);
                alert("Błąd ładowania dokumentów.");
            });
    }

    function openSigning(fileUrl, documentId) {
        document.getElementById("signingArea").style.display = "block";
        document.getElementById("documentPreview").src = fileUrl;
        document.getElementById("signaturePad").dataset.documentId = documentId;
    }

    function clearSignature() {
        const canvas = document.getElementById("signaturePad");
        const ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    function submitSignature() {
        const canvas = document.getElementById("signaturePad");
        const signature = canvas.toDataURL();
        const documentId = canvas.dataset.documentId;

        fetch("/api/user/sign_document.php", {
            method: "POST",
            body: JSON.stringify({ documentId, signature }),
            headers: { "Content-Type": "application/json" }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Dokument został podpisany!");
                loadSignDocuments();
                document.getElementById("signingArea").style.display = "none";
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => {
            console.error("Błąd podpisywania dokumentu:", error);
            alert("Błąd podpisywania dokumentu.");
        });
    }

    loadSignDocuments();
});
</script>
=== App/Views/documents/user_documents.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Dokumenty Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie dokumentów, ich przesyłanie
| oraz usuwanie. Pliki mogą być np. umowami, fakturami czy dokumentami tożsamości.
|
| Ścieżka: App/Views/documents/user_documents.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, przesyłanie, usuwanie)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane dokumentów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania i usuwania plików)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Moje Dokumenty</h1>

<div class="documents-container">
    <!-- Przesyłanie nowego dokumentu -->
    <form id="uploadDocumentForm" enctype="multipart/form-data" class="mb-4">
        <?= csrf_field() ?>
        <div class="mb-3">
            <label for="document" class="form-label">Prześlij dokument (PDF, JPG, PNG)</label>
            <input type="file" class="form-control" id="document" name="document" accept=".pdf, .jpg, .jpeg, .png" required>
        </div>
        <button type="submit" class="btn btn-success">Prześlij</button>
    </form>

    <!-- Lista dokumentów -->
    <h3 class="mt-4">Twoje Dokumenty</h3>
    <ul id="documentList" class="list-group">
        <!-- Dokumenty ładowane dynamicznie -->
    </ul>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const uploadForm = document.getElementById("uploadDocumentForm");

    uploadForm.addEventListener("submit", function(e) {
        e.preventDefault();
        const fileInput = document.getElementById("document");
        const file = fileInput.files[0];
        if (file && (file.type === "application/pdf" || file.type.startsWith("image/"))) {
            uploadDocument(new FormData(uploadForm));
        } else {
            alert("Nieprawidłowy typ pliku. Dozwolone formaty: PDF, JPG, PNG.");
        }
    });

    function loadDocuments() {
        fetch("/api/user/get_documents.php")
            .then(response => response.json())
            .then(data => {
                const documentList = document.getElementById("documentList");
                documentList.innerHTML = "";

                if (data.length > 0) {
                    data.forEach(doc => {
                        documentList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <a href="${doc.file_url}" target="_blank">${doc.name}</a>
                                <button class="btn btn-sm btn-danger" onclick="deleteDocument(${doc.id})">Usuń</button>
                            </li>
                        `;
                    });
                } else {
                    documentList.innerHTML = `<li class="list-group-item text-muted">Brak dokumentów</li>`;
                }
            })
            .catch(error => {
                console.error("Błąd ładowania dokumentów:", error);
                alert("Błąd ładowania dokumentów.");
            });
    }

    function uploadDocument(formData) {
        fetch("/api/user/upload_document.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Dokument przesłany pomyślnie!");
                loadDocuments();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => {
            console.error("Błąd przesyłania dokumentu:", error);
            alert("Błąd przesyłania dokumentu.");
        });
    }

    function deleteDocument(documentId) {
        if (!confirm("Czy na pewno chcesz usunąć ten dokument?")) return;

        fetch(`/api/user/delete_document.php?id=${documentId}`, { method: "POST" })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Dokument usunięty!");
                loadDocuments();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => {
            console.error("Błąd usuwania dokumentu:", error);
            alert("Błąd usuwania dokumentu.");
        });
    }

    loadDocuments();
});
</script>
=== App/Views/landing.php ===
<?php
/*
|--------------------------------------------------------------------------
| Strona Główna CarFuse
|--------------------------------------------------------------------------
| Ten plik zawiera główną stronę serwisu CarFuse. 
| Zawiera sekcję wyszukiwania pojazdów i kluczowe cechy platformy.
|
| Ścieżka: App/Views/landing.php
|
| Technologie:
| - PHP 8+ (backend)
| - HTML, CSS (interfejs)
| - JavaScript (dynamiczna walidacja formularza)
*/


require_once BASE_PATH . '/bootstrap.php'; // Ensure the bootstrap file is included
require_once BASE_PATH . '/config/routes.php'; // Load FastRoute routes
require_once BASE_PATH . '/App/Helpers/SecurityHelper.php'; // Load security helpers
require_once BASE_PATH . '/App/Services/NotificationService.php'; // Load notification services
require_once BASE_PATH . '/App/Services/Validator.php'; // Load validation services

// Debugging output for FastRoute
error_reporting(E_ALL);
ini_set('display_errors', 1);

$dispatcher = require BASE_PATH . '/config/routes.php';

$httpMethod = $_SERVER['REQUEST_METHOD'];
$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
$uri = rtrim($uri, '/');

$routeInfo = $dispatcher->dispatch($httpMethod, $uri);

switch ($routeInfo[0]) {
    case FastRoute\Dispatcher::NOT_FOUND:
        http_response_code(404);
        echo json_encode(["error" => "404 Not Found - Route Not Found"]);
        exit;

    case FastRoute\Dispatcher::METHOD_NOT_ALLOWED:
        http_response_code(405);
        echo json_encode(["error" => "405 Method Not Allowed"]);
        exit;

    case FastRoute\Dispatcher::FOUND:
        [$controller, $method] = $routeInfo[1];
        $vars = $routeInfo[2];

        if (!class_exists($controller) || !method_exists($controller, $method)) {
            http_response_code(500);
            echo json_encode(["error" => "500 Internal Server Error - Invalid Route Handler"]);
            exit;
        }

        $controllerInstance = new $controller();
        call_user_func_array([$controllerInstance, $method], $vars);
        exit;
}

require_once BASE_PATH . 'App/Views/layouts/header.php';
?>

<style>
    /* Main CSS integrated directly */
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        color: #333;
        margin: 0;
        padding: 0;
    }
    button, input[type="submit"] {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }
    button:hover, input[type="submit"]:hover {
        background-color: #0056b3;
    }
    button:focus, input[type="submit"]:focus {
        outline: 2px solid #ffcc00;
    }
    .hero, .features, .cta {
        text-align: center;
        padding: 20px;
    }
    .feature-box {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 5px;
        margin: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .cta {
        background-color: #28a745;
        color: white;
        padding: 20px;
        border-radius: 5px;
    }
    @media (max-width: 768px) {
        body {
            font-size: 14px;
        }
    }
</style>

<script src="/js/landing.js" defer></script>

<section class="hero">
    <div class="container text-center">
        <h1>🚗 Znajdź idealne auto na swoją podróż</h1>
        <p>Elastyczny wynajem, najlepsze ceny i wsparcie 24/7.</p>
        
        <form class="search-form" action="/search" method="GET" onsubmit="return validateDates();">
            <input type="text" name="location" placeholder="Wpisz lokalizację odbioru" required>
            <input type="date" id="pickup_date" name="pickup_date" required>
            <input type="date" id="return_date" name="return_date" required>
            <button type="submit" class="btn btn-primary">Szukaj aut</button>
        </form>

        <p id="dateError" class="text-danger mt-2" style="display:none;">Data zwrotu nie może być wcześniejsza niż odbioru.</p>
    </div>
</section>

<section class="features text-center">
    <h2>Dlaczego warto wybrać CarFuse?</h2>
    <div class="row justify-content-center">
        <div class="col-md-3 feature-box">
            <h4>🚗 Szeroki wybór pojazdów</h4>
            <p>Wybierz spośród różnych kategorii aut – od ekonomicznych po luksusowe.</p>
        </div>
        <div class="col-md-3 feature-box">
            <h4>💰 Najlepsze ceny</h4>
            <p>Zawsze konkurencyjne ceny i wyjątkowe promocje dla stałych klientów.</p>
        </div>
        <div class="col-md-3 feature-box">
            <h4>📞 Wsparcie 24/7</h4>
            <p>Nasz zespół jest dostępny całą dobę, aby pomóc Ci w każdej sytuacji.</p>
        </div>
    </div>
</section>

<section class="cta text-center">
    <h2>Zarezerwuj swoje auto już dziś!</h2>
    <p>Najlepsze oferty dostępne w kilku kliknięciach.</p>
    <a href="/search" class="btn btn-success btn-lg">Sprawdź dostępność</a>
</section>

<?php require_once __DIR__ . '/layouts/footer.php'; ?>
