=== App/Helpers/ViewHelper.php ===
<?php

function view($viewName, $data = [])
{
    $viewPath = BASE_PATH . "/App/Views/{$viewName}.php";

    if (!file_exists($viewPath)) {
        die("❌ View not found: {$viewName}");
    }

    extract($data); // Extract data for use inside views
    require $viewPath;
}
=== App/Helpers/SecurityHelper.php ===
<?php

namespace App\Helpers;

use Psr\Log\LoggerInterface;
use Firebase\JWT\JWT;

class SecurityHelper
{
    // Security Configuration
    const SESSION_CONFIG = [
        'use_only_cookies'        => 1,
        'use_strict_mode'         => 1,
        'cookie_httponly'         => 1,
        'cookie_samesite'         => 'Lax',
        'gc_maxlifetime'          => 3600,
        'cookie_lifetime'         => 0,
        'use_trans_sid'           => 0,
        'sid_bits_per_character'  => 6
    ];

    // Standardized Logging Function
    public static function securityLog(LoggerInterface $logger, $message, $level = 'info', $category = 'Security')
    {
        if ($logger && method_exists($logger, 'log')) {
            $logger->log($level, "[$category] $message");
        } else {
            error_log("[$category][$level] $message");
        }
    }

    // Log authentication events
    public static function logAuthEvent($message, $level = 'info')
    {
        self::securityLog(null, $message, $level, 'Auth');
    }

    // Helper to log authentication failures
    public static function logAuthFailure($message)
    {
        self::securityLog(null, $message, 'error', 'Auth');
    }

    // Secure Session Handling using native PHP sessions
    public static function startSecureSession()
    {
        if (session_status() === PHP_SESSION_NONE) {
            ini_set('session.use_only_cookies', 1);
            ini_set('session.use_strict_mode', 1);
            ini_set('session.cookie_httponly', 1);
            ini_set('session.cookie_samesite', 'Lax');
            session_start();
        }
        return true;
    }

    // Refresh session to extend its duration
    public static function refreshSession()
    {
        $logFile = __DIR__ . '/../../logs/security.log';
        $timestamp = date('Y-m-d H:i:s');

        try {
            if (session_status() === PHP_SESSION_ACTIVE) {
                $_SESSION['last_activity'] = time();
                session_regenerate_id(true);
                error_log("[$timestamp][info] Session refreshed\n", 3, $logFile);
            }
        } catch (Exception $e) {
            error_log("[$timestamp][error] Session refresh failed: " . $e->getMessage() . "\n", 3, $logFile);
        }
    }

    // Replace Laravel session calls with native PHP for session expiry enforcement
    public static function enforceSessionExpiry(LoggerInterface $logger)
    {
        if (!isset($_SESSION['last_activity'])) {
            $_SESSION['last_activity'] = time();
            return;
        }
        if (time() - $_SESSION['last_activity'] > 1800) { // 30 min timeout
            self::securityLog($logger, 'Session expired due to inactivity', 'info');
            $_SESSION = [];
            if (ini_get('session.use_cookies')) {
                setcookie(session_name(), '', time() - 42000, '/');
            }
            session_destroy();
        }
    }

    // Fingerprint-Based Session Integrity Check
    public static function validateSessionIntegrity(LoggerInterface $logger)
    {
        $currentIp = hash('sha256', $_SERVER['REMOTE_ADDR']);
        $currentAgent = hash('sha256', $_SERVER['HTTP_USER_AGENT']);

        if (!isset($_SESSION['client_ip'])) {
            $_SESSION['client_ip'] = $currentIp;
            $_SESSION['user_agent'] = $currentAgent;
            return true;
        }
        if ($_SESSION['client_ip'] !== $currentIp || $_SESSION['user_agent'] !== $currentAgent) {
            self::securityLog($logger, 'Session integrity check failed: Mismatch detected', 'warning');
            $_SESSION = [];
            if (ini_get('session.use_cookies')) {
                setcookie(session_name(), '', time() - 42000, '/');
            }
            session_destroy();
            return false;
        }
        return true;
    }

    // Sanitize user input to prevent XSS
    public static function sanitizeInput($data)
    {
        if (!isset($data) || $data === null) {
            $data = ''; // Default to empty string to prevent undefined variable errors
        }
        $cleanedData = trim((string)$data);
        return htmlspecialchars($cleanedData, ENT_QUOTES, 'UTF-8');
    }

    // Generate secure random string (for password resets, API keys, etc.)
    public static function generateSecureToken($length = 64)
    {
        return bin2hex(random_bytes($length / 2));
    }

    // Secure Session Destruction using native PHP
    public static function destroySession(LoggerInterface $logger)
    {
        self::securityLog($logger, 'Destroying session', 'info');
        $_SESSION = [];
        if (ini_get('session.use_cookies')) {
            setcookie(session_name(), '', time() - 42000, '/');
        }
        session_destroy();
        self::securityLog($logger, 'Session destroyed successfully', 'info');
    }

    // Check if a user is logged in
    public static function isUserLoggedIn()
    {
        return isset($_SESSION['user_id']);
    }

    // Get the logged-in user's role
    public static function getUserRole()
    {
        return isset($_SESSION['user_id']) ? ($_SESSION['user_role'] ?? 'guest') : 'guest';
    }

    // Get session data safely
    public static function getSessionData($key)
    {
        return $_SESSION[$key] ?? null;
    }

    // Set session data safely
    public static function setSessionData($key, $value)
    {
        $_SESSION[$key] = $value;
    }

    // Validate JWT token
    public static function validateJWT($token)
    {
        // Replace Laravel's authentication with a native JWT approach or session check.
        // For example, decode using firebase/php-jwt, here we simply check session.
        return $_SESSION['user_id'] ?? null;
    }

    // Enforce authentication for protected pages
    public static function requireUserAuth()
    {
        return self::requireAuth();
    }

    // Custom Authentication Enforcement
    public static function requireAuth($allowGuest = false)
    {
        if (isset($_SESSION['user_id'])) {
            return $_SESSION['user_id'];
        }
        if ($allowGuest) {
            return null;
        }
        header('Content-Type: application/json');
        http_response_code(401);
        echo json_encode(['error' => 'Unauthorized']);
        exit;
    }

    // CSRF Token Generation
    public static function generateCsrfToken()
    {
        if (!isset($_SESSION['csrf_token'])) {
            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
        }
        return $_SESSION['csrf_token'];
    }

    // Validate CSRF token in POST requests
    public static function validateCsrfToken($token)
    {
        return isset($_SESSION['csrf_token']) && $_SESSION['csrf_token'] === $token;
    }

    // Return structured JSON response
    public static function jsonResponse($data, $statusCode = 200)
    {
        header('Content-Type: application/json');
        http_response_code($statusCode);
        echo json_encode($data);
        exit;
    }
}

// Initialize secure session when the file is included
if (!SecurityHelper::startSecureSession()) {
    SecurityHelper::securityLog(null, 'Critical: Failed to initialize secure session', 'critical');
}
?>
=== App/Helpers/ExceptionHandler.php ===
<?php
namespace App\Helpers;

use PDOException;
use Exception;
use InvalidArgumentException;
use Psr\Log\LoggerInterface;

class ExceptionHandler
{
    private LoggerInterface $dbLogger;
    private LoggerInterface $authLogger;
    private LoggerInterface $systemLogger;

    public function __construct(
        LoggerInterface $dbLogger,
        LoggerInterface $authLogger,
        LoggerInterface $systemLogger
    ) {
        $this->dbLogger = $dbLogger;
        $this->authLogger = $authLogger;
        $this->systemLogger = $systemLogger;
    }

    /**
     * Handle exceptions centrally with consistent logging and JSON responses.
     */
    public function handleException(Exception $e): void
    {
        // Extract status code if available or use default
        $statusCode = method_exists($e, 'getCode') && is_numeric($e->getCode()) && $e->getCode() >= 400 && $e->getCode() < 600 
            ? $e->getCode() 
            : 500;
            
        // Database-related exceptions
        if ($e instanceof PDOException) {
            $errorCode = $e->getCode();
            $this->dbLogger->error("❌ Database Error: " . $e->getMessage(), [
                'code' => $errorCode,
                'trace' => $e->getTraceAsString(),
                'file' => $e->getFile(),
                'line' => $e->getLine()
            ]);
            
            // Handle specific database errors
            if ($errorCode == '23000') { // Integrity constraint violation
                ApiHelper::sendJsonResponse('error', 'Duplicate entry or constraint violation', ['error' => $this->sanitizeErrorMessage($e->getMessage())], 400);
            } elseif ($errorCode == '42S02') { // Table not found
                ApiHelper::sendJsonResponse('error', 'Database table error', ['error' => 'Requested table not found'], 500);
            } else {
                ApiHelper::sendJsonResponse('error', 'Database error', ['error' => $this->sanitizeErrorMessage($e->getMessage())], 500);
            }
        }
        // Validation exceptions
        elseif ($e instanceof InvalidArgumentException) {
            $this->systemLogger->warning("⚠️ Validation Error: " . $e->getMessage());
            ApiHelper::sendJsonResponse('error', 'Validation error', ['errors' => json_decode($e->getMessage(), true) ?? ['validation' => $e->getMessage()]], 400);
        }
        // Authentication exceptions - We'll uncomment and implement when needed
        elseif (strpos($e->getMessage(), 'Invalid credentials') !== false || strpos($e->getMessage(), 'Unauthorized') !== false) {
            $this->authLogger->error("🔒 Authentication Error: " . $e->getMessage(), [
                'trace' => $e->getTraceAsString(),
                'file' => $e->getFile(),
                'line' => $e->getLine()
            ]);
            ApiHelper::sendJsonResponse('error', 'Authentication error', ['error' => $e->getMessage()], 401);
        }
        // Other exceptions
        else {
            $this->systemLogger->error("❌ System Error: " . $e->getMessage(), [
                'code' => $e->getCode(),
                'trace' => $e->getTraceAsString(),
                'file' => $e->getFile(),
                'line' => $e->getLine()
            ]);
            
            // Use provided status code or default to 500
            ApiHelper::sendJsonResponse(
                'error', 
                'Unexpected error occurred', 
                ['error' => $this->sanitizeErrorMessage($e->getMessage())], 
                $statusCode
            );
        }
        exit();
    }
    
    /**
     * Sanitize error messages to remove sensitive information
     */
    private function sanitizeErrorMessage(string $message): string
    {
        // Remove potentially sensitive information (like SQL queries, passwords, etc)
        $message = preg_replace('/password\s*=\s*[^\s,)]+/i', 'password=*****', $message);
        
        // For production, you might want to return generic messages instead of actual DB errors
        if (getenv('APP_ENV') === 'production') {
            if (strpos($message, 'SQL') !== false) {
                return 'A database error occurred';
            }
        }
        
        return $message;
    }
}
?>=== App/Helpers/ApiHelper.php ===
<?php

namespace App\Helpers;

/**
 * API Helper Functions
 */
class ApiHelper
{
    /**
     * ✅ Log API Events for Debugging
     */
    public static function logApiEvent($message)
    {
        $timestamp = date('Y-m-d H:i:s');
        $logFile = __DIR__ . '/../../logs/api.log';
        file_put_contents($logFile, "{$timestamp} - {$message}\n", FILE_APPEND);
    }

    /**
     * ✅ Standardized JSON Response Function
     */
    public static function sendJsonResponse($status, $message, $data = [], $httpCode = 200)
    {
        http_response_code($httpCode);
        header('Content-Type: application/json');
        echo json_encode(['status' => $status, 'message' => $message, 'data' => $data]);
        exit();
    }

    /**
     * ✅ Extract JWT from Authorization Header or Cookie
     */
    public static function getJWT()
    {
        $headers = getallheaders();
        if (isset($headers['Authorization']) && preg_match('/Bearer\s(\S+)/', $headers['Authorization'], $matches)) {
            return $matches[1];
        }
        return $_COOKIE['jwt'] ?? null;
    }
}
=== App/Helpers/SetupHelper.php ===
<?php

namespace App\Helpers;

use Psr\Log\LoggerInterface;
use App\Helpers\DatabaseHelper;

/**
 * Helper class to setup and verify the application environment
 */
class SetupHelper
{
    private $pdo;
    private LoggerInterface $logger;
    
    public function __construct(DatabaseHelper $dbHelper, LoggerInterface $logger)
    {
        $this->pdo = $dbHelper->getPdo();
        $this->logger = $logger;
    }
    
    /**
     * Add required indexes to database tables if they don't exist
     */
    public function ensureIndexes(): void
    {
        try {
            // Check for email index on users table
            $stmt = $this->pdo->prepare("
                SELECT COUNT(*) as count
                FROM information_schema.statistics
                WHERE table_schema = DATABASE()
                AND table_name = 'users'
                AND index_name = 'idx_users_email'
            ");
            $stmt->execute();
            $result = $stmt->fetch();
            
            if ($result['count'] == 0) {
                $this->logger->info("Creating index on users.email");
                $this->pdo->exec("CREATE INDEX idx_users_email ON users(email)");
            }
            
            // Check for other important indexes
            $this->logger->info("Database indexes verified");
        } catch (\Exception $e) {
            $this->logger->error("Failed to ensure indexes: " . $e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Verify that the application is running in a secure environment
     */
    public function verifySecureEnvironment(): array
    {
        $issues = [];
        
        // Check if we're running over HTTPS
        $isSecure = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') 
                  || (isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443);
                  
        if (!$isSecure) {
            $issues[] = "Application is not running over HTTPS. This is insecure for production.";
            $this->logger->warning("Security warning: Not running over HTTPS");
        }
        
        // Check PHP version
        if (version_compare(PHP_VERSION, '7.4.0', '<')) {
            $issues[] = "PHP version is below 7.4. Please upgrade for security.";
            $this->logger->warning("Security warning: PHP version below 7.4", ['version' => PHP_VERSION]);
        }
        
        // Return issues found
        return $issues;
    }
}
=== App/Helpers/DatabaseHelper.php ===
<?php

namespace App\Helpers;

use PDO;
use Exception;
use Psr\Log\LoggerInterface;
use App\Helpers\ApiHelper;

class DatabaseHelper
{
    protected static ?DatabaseHelper $instance = null;
    protected static ?DatabaseHelper $secureInstance = null;
    private PDO $pdo;
    private static LoggerInterface $logger;

    private function __construct(array $config)
    {
        try {
            $dsn = "mysql:host={$config['host']};dbname={$config['database']};charset={$config['charset']}";
            $this->pdo = new PDO($dsn, $config['username'], $config['password'], [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false,
            ]);

            self::$logger->info("✅ Database connection initialized successfully.");
        } catch (Exception $e) {
            self::$logger->critical("❌ Database connection failed: " . $e->getMessage());
            die("Database connection failed. Check logs for details.");
        }
    }

    public static function setLogger(LoggerInterface $logger)
    {
        if (!isset(self::$logger)) {
            self::$logger = $logger;
        }
    }

    private static function getDatabaseConfig(string $type = 'default'): array
    {
        $config = require __DIR__ . '/../../config/database.php';
    
        if (!isset($config['secure_database']) || !isset($config['app_database'])) {
            throw new Exception("Database configuration is missing required keys.");
        }
    
        return $type === 'secure' ? $config['secure_database'] : $config['app_database'];
    }
    
    public static function getInstance(): DatabaseHelper
    {
        if (self::$instance === null) {
            if (!isset(self::$logger)) {
                throw new Exception("Logger must be set before initializing the database.");
            }
            try {
                $dbConfig = self::getDatabaseConfig('default');
                self::$instance = new DatabaseHelper($dbConfig);
                self::$logger->info("✅ Application database initialized successfully.");
            } catch (Exception $e) {
                self::$logger->critical("❌ Application database initialization failed: " . $e->getMessage());
                die("Application database initialization failed.");
            }
        }
    
        return self::$instance;
    }
    
    public static function getSecureInstance(): DatabaseHelper
    {
        if (self::$secureInstance === null) {
            if (!isset(self::$logger)) {
                throw new Exception("Logger must be set before initializing the database.");
            }
            try {
                $dbConfig = self::getDatabaseConfig('secure');
                self::$secureInstance = new DatabaseHelper($dbConfig);
                self::$logger->info("✅ Secure database initialized successfully.");
            } catch (Exception $e) {
                self::$logger->critical("❌ Secure database initialization failed: " . $e->getMessage());
                die("Secure database initialization failed.");
            }
        }
    
        return self::$secureInstance;
    }

    public static function getAppInstance(): ?DatabaseHelper
    {
        return self::$instance;
    }

    public static function getSecureDbInstance(): ?DatabaseHelper
    {
        return self::$secureInstance;
    }
    
    public function getPdo(): PDO
    {
        return $this->pdo;
    }

    public function getConnection()
    {
        try {
            return $this->pdo;
        } catch (Exception $e) {
            if (self::$logger) {
                self::$logger->error("❌ Failed to get database connection: " . $e->getMessage());
            }
            return null;
        }
    }

    /**
     * Execute a database query safely with comprehensive logging and error handling
     * 
     * @param callable $query Function containing the query to execute
     * @param string $queryDescription Description of the query for logging
     * @param bool $useSecureDb Whether to use the secure database
     * @param array $context Additional context information for logging
     * @return mixed Query result or error response
     */
    public static function safeQuery(
        callable $query, 
        string $queryDescription = 'Database Query', 
        bool $useSecureDb = false,
        array $context = []
    ) {
        $startTime = microtime(true);
        $dbInstance = $useSecureDb ? self::getSecureInstance() : self::getInstance();
        $dbType = $useSecureDb ? "secure" : "application";
        
        try {
            // Get database name for logging
            $databaseName = $dbInstance->getPdo()->query("SELECT DATABASE()")->fetchColumn();
            
            // Log query execution start with sanitized parameters
            $logContext = array_merge($context, [
                'database' => $databaseName,
                'database_type' => $dbType,
                'timestamp_start' => date('Y-m-d H:i:s.u'),
            ]);
            
            // Sanitize any sensitive data in context
            $sanitizedContext = self::sanitizeLogContext($logContext);
            self::$logger->info("🔍 Executing {$queryDescription} on {$dbType} database: {$databaseName}", $sanitizedContext);
            
            // Execute the query
            $result = $query($dbInstance->getPdo());
            
            // Calculate execution time
            $executionTime = round((microtime(true) - $startTime) * 1000, 2);
            
            // Log successful query completion
            self::$logger->info("✅ {$queryDescription} completed successfully", [
                'database' => $databaseName,
                'execution_time_ms' => $executionTime,
                'database_type' => $dbType,
                'timestamp_end' => date('Y-m-d H:i:s.u'),
            ]);
            
            return $result;
            
        } catch (\PDOException $e) {
            $executionTime = round((microtime(true) - $startTime) * 1000, 2);
            $errorCode = $e->getCode();
            
            // Log detailed error information
            self::$logger->error("❌ {$queryDescription} failed with PDO error {$errorCode}", [
                'error_message' => $e->getMessage(),
                'database_type' => $dbType,
                'execution_time_ms' => $executionTime,
                'error_code' => $errorCode,
                'trace' => $e->getTraceAsString(),
                'context' => $sanitizedContext ?? [],
            ]);
            
            // Return appropriate error responses based on error type
            if ($errorCode == "23000") {
                return ApiHelper::sendJsonResponse('error', 'Database constraint violation: Duplicate or invalid data', [], 400);
            } elseif ($errorCode == "42S02") {
                return ApiHelper::sendJsonResponse('error', 'Table not found error', [], 500);
            } elseif ($errorCode == "42000") {
                return ApiHelper::sendJsonResponse('error', 'SQL syntax error', [], 500);
            } else {
                return ApiHelper::sendJsonResponse('error', 'Database query failed: ' . self::getSafeErrorMessage($e->getMessage()), [], 500);
            }
            
        } catch (\Exception $e) {
            $executionTime = round((microtime(true) - $startTime) * 1000, 2);
            
            // Log general exceptions
            self::$logger->error("❌ {$queryDescription} failed with exception", [
                'error_message' => $e->getMessage(),
                'database_type' => $dbType,
                'execution_time_ms' => $executionTime,
                'trace' => $e->getTraceAsString(),
                'context' => $sanitizedContext ?? [],
            ]);
            
            return ApiHelper::sendJsonResponse('error', 'Database operation failed: ' . self::getSafeErrorMessage($e->getMessage()), [], 500);
        }
    }

    /**
     * Sanitize log context to remove sensitive data
     */
    private static function sanitizeLogContext(array $context): array
    {
        $sensitiveKeys = ['password', 'token', 'secret', 'credit_card', 'card_number', 'cvv'];
        
        foreach ($context as $key => $value) {
            if (is_array($value)) {
                $context[$key] = self::sanitizeLogContext($value);
            } elseif (is_string($value) && self::containsSensitiveData($key, $sensitiveKeys)) {
                $context[$key] = '***REDACTED***';
            }
        }
        
        return $context;
    }
    
    /**
     * Check if a key contains sensitive data
     */
    private static function containsSensitiveData(string $key, array $sensitiveKeys): bool
    {
        $key = strtolower($key);
        foreach ($sensitiveKeys as $sensitiveKey) {
            if (strpos($key, $sensitiveKey) !== false) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * Get a safe error message that doesn't expose sensitive information
     */
    private static function getSafeErrorMessage(string $originalMessage): string
    {
        // Remove potentially sensitive details from error messages
        $safeMessage = preg_replace('/SQLSTATE\[\w+\]: .+?: /', '', $originalMessage);
        $safeMessage = preg_replace('/near \'(.+?)\'/', 'near [SQL]', $safeMessage);
        
        return $safeMessage;
    }

    /**
     * Insert data into a table
     * 
     * @param string $table Table name
     * @param array $data Data to insert (column => value)
     * @param bool $useSecureDb Whether to use the secure database
     * @param array $context Additional context information for logging
     * @return string|mixed Last insert ID or error response
     */
    public static function insert(
        string $table, 
        array $data, 
        bool $useSecureDb = false,
        array $context = []
    ): string {
        $queryContext = array_merge($context, [
            'operation' => 'INSERT',
            'table' => $table,
            'field_count' => count($data),
        ]);
        
        return self::safeQuery(function ($pdo) use ($table, $data) {
            $columns = implode(", ", array_keys($data));
            $placeholders = implode(", ", array_fill(0, count($data), "?"));
            $sql = "INSERT INTO {$table} ({$columns}) VALUES ({$placeholders})";
            
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array_values($data));
            $lastInsertId = $pdo->lastInsertId();
            
            return $lastInsertId;
        }, "Insert into {$table}", $useSecureDb, $queryContext);
    }

    /**
     * Update data in a table
     * 
     * @param string $table Table name
     * @param array $data Data to update (column => value)
     * @param array $where Where conditions (column => value)
     * @param bool $useSecureDb Whether to use the secure database 
     * @param array $context Additional context information for logging
     * @return int|mixed Number of affected rows or error response
     */
    public static function update(
        string $table, 
        array $data, 
        array $where, 
        bool $useSecureDb = false,
        array $context = []
    ): int {
        $queryContext = array_merge($context, [
            'operation' => 'UPDATE',
            'table' => $table,
            'field_count' => count($data),
            'condition_count' => count($where),
        ]);
        
        return self::safeQuery(function ($pdo) use ($table, $data, $where) {
            $set = implode(", ", array_map(fn($key) => "{$key} = ?", array_keys($data)));
            $whereClause = implode(" AND ", array_map(fn($key) => "{$key} = ?", array_keys($where)));
            $sql = "UPDATE {$table} SET {$set} WHERE {$whereClause}";
            
            $stmt = $pdo->prepare($sql);
            $params = array_merge(array_values($data), array_values($where));
            $stmt->execute($params);
            $rowCount = $stmt->rowCount();
            
            // Log affected rows count
            self::$logger->info("Updated {$rowCount} rows in table {$table}");
            
            return $rowCount;
        }, "Update {$table}", $useSecureDb, $queryContext);
    }

    /**
     * Delete data from a table
     * 
     * @param string $table Table name
     * @param array $where Where conditions (column => value)
     * @param bool $softDelete Whether to perform a soft delete
     * @param bool $useSecureDb Whether to use the secure database
     * @param array $context Additional context information for logging
     * @return int|mixed Number of affected rows or error response
     */
    public static function delete(
        string $table, 
        array $where, 
        bool $softDelete = false, 
        bool $useSecureDb = false,
        array $context = []
    ): int {
        $operation = $softDelete ? 'SOFT_DELETE' : 'DELETE';
        $queryContext = array_merge($context, [
            'operation' => $operation,
            'table' => $table,
            'condition_count' => count($where),
        ]);
        
        return self::safeQuery(function ($pdo) use ($table, $where, $softDelete) {
            if ($softDelete) {
                $sql = "UPDATE {$table} SET deleted_at = NOW() WHERE " . implode(" AND ", array_map(fn($key) => "{$key} = ?", array_keys($where)));
            } else {
                $sql = "DELETE FROM {$table} WHERE " . implode(" AND ", array_map(fn($key) => "{$key} = ?", array_keys($where)));
            }
            
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array_values($where));
            $rowCount = $stmt->rowCount();
            
            // Log affected rows count
            self::$logger->info(($softDelete ? "Soft deleted" : "Deleted") . " {$rowCount} rows from table {$table}");
            
            return $rowCount;
        }, ($softDelete ? "Soft delete from" : "Delete from") . " {$table}", $useSecureDb, $queryContext);
    }

    /**
     * Select data from the database
     * 
     * @param string $query SQL query
     * @param array $params Query parameters
     * @param bool $useSecureDb Whether to use the secure database
     * @param array $context Additional context information for logging
     * @return array|mixed Query results or error response
     */
    public static function select(
        string $query, 
        array $params = [], 
        bool $useSecureDb = false,
        array $context = []
    ): array {
        $queryContext = array_merge($context, [
            'operation' => 'SELECT',
            'param_count' => count($params),
            'query_hash' => md5($query), // For tracking unique queries
        ]);
        
        return self::safeQuery(function ($pdo) use ($query, $params) {
            $stmt = $pdo->prepare($query);
            $stmt->execute($params);
            $results = $stmt->fetchAll();
            
            // Log result count
            self::$logger->debug("Query returned " . count($results) . " rows");
            
            return $results;
        }, "Select query", $useSecureDb, $queryContext);
    }
    
    /**
     * Execute a raw query with enhanced logging
     * 
     * @param string $query SQL query
     * @param array $params Query parameters
     * @param bool $useSecureDb Whether to use the secure database
     * @param array $context Additional context information for logging
     * @return mixed Query result or error response
     */
    public static function rawQuery(
        string $query, 
        array $params = [], 
        bool $useSecureDb = false,
        array $context = []
    ) {
        $operation = strtoupper(trim(explode(' ', $query)[0]));
        $queryContext = array_merge($context, [
            'operation' => $operation,
            'param_count' => count($params),
            'query_hash' => md5($query),
        ]);
        
        return self::safeQuery(function ($pdo) use ($query, $params, $operation) {
            $stmt = $pdo->prepare($query);
            $stmt->execute($params);
            
            if ($operation === 'SELECT') {
                $results = $stmt->fetchAll();
                return $results;
            } else {
                $rowCount = $stmt->rowCount();
                self::$logger->debug("{$operation} affected {$rowCount} rows");
                return $rowCount;
            }
        }, "{$operation} raw query", $useSecureDb, $queryContext);
    }
}
=== App/Helpers/LoggingHelper.php ===
<?php
namespace App\Helpers;

use Psr\Log\LoggerInterface;

// Ensure the global getLogger function is available
require_once __DIR__ . '/../../logger.php';

class LoggingHelper
{
    /**
     * Retrieve the default logger.
     *
     * @return LoggerInterface
     */
    public static function getDefaultLogger(): LoggerInterface
    {
        return static::getLoggerByCategory('application');
    }

    /**
     * Retrieve a logger by its category.
     *
     * @param string $category
     * @return LoggerInterface
     */
    public static function getLoggerByCategory(string $category): LoggerInterface
    {
        // Call the global getLogger() function defined in the root logger configuration.
        return \getLogger($category);
    }
}
