=== public/profile.php ===
=== public/.htaccess ===
RewriteEngine On

# Block direct execution of API PHP files and route all API requests via api.php
RewriteRule ^api/(.*)$ api.php?route=$1 [QSA,L]

# Route specific endpoints to views
RewriteRule ^(dashboard|auth/login|profile)$ views/$1.php [L]

# Prevent access to backend directories
RewriteRule ^(App/Controllers|App/Services) - [F,L]

# Allow direct access to static files and views
RewriteCond %{REQUEST_URI} ^/(css|js|images|views)/(.*)$
RewriteCond %{DOCUMENT_ROOT}/public/%1/%2 -f
RewriteRule ^(css|js|images|views)/(.*)$ /public/$1/$2 [L]

# Forward all remaining requests to FastRoute in index.php
RewriteRule ^ index.php [QSA,L]
=== public/dashboard.php ===
<?php
session_start();
if (!isset($_SESSION["user_id"])) {
    header("Location: /login");
    exit();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/css/shared.css">
</head>
<body>
    <h1>Dashboard</h1>
    <p>Welcome, <?= htmlspecialchars($_SESSION["username"] ?? "User") ?>!</p>

    <p><a href="/profile">View Profile</a></p>
    <p><a href="/logout.php">Logout</a></p>
</body>
</html>
=== public/api/views/profile.php ===
<?php
require_once __DIR__ . '/../../../App/Helpers/SecurityHelper.php';

// Log the receipt of the request
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Received API /views/profile request\n", FILE_APPEND);

// Set header for valid JSON
header("Content-Type: application/json");

// Check if user is logged in
if (!isUserLoggedIn()) {
    http_response_code(403);
    echo json_encode(["error" => "Unauthorized"]);
    file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Unauthorized access to /views/profile\n", FILE_APPEND);
    exit();
}

// Explicit success status
http_response_code(200);

// Load user profile details dynamically
$userProfile = [
    "name" => "John Doe",
    "email" => "john.doe@example.com",
    "accountStatus" => "Active"
    // ...additional profile details...
];

// Return JSON response with user profile details
echo json_encode($userProfile);

// Log completion of API handling
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - /views/profile API processed successfully\n", FILE_APPEND);
?>
=== public/api/views/dashboard.php ===
<?php
require_once __DIR__ . '/../../../App/Helpers/SecurityHelper.php';

// Log the receipt of the request
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Received API /views/dashboard request\n", FILE_APPEND);

// Set header for valid JSON
header("Content-Type: application/json");

// Check if user is logged in
if (!isUserLoggedIn()) {
    http_response_code(403);
    echo json_encode(["error" => "Unauthorized"]);
    file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Unauthorized access to /views/dashboard\n", FILE_APPEND);
    exit();
}

// Explicit success status
http_response_code(200);

// Load dashboard content dynamically
$recentBookings = [
    ["id" => 101, "user" => "John Doe", "car" => "2019 Toyota Camry", "date" => "2023-10-01"],
    ["id" => 102, "user" => "Jane Smith", "car" => "2018 Honda Accord", "date" => "2023-10-02"],
    // ...additional bookings...
];
$stats = [
    "totalUsers" => 1500,
    "totalBookings" => 300,
    // ...additional stats...
];
$notifications = [
    ["id" => 1, "message" => "Your booking has been confirmed."],
    ["id" => 2, "message" => "New car listings available."],
    // ...additional notifications...
];

// Prepare response data
$responseData = [
    "recentBookings" => $recentBookings,
    "stats" => $stats,
    "notifications" => $notifications
];

// Return JSON response with dashboard data
echo json_encode($responseData);

// Log completion of API handling
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - /views/dashboard API processed successfully\n", FILE_APPEND);
?>
=== public/api/views/vehicles.php ===
<?php
// Log the receipt of the request
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Received API /views/vehicles request\n", FILE_APPEND);

// Set header for valid JSON
header("Content-Type: application/json");

// Explicit success status
http_response_code(200);

// Load available vehicles dynamically
$vehicles = [
    ["id" => 1, "name" => "2019 Toyota Camry", "price_per_day" => 50, "availability" => true],
    ["id" => 2, "name" => "2018 Honda Accord", "price_per_day" => 45, "availability" => true],
    ["id" => 3, "name" => "2020 Ford Mustang", "price_per_day" => 70, "availability" => false],
    // ...additional vehicles...
];

// Return JSON response with available vehicles
echo json_encode($vehicles);

// Log completion of API handling
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - /views/vehicles API processed successfully\n", FILE_APPEND);
?>
=== public/api/views/home.php ===
<?php
// Log the receipt of the request
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Received API /views/home request\n", FILE_APPEND);

// Set header for valid JSON
header("Content-Type: application/json");

// Explicit success status
http_response_code(200);

// Load homepage content dynamically
$welcomeMessage = "Welcome to CarFuse!";
$latestListings = [
    ["id" => 1, "title" => "2019 Toyota Camry", "price" => 24000],
    ["id" => 2, "title" => "2018 Honda Accord", "price" => 22000],
    // ...additional listings...
];

// Prepare response data
$responseData = [
    "welcomeMessage" => $welcomeMessage,
    "latestListings" => $latestListings
];

// Return JSON response with site metadata
echo json_encode($responseData);

// Log completion of API handling
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - /views/home API processed successfully\n", FILE_APPEND);
?>
=== public/api/views/reports.php ===
<?php
require_once __DIR__ . '/../../../App/Helpers/SecurityHelper.php';

// Log the receipt of the request
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Received API /views/reports request\n", FILE_APPEND);

// Set header for valid JSON
header("Content-Type: application/json");

// Check if admin is logged in
if (!isAdminLoggedIn()) {
    http_response_code(403);
    echo json_encode(["error" => "Unauthorized"]);
    file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - Unauthorized access to /views/reports\n", FILE_APPEND);
    exit();
}

// Explicit success status
http_response_code(200);

// Load reports data dynamically
$revenueData = [
    "totalRevenue" => 50000,
    "monthlyRevenue" => 5000,
    // ...additional revenue data...
];
$recentTransactions = [
    ["id" => 201, "user" => "John Doe", "amount" => 24000, "date" => "2023-10-01"],
    ["id" => 202, "user" => "Jane Smith", "amount" => 22000, "date" => "2023-10-02"],
    // ...additional transactions...
];
$systemActivity = [
    ["id" => 1, "activity" => "User login", "timestamp" => "2023-10-01 12:00:00"],
    ["id" => 2, "activity" => "Booking created", "timestamp" => "2023-10-01 12:05:00"],
    // ...additional activities...
];

// Prepare response data
$responseData = [
    "revenueData" => $revenueData,
    "recentTransactions" => $recentTransactions,
    "systemActivity" => $systemActivity
];

// Return JSON response with reports data
echo json_encode($responseData);

// Log completion of API handling
file_put_contents(__DIR__ . '/../../../logs/debug.log', date('Y-m-d H:i:s') . " - /views/reports API processed successfully\n", FILE_APPEND);
?>
=== public/api/test.php ===
<?php
// Log the receipt of the request
file_put_contents('debug.log', date('Y-m-d H:i:s') . " - Received API /test request\n", FILE_APPEND);

// Optional authentication check flag
$requiresAuth = false;

// Define authentication function
function requireAuthTest() {
	// Check for 'Authorization' header (adjust condition per requirements)
	if (!isset($_SERVER['HTTP_AUTHORIZATION'])) {
		file_put_contents('debug.log', date('Y-m-d H:i:s') . " - Authentication failed\n", FILE_APPEND);
		http_response_code(401);
		header("Content-Type: application/json");
		echo json_encode(["error" => "Unauthorized"]);
		exit();
	}
	file_put_contents('debug.log', date('Y-m-d H:i:s') . " - Authentication succeeded\n", FILE_APPEND);
}

// Perform authentication if required
if ($requiresAuth) {
	requireAuthTest();
}

// Set header always for valid JSON
header("Content-Type: application/json");

// Explicit success status
http_response_code(200);

// ...existing code...
echo json_encode(["status" => "API working"]);
// ...existing code...

// Log completion of API handling
file_put_contents('debug.log', date('Y-m-d H:i:s') . " - /test API processed successfully\n", FILE_APPEND);
?>
=== public/css/shared.css ===
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    text-align: center;
}

h1 {
    color: #333;
}

nav {
    margin-bottom: 20px;
}

a {
    text-decoration: none;
    color: #007bff;
}

a:hover {
    text-decoration: underline;
}

form {
    max-width: 300px;
    margin: auto;
    display: flex;
    flex-direction: column;
}

input {
    margin-bottom: 10px;
    padding: 8px;
    font-size: 16px;
}

button {
    padding: 10px;
    font-size: 16px;
    cursor: pointer;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
}

button:hover {
    background: #0056b3;
}
=== public/index.php ===
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// ✅ Load Bootstrap & Services
$bootstrap = require_once __DIR__ . '/../bootstrap.php';
$logger = $bootstrap['logger'];

// ✅ Start Secure Session
startSecureSession();

// ✅ Get Requested URI & Log Request
$requestUri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
$logger->info("Requested URI: $requestUri");

// ✅ Ensure URL is properly formatted (prevent double slashes)
$requestUri = trim($requestUri, '/');

// ✅ API REQUEST HANDLING
if (strpos($requestUri, 'api/') === 0) {
    $apiPath = __DIR__ . "/$requestUri.php"; // Adjust for correct path resolution

    if (file_exists($apiPath)) {
        $logger->info("API Request Served: $requestUri");
        require $apiPath;
        exit;
    } else {
        http_response_code(404);
        $logger->error("API Not Found: $requestUri");
        echo json_encode(["error" => "API Not Found"]);
        exit;
    }
}

// ✅ FastRoute Dispatching for Views
$dispatcher = require __DIR__ . '/../config/routes.php';
$routeInfo = $dispatcher->dispatch($_SERVER['REQUEST_METHOD'], "/$requestUri");

switch ($routeInfo[0]) {
    case FastRoute\Dispatcher::FOUND:
        // ✅ Ensure views from subfolders load correctly
        $viewPath = __DIR__ . "/views/" . $routeInfo[1];

        if (file_exists($viewPath)) {
            $logger->info("Rendering View: " . $routeInfo[1]);
            require $viewPath;
        } else {
            http_response_code(404);
            $logger->error("View Not Found: " . $routeInfo[1]);
            require __DIR__ . "/views/errors/404.php";
        }
        exit;

    case FastRoute\Dispatcher::NOT_FOUND:
        http_response_code(404);
        $logger->error("404 Not Found: $requestUri");
        require __DIR__ . "/views/errors/404.php";
        exit;
}
?>
=== public/views/auth/register.php ===
<?php
/*
|--------------------------------------------------------------------------
| Rejestracja Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi założenie konta.
|
| Ścieżka: App/Views/auth/register.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczna walidacja)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego przetwarzania rejestracji)
| - HTML, CSS (interfejs)
*/

require_once BASE_PATH . '/App/Helpers/SecurityHelper.php';

if (session_status() === PHP_SESSION_NONE) {
    require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
}

if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}
?>

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rejestracja</title>
    
    <!-- ✅ Bootstrap & Custom Styles -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/public/css/auth.css">
</head>
<body class="d-flex justify-content-center align-items-center vh-100 bg-light">

<div class="auth-container bg-white p-4 rounded shadow-lg">
    <h1 class="text-center mb-4">Zarejestruj się</h1>

    <form id="registerForm">
        <?= csrf_field(); ?>
        <div class="mb-3">
            <label for="name" class="form-label">Imię i nazwisko</label>
            <input type="text" class="form-control" id="name" name="name" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Adres e-mail</label>
            <input type="email" class="form-control" id="email" name="email" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Hasło</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <div class="mb-3">
            <label for="confirm_password" class="form-label">Potwierdź hasło</label>
            <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Zarejestruj się</button>
    </form>

    <div id="responseMessage" class="alert mt-3 d-none"></div>
    <p class="text-center mt-3"><a href="/auth/login.php">Masz już konto? Zaloguj się</a></p>
</div>

<!-- ✅ Bootstrap & Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/auth.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const registerForm = document.getElementById("registerForm");

    registerForm.addEventListener("submit", function(e) {
        e.preventDefault();
        
        const formData = new FormData(registerForm);
        formData.append("csrf_token", document.querySelector('input[name="csrf_token"]').value); // Ensure CSRF token is included
        
        registerUser(formData);
    });

    function registerUser(formData) {
        fetch("/api/auth/register.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.classList.remove("d-none");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "✅ Rejestracja udana! Przekierowywanie...";
                setTimeout(() => window.location.href = "/auth/login.php", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "❌ Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd rejestracji:", error);
        });
    }
});
</script>

</body>
</html>
=== public/views/auth/password_reset.php ===
<?php
/*
|--------------------------------------------------------------------------
| Resetowanie Hasła
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi ustawienie nowego hasła po kliknięciu w link
| resetujący, który został wysłany na jego e-mail.
|
| Ścieżka: App/Views/auth/password_reset.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczne przetwarzanie resetu)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznej zmiany hasła)
| - HTML, CSS (interfejs)
*/

require_once BASE_PATH . '/App/Helpers/SecurityHelper.php';

if (session_status() === PHP_SESSION_NONE) {
    require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
}

if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}

// Pobranie tokenu resetującego z URL
$token = $_GET['token'] ?? null;
if (!$token) {
    die("❌ Nieprawidłowy link resetujący.");
}
?>

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ustaw nowe hasło</title>
    
    <!-- ✅ Bootstrap & Custom Styles -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/public/css/auth.css">
</head>
<body class="d-flex justify-content-center align-items-center vh-100 bg-light">

<div class="auth-container bg-white p-4 rounded shadow-lg">
    <h1 class="text-center mb-4">Ustaw nowe hasło</h1>

    <form id="passwordResetForm">
        <?= csrf_field(); ?>
        <input type="hidden" name="token" value="<?= htmlspecialchars($token) ?>">

        <div class="mb-3">
            <label for="new_password" class="form-label">Nowe hasło</label>
            <input type="password" class="form-control" id="new_password" name="new_password" required>
        </div>
        <div class="mb-3">
            <label for="confirm_password" class="form-label">Potwierdź nowe hasło</label>
            <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Zmień hasło</button>
    </form>

    <div id="responseMessage" class="alert mt-3 d-none"></div>
</div>

<!-- ✅ Bootstrap & Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/auth.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const passwordResetForm = document.getElementById("passwordResetForm");

    passwordResetForm.addEventListener("submit", function(e) {
        e.preventDefault();
        resetPassword(new FormData(passwordResetForm));
    });

    function resetPassword(formData) {
        fetch("/api/auth/password_reset.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.classList.remove("d-none");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "✅ Hasło zostało zmienione! Możesz się teraz zalogować.";
                setTimeout(() => window.location.href = "/auth/login.php", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "❌ Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd zmiany hasła:", error);
        });
    }
});
</script>

</body>
</html>
=== public/views/auth/login.php ===
<?php
/*
|--------------------------------------------------------------------------
| Logowanie Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi zalogowanie się do systemu.
|
| Ścieżka: App/Views/auth/login.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczna walidacja)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego logowania)
| - HTML, CSS (interfejs)
*/
header("Content-Type: text/html; charset=UTF-8");

require_once BASE_PATH . '/App/Helpers/SecurityHelper.php'; // Ensure CSRF functions are loaded
include __DIR__ . '/../layouts/header.php';

if (session_status() === PHP_SESSION_NONE) {
    require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
}

if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}
?>

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zaloguj się</title>

    <!-- ✅ Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <!-- ✅ Custom Authentication CSS -->
    <link rel="stylesheet" href="/public/css/auth.css">
</head>
<body class="d-flex justify-content-center align-items-center vh-100 bg-light">

<div class="auth-container bg-white p-4 rounded shadow-lg">
    <h1 class="text-center mb-4">Zaloguj się</h1>

    <form id="loginForm">
        <?= csrf_field(); ?>
        <div class="mb-3">
            <label for="email" class="form-label">Adres e-mail</label>
            <input type="email" class="form-control" id="email" name="email" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Hasło</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Zaloguj się</button>
    </form>
    
    <div id="responseMessage" class="alert mt-3 d-none"></div>
    <p class="text-center mt-3"><a href="/auth/password_reset.php">Nie pamiętasz hasła?</a></p>
</div>

<!-- ✅ Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- ✅ Custom Authentication Script -->
<script src="/js/auth.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const loginForm = document.getElementById("loginForm");

    loginForm.addEventListener("submit", function(e) {
        e.preventDefault();
        
        const formData = new FormData(loginForm);
        formData.append("csrf_token", document.querySelector('input[name="csrf_token"]').value); // Ensure CSRF token is included

        loginUser(formData);
    });

    function loginUser(formData) {
        fetch("/api/auth/login.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.classList.remove("d-none");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Logowanie pomyślne! Przekierowywanie...";
                setTimeout(() => window.location.href = "/dashboard", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd logowania:", error);
        });
    }
});
</script>

</body>
</html>
<?php include __DIR__ . '/../layouts/footer.php'; ?>
=== public/views/auth/reset_request.php ===
<?php
/*
|--------------------------------------------------------------------------
| Żądanie Resetu Hasła
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi wysłanie prośby o resetowanie hasła.
| Na podany adres e-mail zostanie wysłany link do resetu.
|
| Ścieżka: App/Views/auth/reset_request.php
|
| Zależy od:
| - JavaScript: /js/auth.js (obsługa AJAX, dynamiczne wysyłanie resetu)
| - CSS: /css/auth.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego wysyłania zapytania)
| - HTML, CSS (interfejs)
*/

require_once BASE_PATH . '/App/Helpers/SecurityHelper.php';

if (session_status() === PHP_SESSION_NONE) {
    require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
}

if (isset($_SESSION['user_id'])) {
    header("Location: /dashboard");
    exit;
}
?>

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Resetowanie Hasła</title>

    <!-- ✅ Bootstrap & Custom Styles -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/public/css/auth.css">
</head>
<body class="d-flex justify-content-center align-items-center vh-100 bg-light">

<div class="auth-container bg-white p-4 rounded shadow-lg">
    <h1 class="text-center mb-4">Resetowanie Hasła</h1>

    <form id="resetRequestForm">
        <?= csrf_field(); ?>
        <div class="mb-3">
            <label for="email" class="form-label">Adres e-mail</label>
            <input type="email" class="form-control" id="email" name="email" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Wyślij link resetujący</button>
    </form>

    <div id="responseMessage" class="alert mt-3 d-none"></div>
    <p class="text-center mt-3"><a href="/auth/login.php">Pamiętasz hasło? Zaloguj się</a></p>
</div>

<!-- ✅ Bootstrap & Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/auth.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const resetRequestForm = document.getElementById("resetRequestForm");

    resetRequestForm.addEventListener("submit", function(e) {
        e.preventDefault();

        const formData = new FormData(resetRequestForm);
        formData.append("csrf_token", document.querySelector('input[name="csrf_token"]').value);

        requestPasswordReset(formData);
    });

    function requestPasswordReset(formData) {
        fetch("/api/auth/reset_request.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.classList.remove("d-none");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "✅ Link do resetowania hasła został wysłany na podany e-mail.";
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "❌ Błąd: " + data.error;
            }
        })
        .catch(error => {
            console.error("Błąd wysyłania resetu:", error);
        });
    }
});
</script>

</body>
</html>
=== public/views/admin/payments/dashboard.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Panel Zarządzania Płatnościami
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd wszystkich transakcji, zwrotów
| oraz statystyk finansowych. Obsługuje dynamiczne filtrowanie i obsługę zwrotów.
|
| Ścieżka: App/Views/admin/payments/dashboard.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane transakcji, zwroty)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - Chart.js (wizualizacja płatności)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Panel Płatności</h1>

<div class="admin-container">
    <div class="row">
        <!-- Statystyki płatności -->
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Łączna liczba transakcji</h4>
                    <p id="totalTransactions" class="display-6">0</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Łączna kwota przychodu</h4>
                    <p id="totalRevenue" class="display-6">0 PLN</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Łączna liczba zwrotów</h4>
                    <p id="totalRefunds" class="display-6">0</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtry transakcji -->
    <form id="paymentFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="completed">Zakończona</option>
                <option value="pending">Oczekująca</option>
                <option value="failed">Nieudana</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-control" name="method">
                <option value="">Metoda płatności</option>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela transakcji -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="transactionList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("paymentFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchTransactions(new FormData(filterForm));
    });

    function fetchTransactions(formData = null) {
        let url = "/api/admin/payments.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const transactionTable = document.getElementById("transactionList");
                transactionTable.innerHTML = "";

                if (data.length === 0) {
                    transactionTable.innerHTML = `<tr><td colspan="7" class="text-center text-muted">Brak transakcji spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(transaction => {
                        transactionTable.innerHTML += `
                            <tr>
                                <td>${transaction.id}</td>
                                <td>${transaction.user}</td>
                                <td>${transaction.amount} PLN</td>
                                <td>${transaction.method}</td>
                                <td>${transaction.status}</td>
                                <td>${transaction.date}</td>
                                <td>
                                    ${transaction.status === "completed" ? `<button class="btn btn-danger btn-sm" onclick="processRefund(${transaction.id})">Zwrot</button>` : ""}
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania transakcji:", error));
    }

    function processRefund(transactionId) {
        if (!confirm("Czy na pewno chcesz dokonać zwrotu?")) return;

        fetch(`/api/admin/refund.php?id=${transactionId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Zwrot został pomyślnie przetworzony.");
                    fetchTransactions();
                } else {
                    alert("Błąd zwrotu: " + data.error);
                }
            })
            .catch(error => console.error("Błąd zwrotu:", error));
    }

    fetchTransactions();
});
</script>
=== public/views/admin/payments/transactions.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Panel Transakcji Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie wszystkimi
| transakcjami finansowymi systemu. Obsługuje filtrowanie i eksport danych.
|
| Ścieżka: App/Views/admin/payments/transactions.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie, eksport)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane transakcji)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Transakcje Płatności</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Historia Transakcji</h3>
        <div>
            <button class="btn btn-success btn-sm" id="exportCSV">Eksport CSV</button>
            <button class="btn btn-danger btn-sm" id="exportPDF">Eksport PDF</button>
        </div>
    </div>

    <!-- Filtry transakcji -->
    <form id="transactionFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
        </div>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Status transakcji</option>
                <option value="completed">Zakończona</option>
                <option value="pending">Oczekująca</option>
                <option value="failed">Nieudana</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-control" name="method">
                <option value="">Metoda płatności</option>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela transakcji -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody id="transactionList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("transactionFilterForm");
    const exportCSV = document.getElementById("exportCSV");
    const exportPDF = document.getElementById("exportPDF");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchTransactions(new FormData(filterForm));
    });

    exportCSV.addEventListener("click", function() {
        window.location.href = "/api/admin/export_transactions.php?format=csv";
    });

    exportPDF.addEventListener("click", function() {
        window.location.href = "/api/admin/export_transactions.php?format=pdf";
    });

    function fetchTransactions(formData = null) {
        let url = "/api/admin/transactions.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const transactionTable = document.getElementById("transactionList");
                transactionTable.innerHTML = "";

                if (data.length === 0) {
                    transactionTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak transakcji spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(transaction => {
                        transactionTable.innerHTML += `
                            <tr>
                                <td>${transaction.id}</td>
                                <td>${transaction.user}</td>
                                <td>${transaction.amount} PLN</td>
                                <td>${transaction.method}</td>
                                <td>${transaction.status}</td>
                                <td>${transaction.date}</td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania transakcji:", error));
    }

    fetchTransactions();
});
</script>
=== public/views/admin/payments/refunds.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Panel Zwrotów Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie zwrotami.
| Administrator może sprawdzić status zwrotów oraz anulować wybrane operacje.
|
| Ścieżka: App/Views/admin/payments/refunds.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie, anulowanie zwrotów)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane zwrotów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Zwroty Płatności</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Historia Zwrotów</h3>
    </div>

    <!-- Filtry zwrotów -->
    <form id="refundFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
        </div>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Status zwrotu</option>
                <option value="pending">Oczekujący</option>
                <option value="completed">Zakończony</option>
                <option value="failed">Nieudany</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela zwrotów -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Kwota</th>
                <th>Status</th>
                <th>Data</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="refundList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("refundFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchRefunds(new FormData(filterForm));
    });

    function fetchRefunds(formData = null) {
        let url = "/api/admin/refunds.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const refundTable = document.getElementById("refundList");
                refundTable.innerHTML = "";

                if (data.length === 0) {
                    refundTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak zwrotów spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(refund => {
                        refundTable.innerHTML += `
                            <tr>
                                <td>${refund.id}</td>
                                <td>${refund.user}</td>
                                <td>${refund.amount} PLN</td>
                                <td>${refund.status}</td>
                                <td>${refund.date}</td>
                                <td>
                                    ${refund.status === "pending" ? `<button class="btn btn-danger btn-sm" onclick="cancelRefund(${refund.id})">Anuluj</button>` : ""}
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania zwrotów:", error));
    }

    function cancelRefund(refundId) {
        if (!confirm("Czy na pewno chcesz anulować ten zwrot?")) return;

        fetch(`/api/admin/cancel_refund.php?id=${refundId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Zwrot został anulowany.");
                    fetchRefunds();
                } else {
                    alert("Błąd anulowania zwrotu: " + data.error);
                }
            })
            .catch(error => console.error("Błąd anulowania zwrotu:", error));
    }

    fetchRefunds();
});
</script>
=== public/views/admin/dashboard.php ===
<?php require_once __DIR__ . '/../layouts/header.php'; ?>

<h1 class="text-center">Admin Dashboard</h1>

<div class="dashboard-container">
    <!-- Overview Cards -->
    <div class="row">
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Total Users</h4>
                    <p id="totalUsers" class="display-6">0</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Total Bookings</h4>
                    <p id="totalBookings" class="display-6">0</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Total Revenue</h4>
                    <p id="totalRevenue" class="display-6">$0.00</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Graphs -->
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="text-center">Monthly Booking Trends</h5>
                    <canvas id="bookingTrends"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="text-center">Monthly Revenue Trends</h5>
                    <canvas id="revenueTrends"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/js/admin.js"></script>

<?php require_once __DIR__ . '/../layouts/footer.php'; ?>
=== public/views/admin/users.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Panel Zarządzania Użytkownikami
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie użytkownikami.
| Obsługuje filtrowanie, edycję, dodawanie i usuwanie użytkowników.
|
| Ścieżka: App/Views/admin/users.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, edycja, usuwanie)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane użytkowników)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Zarządzanie Użytkownikami</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Lista Użytkowników</h3>
        <button class="btn btn-primary" id="addUserBtn">Dodaj Użytkownika</button>
    </div>

    <!-- Filtry użytkowników -->
    <form id="userFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <select class="form-control" name="role">
                <option value="">Wybierz rolę</option>
                <option value="user">Użytkownik</option>
                <option value="admin">Administrator</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-control" name="status">
                <option value="">Status</option>
                <option value="active">Aktywny</option>
                <option value="inactive">Nieaktywny</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="registration_date" placeholder="Data rejestracji">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela użytkowników -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Imię i nazwisko</th>
                <th>Email</th>
                <th>Rola</th>
                <th>Status</th>
                <th>Data rejestracji</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="userList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<!-- Modal dodawania/edycji użytkownika -->
<div id="userModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modalTitle">Dodaj Użytkownika</h2>
        <form id="userForm">
            <?= csrf_field() ?>
            <input type="hidden" id="userId" name="userId">

            <div class="form-group">
                <label for="name">Imię i nazwisko</label>
                <input type="text" id="name" name="name" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="email">Adres e-mail</label>
                <input type="email" id="email" name="email" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="role">Rola</label>
                <select id="role" name="role" class="form-control" required>
                    <option value="user">Użytkownik</option>
                    <option value="admin">Administrator</option>
                </select>
            </div>

            <div class="form-group">
                <label for="status">Status</label>
                <select id="status" name="status" class="form-control" required>
                    <option value="active">Aktywny</option>
                    <option value="inactive">Nieaktywny</option>
                </select>
            </div>

            <button type="submit" class="btn btn-success">Zapisz</button>
        </form>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("userFilterForm");
    const addUserBtn = document.getElementById("addUserBtn");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchUsers(new FormData(filterForm));
    });

    addUserBtn.addEventListener("click", function() {
        openUserModal();
    });

    function fetchUsers(formData = null) {
        let url = "/api/admin/users.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const userTable = document.getElementById("userList");
                userTable.innerHTML = "";

                if (data.length === 0) {
                    userTable.innerHTML = `<tr><td colspan="7" class="text-center text-muted">Brak użytkowników spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(user => {
                        userTable.innerHTML += `
                            <tr>
                                <td>${user.id}</td>
                                <td>${user.name}</td>
                                <td>${user.email}</td>
                                <td>${user.role}</td>
                                <td>${user.status}</td>
                                <td>${user.registration_date}</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="editUser(${user.id})">Edytuj</button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteUser(${user.id})">Usuń</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania użytkowników:", error));
    }

    fetchUsers();
});
</script>

<?php
// Improved AJAX for fetching users
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'fetch_users') {
    // Fetch users from the database
    // ...existing code...
    $users = []; // Assume this array is populated with user data from the database

    foreach ($users as &$user) {
        $user['role'] = $user['is_admin'] ? 'admin' : 'user';
    }

    echo json_encode($users);
    exit();
}
?>
=== public/views/admin/audit_logs.php ===
<?php
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}

/*
|--------------------------------------------------------------------------
| Logi Audytowe Administratora
|--------------------------------------------------------------------------
| Ten plik odpowiada za wyświetlanie logów audytowych systemu. Administrator
| może filtrować historię działań użytkowników według ID, rezerwacji, daty i IP.
|
| Ścieżka: App/Views/admin/audit_logs.php
|
| Zależy od:
| - JavaScript: admin.js (obsługa logów, AJAX)
| - CSS: admin.css (stylizacja tabeli, formularzy)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pobierane z bazy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX, dynamiczne ładowanie danych)
| - HTML, CSS (interfejs)
*/
?>
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logi Audytowe</title>
    <link rel="stylesheet" href="path/to/admin.css">
</head>
<body>
    <h1 class="text-center">Logi Audytowe</h1>

    <div class="admin-container">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Historia Zdarzeń w Systemie</h3>
            <button class="btn btn-secondary" id="clearFilters">Wyczyść Filtry</button>
        </div>

        <!-- Filtry -->
        <form id="filterForm" class="row mb-4">
            <?= csrf_field() ?>
            <div class="col-md-2">
                <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
            </div>
            <div class="col-md-2">
                <input type="text" class="form-control" name="booking_id" placeholder="ID Rezerwacji">
            </div>
            <div class="col-md-2">
                <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
            </div>
            <div class="col-md-2">
                <input type="date" class="form-control" name="end_date" placeholder="Data końcowa">
            </div>
            <div class="col-md-2">
                <select class="form-control" name="action_type">
                    <option value="">Rodzaj akcji</option>
                    <option value="login">Logowanie</option>
                    <option value="update">Aktualizacja</option>
                    <option value="delete">Usunięcie</option>
                </select>
            </div>
            <div class="col-md-2 text-end">
                <button type="submit" class="btn btn-primary">Filtruj</button>
            </div>
        </form>

        <!-- Tabela Logów -->
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Użytkownik</th>
                    <th>Akcja</th>
                    <th>Opis</th>
                    <th>ID Rezerwacji</th>
                    <th>Adres IP</th>
                    <th>Data</th>
                </tr>
            </thead>
            <tbody id="auditLogs">
                <!-- Dane będą ładowane dynamicznie -->
            </tbody>
        </table>
    </div>

    <script src="path/to/admin.js"></script>
    <script>
    document.addEventListener("DOMContentLoaded", function() {
        const filterForm = document.getElementById("filterForm");
        const clearFilters = document.getElementById("clearFilters");

        // Obsługa filtrów
        filterForm.addEventListener("submit", function(e) {
            e.preventDefault();
            fetchAuditLogs(new FormData(filterForm));
        });

        clearFilters.addEventListener("click", function() {
            filterForm.reset();
            fetchAuditLogs();
        });

        // Pobieranie logów audytowych przez AJAX
        function fetchAuditLogs(formData = null) {
            let url = "/api/admin/audit_logs.php";
            if (formData) {
                url += "?" + new URLSearchParams(formData).toString();
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    const auditLogsTable = document.getElementById("auditLogs");
                    auditLogsTable.innerHTML = "";
                    data.forEach(log => {
                        auditLogsTable.innerHTML += `
                            <tr>
                                <td>${log.id}</td>
                                <td>${log.user}</td>
                                <td>${log.action}</td>
                                <td>${log.details}</td>
                                <td>${log.booking_id || '-'}</td>
                                <td>${log.ip_address}</td>
                                <td>${log.formatted_date}</td>
                            </tr>
                        `;
                    });
                })
                .catch(error => console.error("Błąd pobierania logów audytowych:", error));
        }

        // Automatyczne załadowanie logów po otwarciu strony
        fetchAuditLogs();
    });
    </script>
</body>
</html>
=== public/views/admin/logs.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}

/*
|--------------------------------------------------------------------------
| Logi Systemowe Administratora
|--------------------------------------------------------------------------
| Ten plik odpowiada za wyświetlanie logów systemowych, które pomagają
| administratorowi diagnozować problemy techniczne.
|
| Ścieżka: App/Views/admin/logs.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa logów, AJAX)
| - CSS: /css/admin.css (stylizacja tabeli)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pobierane z bazy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX, dynamiczne ładowanie danych)
| - HTML, CSS (interfejs)
*/
?>

<h1 class="text-center">Logi Systemowe</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Przegląd Logów Systemowych</h3>
        <button class="btn btn-secondary" id="clearFilters">Wyczyść Filtry</button>
    </div>

    <!-- Filtry logów -->
    <form id="logFilterForm" class="row mb-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <select class="form-control" name="log_type">
                <option value="">Wybierz typ logu</option>
                <option value="error">Błąd</option>
                <option value="info">Informacja</option>
                <option value="warning">Ostrzeżenie</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="text" class="form-control" name="log_message" placeholder="Wyszukaj w treści logu">
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" name="end_date" placeholder="Data końcowa">
        </div>
        <div class="col-md-2 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela logów -->
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Typ Logu</th>
                <th>Wiadomość</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody id="systemLogs">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
    <p id="noLogsMessage" class="text-center text-muted" style="display:none;">Brak logów spełniających kryteria.</p>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("logFilterForm");
    const clearFilters = document.getElementById("clearFilters");

    // Obsługa filtrów
    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchLogs(new FormData(filterForm));
    });

    clearFilters.addEventListener("click", function() {
        filterForm.reset();
        fetchLogs();
    });

    // Pobieranie logów systemowych przez AJAX
    function fetchLogs(formData = null) {
        let url = "/api/admin/logs.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const logsTable = document.getElementById("systemLogs");
                logsTable.innerHTML = "";
                const noLogsMessage = document.getElementById("noLogsMessage");

                if (data.length === 0) {
                    noLogsMessage.style.display = "block";
                } else {
                    noLogsMessage.style.display = "none";
                    data.forEach(log => {
                        logsTable.innerHTML += `
                            <tr>
                                <td>${log.id}</td>
                                <td>${log.type}</td>
                                <td>${log.message}</td>
                                <td>${log.formatted_date}</td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania logów systemowych:", error));
    }

    // Automatyczne załadowanie logów po otwarciu strony
    fetchLogs();
});
</script>

<?php
// Fetch and display logs
$logs = []; // Assume this array is populated with log data from the database

foreach ($logs as &$log) {
    $log['formatted_date'] = date('Y-m-d H:i:s', strtotime($log['date']));
}
?>
=== public/views/admin/documents.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Panel Zarządzania Dokumentami
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi przegląd i zarządzanie dokumentami 
| przesłanymi przez użytkowników. Obsługuje filtrowanie i podgląd plików.
|
| Ścieżka: App/Views/admin/documents.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa AJAX, filtrowanie, usuwanie dokumentów)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane dokumentów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do pobierania danych)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Zarządzanie Dokumentami</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Lista Dokumentów</h3>
    </div>

    <!-- Filtry dokumentów -->
    <form id="documentFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-3">
            <input type="text" class="form-control" name="user_id" placeholder="ID Użytkownika">
        </div>
        <div class="col-md-3">
            <select class="form-control" name="document_type">
                <option value="">Typ dokumentu</option>
                <option value="contract">Umowa</option>
                <option value="invoice">Faktura</option>
                <option value="identity">Dowód tożsamości</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="date" class="form-control" name="upload_date" placeholder="Data przesłania">
        </div>
        <div class="col-md-3 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela dokumentów -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Użytkownik</th>
                <th>Typ</th>
                <th>Plik</th>
                <th>Data przesłania</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="documentList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("documentFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchDocuments(new FormData(filterForm));
    });

    function fetchDocuments(formData = null) {
        let url = "/api/admin/documents.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const documentTable = document.getElementById("documentList");
                documentTable.innerHTML = "";

                if (data.length === 0) {
                    documentTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak dokumentów spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(doc => {
                        documentTable.innerHTML += `
                            <tr>
                                <td>${doc.id}</td>
                                <td>${doc.user}</td>
                                <td>${doc.type}</td>
                                <td><a href="${doc.file_url}" target="_blank">Podgląd</a></td>
                                <td>${doc.upload_date}</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" onclick="deleteDocument(${doc.id})">Usuń</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania dokumentów:", error));
    }

    function deleteDocument(documentId) {
        if (!confirm("Czy na pewno chcesz usunąć ten dokument?")) return;

        fetch(`/api/admin/delete_document.php?id=${documentId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Dokument został usunięty.");
                    fetchDocuments();
                } else {
                    alert("Błąd usuwania dokumentu: " + data.error);
                }
            })
            .catch(error => console.error("Błąd usuwania dokumentu:", error));
    }

    fetchDocuments();
});
</script>
=== public/views/admin/reports.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Raporty Administratora
|--------------------------------------------------------------------------
| Ten plik umożliwia generowanie raportów dotyczących rezerwacji, płatności,
| użytkowników, aktywności w systemie oraz audytów.
|
| Ścieżka: App/Views/admin/reports.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa generowania raportów, AJAX)
| - CSS: /css/admin.css (stylizacja formularzy i tabeli)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pobierane z bazy)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX, dynamiczne generowanie raportów)
| - Chart.js (wizualizacja raportów)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Raporty Systemowe</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Generowanie raportów</h3>
        <button class="btn btn-secondary" id="clearFilters">Reset</button>
    </div>

    <!-- Formularz generowania raportów -->
    <form id="adminReportForm" class="mt-4">
        <?= csrf_field() ?>

        <div class="mb-3">
            <label for="reportType" class="form-label">Typ raportu</label>
            <select class="form-select" id="reportType" name="reportType" required>
                <option value="" disabled selected>Wybierz typ raportu</option>
                <option value="bookings">Rezerwacje</option>
                <option value="payments">Płatności</option>
                <option value="users">Użytkownicy</option>
                <option value="activity">Aktywność użytkowników</option>
                <option value="audit">Logi audytowe</option>
            </select>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="startDate" class="form-label">Data początkowa</label>
                <input type="date" class="form-control" id="startDate" name="startDate" required>
            </div>

            <div class="col-md-6 mb-3">
                <label for="endDate" class="form-label">Data końcowa</label>
                <input type="date" class="form-control" id="endDate" name="endDate" required>
            </div>
        </div>

        <div class="mb-3">
            <label for="format" class="form-label">Format raportu</label>
            <select class="form-select" id="format" name="format" required>
                <option value="csv">CSV</option>
                <option value="pdf">PDF</option>
                <option value="json">JSON</option>
            </select>
        </div>

        <button type="submit" class="btn btn-primary w-100">Generuj raport</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>

    <div class="mt-4">
        <h4>Podgląd raportu</h4>
        <canvas id="reportChart"></canvas>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const reportForm = document.getElementById("adminReportForm");
    const responseMessage = document.getElementById("responseMessage");
    const clearFilters = document.getElementById("clearFilters");

    reportForm.addEventListener("submit", function(e) {
        e.preventDefault();
        generateReport(new FormData(reportForm));
    });

    clearFilters.addEventListener("click", function() {
        reportForm.reset();
        responseMessage.style.display = "none";
    });

    function generateReport(formData) {
        let url = "/api/admin/reports.php";

        fetch(url, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Raport wygenerowany pomyślnie! Pobierz go tutaj: " + data.download_link;
                renderChart(data.chartData);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd generowania raportu:", error);
        });
    }

    function renderChart(chartData) {
        const ctx = document.getElementById("reportChart").getContext("2d");
        new Chart(ctx, {
            type: "bar",
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: "Liczba zgłoszeń",
                    data: chartData.values,
                    backgroundColor: "rgba(54, 162, 235, 0.6)"
                }]
            }
        });
    }
});
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<?php
// Date range validation
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['start_date'], $_POST['end_date'])) {
    $start_date = $_POST['start_date'];
    $end_date = $_POST['end_date'];

    if (strtotime($start_date) > strtotime($end_date)) {
        echo 'Invalid date range';
        exit();
    }

    // Export reports logic (PDF, CSV)
    // ...existing code...
}
?>
=== public/views/admin/settings.php ===
/*
|--------------------------------------------------------------------------
| Ustawienia Systemowe Administratora
|--------------------------------------------------------------------------
| Ten plik umożliwia administratorowi konfigurację systemu – ustawienia
| ogólne, tryb konserwacji, strefę czasową oraz konfigurację API.
|
| Ścieżka: App/Views/admin/settings.php
|
| Zależy od:
| - JavaScript: /js/admin.js (obsługa formularza ustawień, AJAX)
| - CSS: /css/admin.css (stylizacja interfejsu)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (przechowywanie ustawień)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do zapisu ustawień)
| - HTML, CSS (interfejs)
*/

<?php
if (!isset($_SESSION['admin_id'])) {
    header('Location: login.php');
    exit();
}

// Improved form validation
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $errors = [];

    if (empty($_POST['setting_name'])) {
        $errors[] = 'Setting name is required';
    }

    if (empty($_POST['setting_value'])) {
        $errors[] = 'Setting value is required';
    }

    if (empty($errors)) {
        // Save settings logic
        // ...existing code...
    } else {
        foreach ($errors as $error) {
            echo "<p>$error</p>";
        }
    }
}
?>

<h1 class="text-center">Ustawienia Systemowe</h1>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Konfiguracja systemu</h3>
        <button class="btn btn-secondary" id="resetSettings">Resetuj</button>
    </div>

    <!-- Formularz ustawień systemowych -->
    <form id="settingsForm" class="mt-4">
        <?= csrf_field() ?>

        <div class="mb-3">
            <label for="site_name" class="form-label">Nazwa strony</label>
            <input type="text" id="site_name" name="site_name" class="form-control" placeholder="Podaj nazwę strony" value="<?= esc($settings['site_name'] ?? '') ?>" required>
        </div>

        <div class="mb-3">
            <label for="admin_email" class="form-label">E-mail administratora</label>
            <input type="email" id="admin_email" name="admin_email" class="form-control" placeholder="Podaj e-mail administratora" value="<?= esc($settings['admin_email'] ?? '') ?>" required>
        </div>

        <div class="mb-3">
            <label for="logo_url" class="form-label">Logo strony (URL)</label>
            <input type="url" id="logo_url" name="logo_url" class="form-control" placeholder="Podaj URL logo" value="<?= esc($settings['logo_url'] ?? '') ?>">
        </div>

        <div class="mb-3">
            <label for="timezone" class="form-label">Strefa czasowa</label>
            <select id="timezone" name="timezone" class="form-select">
                <?php foreach (timezone_identifiers_list() as $tz): ?>
                    <option value="<?= esc($tz) ?>" <?= ($settings['timezone'] ?? '') === $tz ? 'selected' : '' ?>><?= esc($tz) ?></option>
                <?php endforeach; ?>
            </select>
        </div>

        <div class="mb-3">
            <label for="log_limit" class="form-label">Maksymalna liczba logów</label>
            <input type="number" id="log_limit" name="log_limit" class="form-control" value="<?= esc($settings['log_limit'] ?? 1000) ?>" min="100">
        </div>

        <div class="mb-3">
            <label for="api_key" class="form-label">Klucz API</label>
            <input type="text" id="api_key" name="api_key" class="form-control" placeholder="Podaj klucz API" value="<?= esc($settings['api_key'] ?? '') ?>">
        </div>

        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="maintenance_mode" name="maintenance_mode" <?= isset($settings['maintenance_mode']) && $settings['maintenance_mode'] ? 'checked' : '' ?>>
            <label class="form-check-label" for="maintenance_mode">Tryb konserwacji</label>
        </div>

        <button type="submit" class="btn btn-primary w-100">Zapisz zmiany</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const settingsForm = document.getElementById("settingsForm");
    const responseMessage = document.getElementById("responseMessage");
    const resetSettings = document.getElementById("resetSettings");

    settingsForm.addEventListener("submit", function(e) {
        e.preventDefault();
        saveSettings(new FormData(settingsForm));
    });

    resetSettings.addEventListener("click", function() {
        if (confirm("Czy na pewno chcesz przywrócić domyślne ustawienia?")) {
            fetch("/api/admin/reset_settings.php", { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    responseMessage.style.display = "block";
                    responseMessage.className = "alert alert-danger";
                    responseMessage.textContent = "Błąd resetowania ustawień.";
                }
            })
            .catch(error => console.error("Błąd resetowania ustawień:", error));
        }
    });

    function saveSettings(formData) {
        let url = "/api/admin/save_settings.php";

        fetch(url, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Ustawienia zapisane pomyślnie!";
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd zapisywania ustawień:", error);
        });
    }
});
</script>
=== public/views/layouts/header.php ===
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CarFuse Dashboard</title>
    <link rel="stylesheet" href="/public/css/main.css">
    <script src="/public/js/main.js" defer></script>
</head>
<body>
=== public/views/layouts/footer.php ===
</body>
</html>
=== public/views/layouts/sidebar.php ===
<?php
/*
|--------------------------------------------------------------------------
| Sidebar - Nawigacja w Dashboardzie
|--------------------------------------------------------------------------
| Plik odpowiada za wyświetlanie bocznego menu nawigacyjnego w dashboardzie.
| Umożliwia użytkownikom i administratorom przełączanie się między podstronami.
|
| Ścieżka: App/Views/layouts/sidebar.php
*/
?>

<aside class="sidebar">
    <nav class="sidebar-menu">
        <ul>
            <li><a href="/user/dashboard" class="dashboard-link">📊 Panel</a></li>
            <li><a href="/bookings/view" class="dashboard-link">📅 Moje rezerwacje</a></li>
            <li><a href="/payments/history" class="dashboard-link">💳 Historia płatności</a></li>
            <li><a href="/documents/user_documents" class="dashboard-link">📄 Moje dokumenty</a></li>
            <li><a href="/user/notifications" class="dashboard-link">🔔 Powiadomienia</a></li>
            <li><a href="/user/profile" class="dashboard-link">👤 Profil</a></li>
            <li><a href="/admin/users" class="dashboard-link">👥 Zarządzanie użytkownikami</a></li>
            <li><a href="/admin/audit_logs" class="dashboard-link">📜 Logi audytowe</a></li>
            <li><a href="/admin/logs" class="dashboard-link">📂 Logi systemowe</a></li>
            <li><a href="/admin/reports" class="dashboard-link">📑 Raporty</a></li>
            <li><a href="/admin/settings" class="dashboard-link">⚙️ Ustawienia</a></li>
            <li><a href="/logout">🚪 Wyloguj</a></li>
        </ul>
    </nav>
</aside>

<script src="/public/js/main.js" defer></script>
=== public/views/layouts/main copy.php ===
<?php
/*
|--------------------------------------------------------------------------
| Global Layout Wrapper - main.php
|--------------------------------------------------------------------------
| This file ensures all views have a consistent layout with a header and footer.
|
| Path: public/layouts/main.php
*/

require_once __DIR__ . '/../bootstrap.php';
require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../App/Helpers/SecurityHelper.php';

// Ensure $view is set before including it
if (!isset($view) || !file_exists($view)) {
    die("Error: View file not found.");
}

// Include header
require_once __DIR__ . '/header.php';
?>

<main class="content">
    <?php include $view; ?>
</main>

<?php
// Include footer
require_once __DIR__ . '/footer.php';
?>
=== public/views/layouts/modals.php ===
<?php
/*
|--------------------------------------------------------------------------
| Modale - Okna Modalne
|--------------------------------------------------------------------------
| Plik zawiera globalne okna modalne wykorzystywane w aplikacji.
|
| Ścieżka: App/Views/layouts/modals.php
*/
?>

<div id="globalModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modalTitle"></h2>
        <div id="modalBody"></div>
        <button class="btn btn-primary" id="modalConfirm">OK</button>
    </div>
</div>
=== public/views/layouts/main.php ===
<?php
/*
|--------------------------------------------------------------------------
| Global Layout Wrapper - main.php
|--------------------------------------------------------------------------
| This wrapper ensures that every view is displayed inside a structured
| layout with a header and footer.
|
| Path: public/layouts/main.php
*/

require_once __DIR__ . '/../layouts/header.php';
?>

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/public/css/main.css">
    <script src="/public/js/main.js" defer></script>
</head>
<body>

<?php include __DIR__ . '/../layouts/header.php'; ?>

<div class="dashboard-container">
    <aside class="sidebar">
        <?php
        if ($userRole === 'admin') {
            include __DIR__ . '/../layouts/sidebars/admin_sidebar.php';
        } else {
            include __DIR__ . '/../layouts/sidebars/user_sidebar.php';
        }
        ?>
    </aside>
    <main class="main-content">
        <?php include $view; ?>
    </main>
</div>

<?php include __DIR__ . '/../layouts/footer.php'; ?>

</body>
</html>
=== public/views/layouts/alerts.php ===
<?php
/*
|--------------------------------------------------------------------------
| Alerts - Globalne Powiadomienia
|--------------------------------------------------------------------------
| Plik odpowiada za wyświetlanie globalnych alertów i powiadomień.
|
| Ścieżka: App/Views/layouts/alerts.php
*/
?>

<div id="alert-container"></div>
=== public/views/layouts/navbar.php ===
<?php
/*
|--------------------------------------------------------------------------
| Navbar - Górna Nawigacja Dashboardu
|--------------------------------------------------------------------------
| Plik odpowiada za wyświetlanie górnej belki nawigacyjnej w dashboardzie.
| Pokazuje podstawowe opcje nawigacyjne i dostęp do ustawień konta.
|
| Ścieżka: App/Views/layouts/navbar.php
*/
?>
<nav class="navbar">
    <div class="container">
        <a href="/dashboard" class="logo">🚗 CarFuse</a>
        <ul class="nav-links">
            <li><a href="/user/profile" class="dashboard-link">👤 Mój Profil</a></li>
            <li><a href="/user/notifications" class="dashboard-link">🔔 Powiadomienia</a></li>
            <li><a href="/logout">🚪 Wyloguj</a></li>
        </ul>
    </div>
</nav>
<?php if (strpos($_SERVER['REQUEST_URI'], '/dashboard') !== false): ?>
    <script src="/js/main.js"></script>
<?php endif; ?>
<script src="/js/shared.js"></script>


=== public/views/payments/make_payment.php ===
<?php
/*
|--------------------------------------------------------------------------
| Dokonaj Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi dokonanie nowej płatności za rezerwacje
| lub inne usługi dostępne w systemie.
|
| Ścieżka: App/Views/payments/make_payment.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne przetwarzanie płatności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (obsługa transakcji)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego przetwarzania płatności)
| - HTML, CSS (interfejs)
*/


if (!isset($_SESSION['user_id'])) {
    header("Location: /auth/login.php");
    exit;
}

$userId = $_SESSION['user_id'];
?>

<h1 class="text-center">Dokonaj Płatności</h1>

<div class="payments-make-container">
    <form id="paymentForm">
        <?= csrf_field() ?>

        <!-- Wybór kwoty -->
        <div class="mb-3">
            <label for="amount" class="form-label">Kwota płatności (PLN)</label>
            <input type="number" class="form-control" id="amount" name="amount" min="1" required>
        </div>

        <!-- Metoda płatności -->
        <div class="mb-3">
            <label for="payment_method" class="form-label">Metoda płatności</label>
            <select class="form-select" id="payment_method" name="payment_method" required>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>

        <div id="cardDetails" style="display:none;">
            <div class="mb-3">
                <label for="card_number" class="form-label">Numer karty</label>
                <input type="text" class="form-control" id="card_number" name="card_number" pattern="\d{16}" placeholder="1234 5678 9012 3456">
            </div>
            <div class="mb-3 row">
                <div class="col">
                    <label for="expiry_date" class="form-label">Data ważności</label>
                    <input type="text" class="form-control" id="expiry_date" name="expiry_date" placeholder="MM/YY">
                </div>
                <div class="col">
                    <label for="cvv" class="form-label">CVV</label>
                    <input type="text" class="form-control" id="cvv" name="cvv" pattern="\d{3}" placeholder="123">
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary w-100">Zapłać</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const paymentTypeSelect = document.getElementById("payment_method");
    const cardDetails = document.getElementById("cardDetails");

    paymentTypeSelect.addEventListener("change", function() {
        cardDetails.style.display = this.value === "card" ? "block" : "none";
    });

    const paymentForm = document.getElementById("paymentForm");

    paymentForm.addEventListener("submit", function(e) {
        e.preventDefault();
        submitPayment(new FormData(paymentForm));
    });

    function submitPayment(formData) {
        fetch("/api/user/make_payment.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.style.display = "block";

            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Płatność została pomyślnie zrealizowana!";
                setTimeout(() => window.location.href = "/payments/history", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            const responseMessage = document.getElementById("responseMessage");
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd płatności:", error);
        });
    }
});
</script>
=== public/views/payments/methods.php ===
<?php
/*
|--------------------------------------------------------------------------
| Metody Płatności Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi zarządzanie zapisanymi metodami płatności.
| Obsługuje dodawanie nowych metod oraz usuwanie zapisanych kart czy kont PayPal.
|
| Ścieżka: App/Views/payments/methods.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne pobieranie metod płatności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane metod płatności)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego pobierania metod płatności)
| - HTML, CSS (interfejs)
*/


if (!isset($_SESSION['user_id'])) {
    header("Location: /auth/login.php");
    exit;
}

$userId = $_SESSION['user_id'];
?>

<h1 class="text-center">Moje Metody Płatności</h1>

<div class="payments-methods-container">
    <!-- Formularz dodawania metody płatności -->
    <form id="addPaymentMethodForm">
        <?= csrf_field() ?>
        <div class="mb-3">
            <label for="payment_type" class="form-label">Wybierz metodę</label>
            <select class="form-select" id="payment_type" name="payment_type" required>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>

        <div id="cardDetails" style="display:none;">
            <div class="mb-3">
                <label for="card_number" class="form-label">Numer karty</label>
                <input type="text" class="form-control" id="card_number" name="card_number" pattern="\d{16}" placeholder="1234 5678 9012 3456">
            </div>
            <div class="mb-3 row">
                <div class="col">
                    <label for="expiry_date" class="form-label">Data ważności</label>
                    <input type="text" class="form-control" id="expiry_date" name="expiry_date" placeholder="MM/YY">
                </div>
                <div class="col">
                    <label for="cvv" class="form-label">CVV</label>
                    <input type="text" class="form-control" id="cvv" name="cvv" pattern="\d{3}" placeholder="123">
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary w-100">Dodaj metodę płatności</button>
    </form>

    <h3 class="mt-4">Zapisane Metody Płatności</h3>
    <ul id="paymentMethodsList" class="list-group">
        <!-- Metody płatności ładowane dynamicznie -->
    </ul>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const paymentTypeSelect = document.getElementById("payment_type");
    const cardDetails = document.getElementById("cardDetails");

    paymentTypeSelect.addEventListener("change", function() {
        cardDetails.style.display = this.value === "card" ? "block" : "none";
    });

    const addPaymentForm = document.getElementById("addPaymentMethodForm");

    addPaymentForm.addEventListener("submit", function(e) {
        e.preventDefault();
        addPaymentMethod(new FormData(addPaymentForm));
    });

    function loadPaymentMethods() {
        fetch("/api/user/get_payment_methods.php")
            .then(response => response.json())
            .then(data => {
                const methodList = document.getElementById("paymentMethodsList");
                methodList.innerHTML = "";

                if (data.length > 0) {
                    data.forEach(method => {
                        methodList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${method.type === "card" ? "💳 Karta kredytowa" : method.type === "paypal" ? "🅿️ PayPal" : "🏦 Przelew bankowy"}</span>
                                <button class="btn btn-sm btn-danger" onclick="deletePaymentMethod(${method.id})">Usuń</button>
                            </li>
                        `;
                    });
                } else {
                    methodList.innerHTML = `<li class="list-group-item text-muted">Brak zapisanych metod płatności</li>`;
                }
            })
            .catch(error => console.error("Błąd ładowania metod płatności:", error));
    }

    function addPaymentMethod(formData) {
        fetch("/api/user/add_payment_method.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Metoda płatności została dodana!");
                loadPaymentMethods();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => console.error("Błąd dodawania metody płatności:", error));
    }

    function deletePaymentMethod(methodId) {
        if (!confirm("Czy na pewno chcesz usunąć tę metodę płatności?")) return;

        fetch(`/api/user/delete_payment_method.php?id=${methodId}`, { method: "POST" })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Metoda płatności została usunięta!");
                loadPaymentMethods();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => console.error("Błąd usuwania metody płatności:", error));
    }

    loadPaymentMethods();
});
</script>
=== public/views/payments/history.php ===
/*
|--------------------------------------------------------------------------
| Historia Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie historii płatności i ich statusów.
| Obsługuje filtrowanie oraz podgląd szczegółów transakcji.
|
| Ścieżka: App/Views/payments/history.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne pobieranie płatności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane płatności)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego pobierania płatności)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Historia Płatności</h1>

<div class="payments-history-container">
    <!-- Filtry płatności -->
    <form id="paymentFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-4">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="completed">Zakończona</option>
                <option value="pending">Oczekująca</option>
                <option value="failed">Nieudana</option>
            </select>
        </div>
        <div class="col-md-4">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-4 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela płatności -->
    <table class="table table-bordered table-striped table-responsive mt-3">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
                <th class="text-center">Akcje</th>
            </tr>
        </thead>
        <tbody id="paymentList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("paymentFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchPayments(new FormData(filterForm));
    });

    function fetchPayments(formData = null) {
        let url = "/api/user/payments.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const paymentTable = document.getElementById("paymentList");
                paymentTable.innerHTML = "";

                if (data.length === 0) {
                    paymentTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak płatności spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(payment => {
                        paymentTable.innerHTML += `
                            <tr>
                                <td>${payment.id}</td>
                                <td>${payment.amount} PLN</td>
                                <td>${payment.method}</td>
                                <td>${payment.status}</td>
                                <td>${payment.date}</td>
                                <td class="text-center">
                                    <button class="btn btn-info btn-sm" onclick="viewPayment(${payment.id})">Podgląd</button>
                                    <button class="btn btn-warning btn-sm" onclick="refundPayment(${payment.id})">Zwrot</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania płatności:", error));
    }

    function viewPayment(paymentId) {
        fetch(`/api/user/payment_details.php?id=${paymentId}`)
            .then(response => response.json())
            .then(data => {
                alert(`Szczegóły płatności:\n\nKwota: ${data.amount} PLN\nMetoda: ${data.method}\nStatus: ${data.status}\nData: ${data.date}`);
            })
            .catch(error => console.error("Błąd pobierania szczegółów płatności:", error));
    }

    function refundPayment(paymentId) {
        if (confirm("Czy na pewno chcesz zwrócić tę płatność?")) {
            fetch(`/api/user/refund_payment.php?id=${paymentId}`, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Płatność została zwrócona.");
                        fetchPayments();
                    } else {
                        alert("Błąd zwrotu płatności: " + data.message);
                    }
                })
                .catch(error => console.error("Błąd zwrotu płatności:", error));
        }
    }

    fetchPayments();
});
</script>
=== public/views/payments/refund.php ===
<?php
/*
|--------------------------------------------------------------------------
| Historia Zwrotów Płatności
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie historii swoich zwrotów płatności
| oraz ich statusów. Obsługuje filtrowanie oraz podgląd szczegółów.
|
| Ścieżka: App/Views/payments/refund.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne pobieranie zwrotów)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane zwrotów płatności)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego pobierania zwrotów)
| - HTML, CSS (interfejs)
*/


if (!isset($_SESSION['user_id'])) {
    header("Location: /auth/login.php");
    exit;
}

$userId = $_SESSION['user_id'];
?>

<h1 class="text-center">Historia Zwrotów</h1>

<div class="payments-refund-container">
    <!-- Filtry zwrotów -->
    <form id="refundFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-4">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="processed">Zakończony</option>
                <option value="pending">Oczekujący</option>
                <option value="failed">Nieudany</option>
            </select>
        </div>
        <div class="col-md-4">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-4 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela zwrotów -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Kwota</th>
                <th>Metoda</th>
                <th>Status</th>
                <th>Data</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="refundList">
            <tr>
                <td colspan="6" class="text-center text-muted">Ładowanie danych...</td>
            </tr>
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("refundFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchRefunds(new FormData(filterForm));
    });

    function fetchRefunds(formData = null) {
        let url = "/api/user/refunds.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const refundTable = document.getElementById("refundList");
                refundTable.innerHTML = "";

                if (data.length === 0) {
                    refundTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak zwrotów spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(refund => {
                        let statusColor;
                        switch (refund.status) {
                            case "processed": statusColor = "text-success"; break;
                            case "pending": statusColor = "text-warning"; break;
                            case "failed": statusColor = "text-danger"; break;
                            default: statusColor = "text-secondary";
                        }

                        refundTable.innerHTML += `
                            <tr>
                                <td>${refund.id}</td>
                                <td>${refund.amount} PLN</td>
                                <td>${refund.method}</td>
                                <td class="${statusColor}">${refund.status}</td>
                                <td>${refund.date}</td>
                                <td>
                                    <button class="btn btn-info btn-sm" onclick="viewRefund(${refund.id})">Podgląd</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania zwrotów:", error));
    }

    function viewRefund(refundId) {
        fetch(`/api/user/refund_details.php?id=${refundId}`)
            .then(response => response.json())
            .then(data => {
                alert(`Szczegóły zwrotu:\n\nKwota: ${data.amount} PLN\nMetoda: ${data.method}\nStatus: ${data.status}\nData: ${data.date}`);
            })
            .catch(error => console.error("Błąd pobierania szczegółów zwrotu:", error));
    }

    fetchRefunds();
});
</script>
=== public/views/dashboard.php ===
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CarFuse - Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
<?php include __DIR__ . '/layouts/navbar.php'; ?>

<div class="dashboard-container">
    <div id="dashboard-view">
        <!-- Dashboard content will be loaded here -->
    </div>
</div>

<?php include __DIR__ . '/layouts/footer.php'; ?>
<script src="/js/shared.js"></script>
<script src="/js/main.js"></script>
</body>
</html>
<?php
// ...existing code...
$page = 'dashboard';
// ...existing code...
?>=== public/views/user/profile.php ===
<?php
require_once __DIR__ . '/../../../App/Helpers/SecurityHelper.php';
if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
$page = 'profile';

?>

/*
|--------------------------------------------------------------------------
| Edycja Profilu Użytkownika
|--------------------------------------------------------------------------
| Ten plik pozwala użytkownikowi aktualizować swoje dane, zmieniać hasło
| oraz zarządzać swoim zdjęciem profilowym.
|
| Ścieżka: App/Views/user/profile.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, walidacja formularzy)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane użytkownika)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego zapisu)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Mój Profil</h1>

<div class="user-profile-container">
    <div class="row">
        <!-- Edycja Danych Użytkownika -->
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-body">
                    <h4>Edycja Danych</h4>
                    <form id="profileForm">
                        <?= csrf_field() ?>
                        <div class="mb-3">
                            <label for="name" class="form-label">Imię i nazwisko</label>
                            <input type="text" class="form-control" id="name" name="name" value="<?= esc($user['name']) ?>" required>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Adres e-mail</label>
                            <input type="email" class="form-control" id="email" name="email" value="<?= esc($user['email']) ?>" required>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Zapisz zmiany</button>
                    </form>
                    <div id="profileResponseMessage" class="alert mt-3" style="display:none;"></div>
                </div>
            </div>
        </div>

        <!-- Zmiana Hasła -->
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-body">
                    <h4>Zmiana Hasła</h4>
                    <form id="passwordForm">
                        <?= csrf_field() ?>
                        <div class="mb-3">
                            <label for="current_password" class="form-label">Obecne hasło</label>
                            <input type="password" class="form-control" id="current_password" name="current_password" required>
                        </div>
                        <div class="mb-3">
                            <label for="new_password" class="form-label">Nowe hasło</label>
                            <input type="password" class="form-control" id="new_password" name="new_password" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirm_password" class="form-label">Potwierdź nowe hasło</label>
                            <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
                        </div>
                        <button type="submit" class="btn btn-danger w-100">Zmień hasło</button>
                    </form>
                    <div id="passwordResponseMessage" class="alert mt-3" style="display:none;"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Zarządzanie Awatarem -->
    <div class="row mt-4">
        <div class="col-md-6 offset-md-3">
            <div class="card shadow text-center">
                <div class="card-body">
                    <h4>Zdjęcie Profilowe</h4>
                    <img id="profileAvatar" src="<?= esc($user['avatar_url'] ?? '/images/default-avatar.png') ?>" class="profile-avatar img-thumbnail mb-3" width="150">
                    <form id="avatarForm" enctype="multipart/form-data">
                        <?= csrf_field() ?>
                        <input type="file" class="form-control mb-2" id="avatar" name="avatar" accept="image/*" onchange="previewAvatar(event)">
                        <button type="submit" class="btn btn-success">Prześlij nowe zdjęcie</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAvatar()">Usuń zdjęcie</button>
                    </form>
                    <div id="avatarResponseMessage" class="alert mt-3" style="display:none;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const profileForm = document.getElementById("profileForm");
    const passwordForm = document.getElementById("passwordForm");
    const avatarForm = document.getElementById("avatarForm");
    const profileResponseMessage = document.getElementById("profileResponseMessage");
    const passwordResponseMessage = document.getElementById("passwordResponseMessage");
    const avatarResponseMessage = document.getElementById("avatarResponseMessage");

    profileForm.addEventListener("submit", function(e) {
        e.preventDefault();
        updateProfile(new FormData(profileForm));
    });

    passwordForm.addEventListener("submit", function(e) {
        e.preventDefault();
        updatePassword(new FormData(passwordForm));
    });

    avatarForm.addEventListener("submit", function(e) {
        e.preventDefault();
        updateAvatar(new FormData(avatarForm));
    });

    function updateProfile(formData) {
        fetch("/api/user/update_profile.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            profileResponseMessage.style.display = "block";
            if (data.success) {
                profileResponseMessage.className = "alert alert-success";
                profileResponseMessage.textContent = "Dane zaktualizowane!";
            } else {
                profileResponseMessage.className = "alert alert-danger";
                profileResponseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            profileResponseMessage.style.display = "block";
            profileResponseMessage.className = "alert alert-danger";
            profileResponseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd aktualizacji profilu:", error);
        });
    }

    function updatePassword(formData) {
        fetch("/api/user/update_password.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            passwordResponseMessage.style.display = "block";
            if (data.success) {
                passwordResponseMessage.className = "alert alert-success";
                passwordResponseMessage.textContent = "Hasło zmienione!";
            } else {
                passwordResponseMessage.className = "alert alert-danger";
                passwordResponseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            passwordResponseMessage.style.display = "block";
            passwordResponseMessage.className = "alert alert-danger";
            passwordResponseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd zmiany hasła:", error);
        });
    }

    function updateAvatar(formData) {
        fetch("/api/user/update_avatar.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            avatarResponseMessage.style.display = "block";
            if (data.success) {
                avatarResponseMessage.className = "alert alert-success";
                avatarResponseMessage.textContent = "Zdjęcie profilowe zaktualizowane!";
                location.reload();
            } else {
                avatarResponseMessage.className = "alert alert-danger";
                avatarResponseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            avatarResponseMessage.style.display = "block";
            avatarResponseMessage.className = "alert alert-danger";
            avatarResponseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd aktualizacji awatara:", error);
        });
    }

    function deleteAvatar() {
        if (!confirm("Czy na pewno chcesz usunąć zdjęcie profilowe?")) return;

        fetch("/api/user/delete_avatar.php", { method: "POST" })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Zdjęcie profilowe usunięte!");
                location.reload();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => console.error("Błąd usuwania awatara:", error));
    }

    function previewAvatar(event) {
        const reader = new FileReader();
        reader.onload = function() {
            const output = document.getElementById('profileAvatar');
            output.src = reader.result;
        };
        reader.readAsDataURL(event.target.files[0]);
    }
});
</script>
=== public/views/user/dashboard.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['user_id'])) {
    header("Location: /login.php");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Panel Użytkownika
|--------------------------------------------------------------------------
| Ten plik jest centralnym miejscem zarządzania kontem użytkownika. Wyświetla
| podsumowanie aktywności oraz umożliwia przełączanie między sekcjami dashboardu.
|
| Ścieżka: App/Views/user/dashboard.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne ładowanie sekcji)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane użytkownika)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania sekcji)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Panel Użytkownika</h1>

<div class="user-dashboard-container">
    <div class="row">
        <!-- Podsumowanie aktywności -->
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Twoje Rezerwacje</h4>
                    <p id="totalBookings" class="display-6">0</p>
                    <a href="#bookings/view" class="dashboard-link">Zarządzaj rezerwacjami</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Historia Płatności</h4>
                    <p id="totalPayments" class="display-6">0 PLN</p>
                    <a href="#payments/history" class="dashboard-link">Zobacz płatności</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body text-center">
                    <h4>Twoje Dokumenty</h4>
                    <p id="totalDocuments" class="display-6">0</p>
                    <a href="#documents/user_documents" class="dashboard-link">Przeglądaj dokumenty</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Ostatnie powiadomienia -->
    <h3 class="mt-4">Ostatnie Powiadomienia</h3>
    <ul id="notificationList" class="list-group">
        <!-- Powiadomienia ładowane dynamicznie -->
    </ul>
    <div id="noNotificationsMessage" class="alert alert-warning mt-3" style="display:none;">Brak nowych powiadomień.</div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    function loadDashboardData() {
        fetch("/api/user/dashboard_summary.php")
            .then(response => response.json())
            .then(data => {
                document.getElementById("totalBookings").textContent = data.totalBookings || 0;
                document.getElementById("totalPayments").textContent = data.totalPayments + " PLN" || "0 PLN";
                document.getElementById("totalDocuments").textContent = data.totalDocuments || 0;

                const notificationList = document.getElementById("notificationList");
                const noNotificationsMessage = document.getElementById("noNotificationsMessage");
                notificationList.innerHTML = "";
                if (data.notifications.length > 0) {
                    data.notifications.forEach(notification => {
                        notificationList.innerHTML += `<li class="list-group-item">${notification.message}</li>`;
                    });
                    noNotificationsMessage.style.display = "none";
                } else {
                    noNotificationsMessage.style.display = "block";
                }
            })
            .catch(error => console.error("Błąd ładowania danych użytkownika:", error));
    }

    loadDashboardData();
});
</script>
=== public/views/user/notifications.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['user_id'])) {
    header("Location: /login.php");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Powiadomienia Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie powiadomień, oznaczanie ich
| jako przeczytane oraz usuwanie.
|
| Ścieżka: App/Views/user/notifications.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane powiadomień)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania i aktualizacji powiadomień)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Powiadomienia</h1>

<div class="user-notifications-container">
    <ul id="notificationList" class="list-group">
        <!-- Powiadomienia ładowane dynamicznie -->
    </ul>
    <div id="noNotificationsMessage" class="alert alert-warning mt-3" style="display:none;">Brak nowych powiadomień.</div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    function loadNotifications() {
        fetch("/api/user/get_notifications.php")
            .then(response => response.json())
            .then(data => {
                const notificationList = document.getElementById("notificationList");
                const noNotificationsMessage = document.getElementById("noNotificationsMessage");
                notificationList.innerHTML = "";
                
                if (data.length > 0) {
                    data.forEach(notification => {
                        notificationList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center ${notification.is_read ? '' : 'list-group-item-warning'}">
                                <span onclick="markAsRead(${notification.id}, this)">${notification.message}</span>
                                <div>
                                    <button class="btn btn-sm btn-danger" onclick="deleteNotification(${notification.id})">Usuń</button>
                                </div>
                            </li>
                        `;
                    });
                    noNotificationsMessage.style.display = "none";
                } else {
                    noNotificationsMessage.style.display = "block";
                }
            })
            .catch(error => console.error("Błąd ładowania powiadomień:", error));
    }

    function markAsRead(notificationId, element) {
        fetch(`/api/user/mark_notification_read.php?id=${notificationId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    element.parentElement.classList.remove('list-group-item-warning');
                } else {
                    alert("Błąd: " + data.error);
                }
            })
            .catch(error => console.error("Błąd oznaczania powiadomienia:", error));
    }

    function deleteNotification(notificationId) {
        if (!confirm("Czy na pewno chcesz usunąć to powiadomienie?")) return;

        fetch(`/api/user/delete_notification.php?id=${notificationId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadNotifications();
                } else {
                    alert("Błąd: " + data.error);
                }
            })
            .catch(error => console.error("Błąd usuwania powiadomienia:", error));
    }

    loadNotifications();
});
</script>
=== public/views/user/documents.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

<h1 class="text-center">Zarządzanie Dokumentami</h1>

<div class="documents-container">
    <form id="documentUploadForm" class="mt-3">
        <?= csrf_field() ?>
        <input type="file" name="document" class="form-control">
        <button type="submit" class="btn btn-primary mt-2">Prześlij Dokument</button>
    </form>

    <ul id="documentList" class="list-group mt-3">
        <!-- Dokumenty będą ładowane dynamicznie -->
    </ul>
</div>

<script src="/js/documents.js"></script>
=== public/views/user/reports.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';
if (!isset($_SESSION['user_id'])) {
    header("Location: /login.php");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Raporty Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi generowanie raportów dotyczących rezerwacji,
| płatności i aktywności w systemie. Raporty mogą być eksportowane do CSV, PDF, JSON.
|
| Ścieżka: App/Views/user/reports.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne generowanie raportów)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane do raportów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego generowania raportów)
| - Chart.js (wizualizacja raportów)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Raporty</h1>

<div class="user-reports-container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow">
                <div class="card-body">
                    <h4>Generowanie Raportów</h4>
                    <form id="reportForm">
                        <?= csrf_field() ?>

                        <div class="mb-3">
                            <label for="reportType" class="form-label">Typ raportu</label>
                            <select class="form-select" id="reportType" name="reportType" required>
                                <option value="" disabled selected>Wybierz typ raportu</option>
                                <option value="bookings">Rezerwacje</option>
                                <option value="payments">Płatności</option>
                                <option value="activity">Aktywność użytkownika</option>
                            </select>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="startDate" class="form-label">Data początkowa</label>
                                <input type="date" class="form-control" id="startDate" name="startDate" required>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="endDate" class="form-label">Data końcowa</label>
                                <input type="date" class="form-control" id="endDate" name="endDate" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="format" class="form-label">Format raportu</label>
                            <select class="form-select" id="format" name="format" required>
                                <option value="csv">CSV</option>
                                <option value="pdf">PDF</option>
                                <option value="json">JSON</option>
                            </select>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Generuj raport</button>
                    </form>

                    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
                    <div id="noResultsMessage" class="alert alert-warning mt-3" style="display:none;">Brak wyników dla wybranych kryteriów.</div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h4>Podgląd raportu</h4>
        <canvas id="reportChart"></canvas>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const reportForm = document.getElementById("reportForm");
    const responseMessage = document.getElementById("responseMessage");
    const noResultsMessage = document.getElementById("noResultsMessage");

    reportForm.addEventListener("submit", function(e) {
        e.preventDefault();
        generateReport(new FormData(reportForm));
    });

    function generateReport(formData) {
        let url = "/api/user/reports.php";

        fetch(url, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Raport wygenerowany pomyślnie! Pobierz go tutaj: " + data.download_link;
                renderChart(data.chartData);
                noResultsMessage.style.display = "none";
            } else if (data.noResults) {
                noResultsMessage.style.display = "block";
                responseMessage.style.display = "none";
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
                noResultsMessage.style.display = "none";
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd generowania raportu:", error);
            noResultsMessage.style.display = "none";
        });
    }

    function renderChart(chartData) {
        const ctx = document.getElementById("reportChart").getContext("2d");
        new Chart(ctx, {
            type: "bar",
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: "Liczba zgłoszeń",
                    data: chartData.values,
                    backgroundColor: "rgba(54, 162, 235, 0.6)"
                }]
            }
        });
    }
});
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
=== public/views/bookings/view.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Lista Rezerwacji Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie swoich rezerwacji, filtrowanie
| ich oraz sprawdzanie statusu każdej rezerwacji.
|
| Ścieżka: App/Views/bookings/view.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne ładowanie rezerwacji)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane o rezerwacjach)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania rezerwacji)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Moje Rezerwacje</h1>

<div class="bookings-container">
    <!-- Filtry rezerwacji -->
    <form id="bookingFilterForm" class="row mt-4">
        <?= csrf_field() ?>
        <div class="col-md-4">
            <select class="form-control" name="status">
                <option value="">Wybierz status</option>
                <option value="active">Aktywna</option>
                <option value="completed">Zakończona</option>
                <option value="cancelled">Anulowana</option>
            </select>
        </div>
        <div class="col-md-4">
            <input type="date" class="form-control" name="start_date" placeholder="Data początkowa">
        </div>
        <div class="col-md-4 text-end">
            <button type="submit" class="btn btn-primary">Filtruj</button>
        </div>
    </form>

    <!-- Tabela rezerwacji -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Pojazd</th>
                <th>Data rozpoczęcia</th>
                <th>Data zakończenia</th>
                <th>Status</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="bookingList">
            <!-- Dane będą ładowane dynamicznie -->
        </tbody>
    </table>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const filterForm = document.getElementById("bookingFilterForm");

    filterForm.addEventListener("submit", function(e) {
        e.preventDefault();
        fetchBookings(new FormData(filterForm));
    });

    function fetchBookings(formData = null) {
        let url = "/api/user/bookings.php";
        if (formData) {
            url += "?" + new URLSearchParams(formData).toString();
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const bookingTable = document.getElementById("bookingList");
                bookingTable.innerHTML = "";

                if (data.length === 0) {
                    bookingTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak rezerwacji spełniających kryteria.</td></tr>`;
                } else {
                    data.forEach(booking => {
                        let statusClass = "";
                        switch (booking.status) {
                            case "active":
                                statusClass = "text-success";
                                break;
                            case "completed":
                                statusClass = "text-secondary";
                                break;
                            case "cancelled":
                                statusClass = "text-danger";
                                break;
                        }
                        bookingTable.innerHTML += `
                            <tr>
                                <td>${booking.id}</td>
                                <td>${booking.vehicle}</td>
                                <td>${booking.start_date}</td>
                                <td>${booking.end_date}</td>
                                <td class="${statusClass}">${booking.status}</td>
                                <td>
                                    <button class="btn btn-info btn-sm" onclick="viewBooking(${booking.id})">Podgląd</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd pobierania rezerwacji:", error));
    }

    function viewBooking(bookingId) {
        fetch(`/api/user/booking_details.php?id=${bookingId}`)
            .then(response => response.json())
            .then(data => {
                alert(`Szczegóły rezerwacji:\n\nPojazd: ${data.vehicle}\nOd: ${data.start_date}\nDo: ${data.end_date}\nStatus: ${data.status}`);
            })
            .catch(error => console.error("Błąd pobierania szczegółów rezerwacji:", error));
    }

    fetchBookings();
});
</script>
=== public/views/bookings/create.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Tworzenie Nowej Rezerwacji
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi dokonanie nowej rezerwacji pojazdu.
| Sprawdza dostępność pojazdów i umożliwia wybór metody płatności.
|
| Ścieżka: App/Views/bookings/create.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, dynamiczne sprawdzanie dostępności)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane pojazdów, dostępność, rezerwacje)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego sprawdzania dostępności)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Nowa Rezerwacja</h1>

<div class="bookings-create-container">
    <form id="bookingForm">
        <?= csrf_field() ?>

        <!-- Wybór pojazdu -->
        <div class="mb-3">
            <label for="vehicle" class="form-label">Wybierz pojazd</label>
            <select class="form-select" id="vehicle" name="vehicle" required>
                <option value="" disabled selected>Wybierz pojazd</option>
                <?php foreach ($vehicles as $vehicle): ?>
                    <option value="<?= esc($vehicle['id']) ?>"><?= esc($vehicle['name']) ?> – <?= esc($vehicle['price']) ?> PLN/dzień</option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- Wybór daty rezerwacji -->
        <div class="row">
            <div class="col-md-6 col-12 mb-3">
                <label for="start_date" class="form-label">Data rozpoczęcia</label>
                <input type="date" class="form-control" id="start_date" name="start_date" required>
            </div>
            <div class="col-md-6 col-12 mb-3">
                <label for="end_date" class="form-label">Data zakończenia</label>
                <input type="date" class="form-control" id="end_date" name="end_date" required>
            </div>
        </div>

        <!-- Metoda płatności -->
        <div class="mb-3">
            <label for="payment_method" class="form-label">Metoda płatności</label>
            <select class="form-select" id="payment_method" name="payment_method" required>
                <option value="card">Karta kredytowa</option>
                <option value="paypal">PayPal</option>
                <option value="transfer">Przelew bankowy</option>
            </select>
        </div>

        <button type="submit" class="btn btn-primary w-100">Zarezerwuj</button>
    </form>

    <div id="responseMessage" class="alert mt-3" style="display:none;"></div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const bookingForm = document.getElementById("bookingForm");
    const responseMessage = document.getElementById("responseMessage");
    const vehicleSelect = document.getElementById("vehicle");
    const startDateInput = document.getElementById("start_date");
    const endDateInput = document.getElementById("end_date");

    // Sprawdzanie dostępności pojazdu
    vehicleSelect.addEventListener("change", function() {
        checkAvailability(vehicleSelect.value);
    });

    bookingForm.addEventListener("submit", function(e) {
        e.preventDefault();
        if (validateForm()) {
            submitBooking(new FormData(bookingForm));
        }
    });

    function checkAvailability(vehicleId) {
        if (!vehicleId) return;
        fetch(`/api/bookings/check_availability.php?vehicle_id=${vehicleId}`)
            .then(response => response.json())
            .then(data => {
                if (!data.available) {
                    alert("Wybrany pojazd jest niedostępny w wybranym terminie.");
                    vehicleSelect.value = "";
                }
            })
            .catch(error => console.error("Błąd sprawdzania dostępności:", error));
    }

    function validateForm() {
        const startDate = new Date(startDateInput.value);
        const endDate = new Date(endDateInput.value);
        if (startDate >= endDate) {
            alert("Data zakończenia musi być późniejsza niż data rozpoczęcia.");
            return false;
        }
        return true;
    }

    function submitBooking(formData) {
        fetch("/api/bookings/create.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            responseMessage.style.display = "block";
            if (data.success) {
                responseMessage.className = "alert alert-success";
                responseMessage.textContent = "Rezerwacja została pomyślnie dokonana!";
                setTimeout(() => window.location.href = "/dashboard", 2000);
            } else {
                responseMessage.className = "alert alert-danger";
                responseMessage.textContent = "Błąd: " + data.error;
            }
        })
        .catch(error => {
            responseMessage.style.display = "block";
            responseMessage.className = "alert alert-danger";
            responseMessage.textContent = "Błąd połączenia z serwerem.";
            console.error("Błąd rezerwacji:", error);
        });
    }
});
</script>
=== public/views/home.php ===
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CarFuse - Strona Główna</title>
    <link rel="stylesheet" href="/css/style.css">
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            fetch('/api/views/home.php')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('content').innerHTML = data.content;
                })
                .catch(error => {
                    document.getElementById('content').innerHTML = '<p>Error loading content. Please try again later.</p>';
                    console.error('There was a problem with the fetch operation:', error);
                });
        });
    </script>
</head>
<body>
<?php include __DIR__ . '/layouts/navbar.php'; ?>

<div id="content">
    <!-- Content will be loaded here dynamically -->
</div>

<?php include __DIR__ . '/layouts/footer.php'; ?>
<script src="/js/shared.js"></script>
</body>
</html>
=== public/views/documents/signing_page.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Podpisywanie Dokumentów
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi podpisywanie dokumentów online.
| Podpisane dokumenty są przechowywane w systemie.
|
| Ścieżka: App/Views/documents/signing_page.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, podpis elektroniczny)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane dokumentów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (Canvas API do podpisywania dokumentów)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Podpisywanie Dokumentów</h1>

<div class="documents-sign-container">
    <h3 class="mt-4">Dokumenty do Podpisania</h3>
    <ul id="signDocumentList" class="list-group">
        <!-- Dokumenty ładowane dynamicznie -->
    </ul>

    <!-- Podgląd dokumentu i podpis elektroniczny -->
    <div id="signingArea" class="mt-4" style="display:none;">
        <h4>Podpisz Dokument</h4>
        <iframe id="documentPreview" style="width:100%; height:400px; border:1px solid #ccc;" onload="resizeIframe(this)"></iframe>
        
        <canvas id="signaturePad" class="border mt-3" style="width:100%; height:200px;" onmousedown="startDrawing(event)" onmouseup="stopDrawing()" onmousemove="draw(event)" ontouchstart="startDrawing(event)" ontouchend="stopDrawing()" ontouchmove="draw(event)"></canvas>
        <button class="btn btn-secondary mt-2" onclick="clearSignature()">Wyczyść</button>
        <button class="btn btn-primary mt-2" onclick="submitSignature()">Podpisz</button>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    function loadSignDocuments() {
        fetch("/api/user/get_signable_documents.php")
            .then(response => response.json())
            .then(data => {
                const documentList = document.getElementById("signDocumentList");
                documentList.innerHTML = "";

                if (data.length > 0) {
                    data.forEach(doc => {
                        documentList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${doc.name}</span>
                                <button class="btn btn-sm btn-success" onclick="openSigning('${doc.file_url}', ${doc.id})">Podpisz</button>
                            </li>
                        `;
                    });
                } else {
                    documentList.innerHTML = `<li class="list-group-item text-muted">Brak dokumentów do podpisania</li>`;
                }
            })
            .catch(error => {
                console.error("Błąd ładowania dokumentów:", error);
                alert("Błąd ładowania dokumentów.");
            });
    }

    function openSigning(fileUrl, documentId) {
        document.getElementById("signingArea").style.display = "block";
        document.getElementById("documentPreview").src = fileUrl;
        document.getElementById("signaturePad").dataset.documentId = documentId;
    }

    function clearSignature() {
        const canvas = document.getElementById("signaturePad");
        const ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    function submitSignature() {
        const canvas = document.getElementById("signaturePad");
        const signature = canvas.toDataURL();
        const documentId = canvas.dataset.documentId;

        fetch("/api/user/sign_document.php", {
            method: "POST",
            body: JSON.stringify({ documentId, signature }),
            headers: { "Content-Type": "application/json" }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Dokument został podpisany!");
                loadSignDocuments();
                document.getElementById("signingArea").style.display = "none";
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => {
            console.error("Błąd podpisywania dokumentu:", error);
            alert("Błąd podpisywania dokumentu.");
        });
    }

    loadSignDocuments();
});

function resizeIframe(iframe) {
    iframe.style.height = iframe.contentWindow.document.documentElement.scrollHeight + 'px';
}

let isDrawing = false;
let lastX = 0;
let lastY = 0;
const canvas = document.getElementById("signaturePad");
const ctx = canvas.getContext("2d");

function startDrawing(event) {
    isDrawing = true;
    [lastX, lastY] = getCoordinates(event);
}

function stopDrawing() {
    isDrawing = false;
    ctx.beginPath();
}

function draw(event) {
    if (!isDrawing) return;
    const [x, y] = getCoordinates(event);
    ctx.lineWidth = 2;
    ctx.lineCap = "round";
    ctx.strokeStyle = "#000";
    ctx.lineTo(x, y);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(x, y);
    [lastX, lastY] = [x, y];
}

function getCoordinates(event) {
    const rect = canvas.getBoundingClientRect();
    const x = (event.clientX || event.touches[0].clientX) - rect.left;
    const y = (event.clientY || event.touches[0].clientY) - rect.top;
    return [x, y];
}
</script>
=== public/views/documents/user_documents.php ===
<?php
// Sprawdzenie sesji użytkownika

if (!isset($_SESSION['user_id'])) {
    header("Location: /login");
    exit();
}
?>

/*
|--------------------------------------------------------------------------
| Dokumenty Użytkownika
|--------------------------------------------------------------------------
| Ten plik umożliwia użytkownikowi przeglądanie dokumentów, ich przesyłanie
| oraz usuwanie. Pliki mogą być np. umowami, fakturami czy dokumentami tożsamości.
|
| Ścieżka: App/Views/documents/user_documents.php
|
| Zależy od:
| - JavaScript: /js/dashboard.js (obsługa AJAX, przesyłanie, usuwanie)
| - CSS: /css/dashboard.css (stylizacja interfejsu użytkownika)
| - PHP: csrf_field() (zabezpieczenie formularzy)
| - MySQL (dane dokumentów)
|
| Technologie:
| - PHP 8+ (backend)
| - MySQL (baza danych)
| - JavaScript (AJAX do dynamicznego ładowania i usuwania plików)
| - HTML, CSS (interfejs)
*/

<h1 class="text-center">Moje Dokumenty</h1>

<div class="documents-container">
    <!-- Przesyłanie nowego dokumentu -->
    <form id="uploadDocumentForm" enctype="multipart/form-data" class="mb-4">
        <?= csrf_field() ?>
        <div class="mb-3">
            <label for="document" class="form-label">Prześlij dokument (PDF, JPG, PNG)</label>
            <input type="file" class="form-control" id="document" name="document" accept=".pdf, .jpg, .jpeg, .png" required>
        </div>
        <button type="submit" class="btn btn-success">Prześlij</button>
    </form>

    <!-- Lista dokumentów -->
    <h3 class="mt-4">Twoje Dokumenty</h3>
    <ul id="documentList" class="list-group">
        <!-- Dokumenty ładowane dynamicznie -->
    </ul>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const uploadForm = document.getElementById("uploadDocumentForm");

    uploadForm.addEventListener("submit", function(e) {
        e.preventDefault();
        const fileInput = document.getElementById("document");
        const file = fileInput.files[0];
        if (file && (file.type === "application/pdf" || file.type.startsWith("image/"))) {
            uploadDocument(new FormData(uploadForm));
        } else {
            alert("Nieprawidłowy typ pliku. Dozwolone formaty: PDF, JPG, PNG.");
        }
    });

    function loadDocuments() {
        fetch("/api/user/get_documents.php")
            .then(response => response.json())
            .then(data => {
                const documentList = document.getElementById("documentList");
                documentList.innerHTML = "";

                if (data.length > 0) {
                    data.forEach(doc => {
                        documentList.innerHTML += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <a href="${doc.file_url}" target="_blank">${doc.name}</a>
                                <button class="btn btn-sm btn-danger" onclick="deleteDocument(${doc.id})">Usuń</button>
                            </li>
                        `;
                    });
                } else {
                    documentList.innerHTML = `<li class="list-group-item text-muted">Brak dokumentów</li>`;
                }
            })
            .catch(error => {
                console.error("Błąd ładowania dokumentów:", error);
                alert("Błąd ładowania dokumentów.");
            });
    }

    function uploadDocument(formData) {
        fetch("/api/user/upload_document.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Dokument przesłany pomyślnie!");
                loadDocuments();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => {
            console.error("Błąd przesyłania dokumentu:", error);
            alert("Błąd przesyłania dokumentu.");
        });
    }

    function deleteDocument(documentId) {
        if (!confirm("Czy na pewno chcesz usunąć ten dokument?")) return;

        fetch(`/api/user/delete_document.php?id=${documentId}`, { method: "POST" })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Dokument usunięty!");
                loadDocuments();
            } else {
                alert("Błąd: " + data.error);
            }
        })
        .catch(error => {
            console.error("Błąd usuwania dokumentu:", error);
            alert("Błąd usuwania dokumentu.");
        });
    }

    loadDocuments();
});
</script>
=== public/views/dashboard/dashboard.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';
$userRole = $_SESSION['user_role'] ?? 'user'; // Assume 'user' role if not set

$module = $_GET['module'] ?? 'home';
$view = __DIR__ . "/dashboard_modules/{$module}.php";

if (!file_exists($view)) {
    $view = __DIR__ . "/dashboard_modules/404.php"; // Load 404 if module doesn't exist
}

// Removed any redundant <script> tags for main.js to prevent double loading

include __DIR__ . '/../layouts/main.php';
?>
=== public/views/dashboard/modules/admin/payments/dashboard.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="payments-dashboard">
    <?php include __DIR__ . '/../../../admin/payments/dashboard.php'; ?>
</div>
=== public/views/dashboard/modules/admin/payments/transactions.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="transactions-container">
    <?php include __DIR__ . '/../../../admin/transactions.php'; ?>
</div>
=== public/views/dashboard/modules/admin/payments/refunds.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="refunds-container">
    <?php include __DIR__ . '/../../../admin/refunds.php'; ?>
</div>
=== public/views/dashboard/modules/admin/dashboard.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="dashboard-overview">
    <?php include __DIR__ . '/../../admin/dashboard.php'; ?>
</div>
=== public/views/dashboard/modules/admin/users.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="users-container">
    <?php include __DIR__ . '/../../admin/users.php'; ?>
</div>
=== public/views/dashboard/modules/admin/audit_logs.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="audit-logs-container">
    <?php include __DIR__ . '/../../admin/audit_logs.php'; ?>
</div>
=== public/views/dashboard/modules/admin/logs.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="logs-container">
    <?php include __DIR__ . '/../../admin/logs.php'; ?>
</div>
=== public/views/dashboard/modules/admin/documents.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="documents-container">
    <?php include __DIR__ . '/../../admin/documents.php'; ?>
</div>
=== public/views/dashboard/modules/admin/reports.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="reports-container">
    <?php include __DIR__ . '/../../admin/reports.php'; ?>
</div>
=== public/views/dashboard/modules/admin/settings.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn() || getUserRole() !== 'admin') {
    header("Location: /admin/login");
    exit();
}
?>

<div class="settings-container">
    <?php include __DIR__ . '/../../admin/settings.php'; ?>
</div>
=== public/views/dashboard/modules/user/profile.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="profile-container">
    <?php include __DIR__ . '/../../user/profile.php'; ?>
</div>
=== public/views/dashboard/modules/user/documentd.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="documents-container">
    <?php include __DIR__ . '/../../user/documents.php'; ?>
</div>
=== public/views/dashboard/modules/user/overview.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="dashboard-overview">
    <?php include __DIR__ . '/../../user/dashboard.php'; ?>
</div>
=== public/views/dashboard/modules/user/bookings/view.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="bookings-container">
    <?php include __DIR__ . '/../../user/bookings.php'; ?>
</div>
=== public/views/dashboard/modules/user/notifications.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="notifications-container">
    <?php include __DIR__ . '/../../user/notifications.php'; ?>
</div>
=== public/views/dashboard/modules/user/settings.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="settings-container">
    <?php include __DIR__ . '/../../user/settings.php'; ?>
</div>
=== public/views/dashboard/modules/user/payments.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="payments-container">
    <?php include __DIR__ . '/../../user/payments.php'; ?>
</div>
=== public/views/dashboard/modules/shared/charts.php ===
<?php
require_once __DIR__ . '/../../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="charts-container">
    <div class="row">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="text-center">Trendy Rezerwacji</h5>
                    <canvas id="bookingTrends"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="text-center">Trendy Przychodów</h5>
                    <canvas id="revenueTrends"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="/js/shared.js"></script>
=== public/views/dashboard/modules/shared/tables.php ===
<?php
require_once __DIR__ . '/../../helpers/SecurityHelper.php';

if (!isUserLoggedIn()) {
    header("Location: /login");
    exit();
}
?>

<div class="tables-container">
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nazwa</th>
                <th>Status</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody id="sharedTableData">
            <!-- Dynamiczne ładowanie danych -->
        </tbody>
    </table>
</div>

<script src="/js/tables.js"></script>
=== public/views/dashboard/modules/shared/modals.php ===
<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Potwierdzenie</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz wykonać tę akcję?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="confirmAction">Tak</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Anuluj</button>
            </div>
        </div>
    </div>
</div>

<script src="/js/modals.js"></script>
=== public/login.php ===
<?php
session_start();

if ($_SERVER["REQUEST_METHOD"] === "POST") {
    $username = $_POST["username"] ?? "";
    $password = $_POST["password"] ?? "";

    // Simulated authentication check
    if ($username === "admin" && $password === "password") {
        $_SESSION["user_id"] = 1;
        $_SESSION["username"] = "admin";
        header("Location: /dashboard");
        exit();
    } else {
        $error = "Invalid credentials!";
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="/css/shared.css">
</head>
<body>
    <h1>Login</h1>

    <?php if (isset($error)) : ?>
        <p style="color: red;"><?= htmlspecialchars($error) ?></p>
    <?php endif; ?>

    <form method="POST">
        <label>Username:</label>
        <input type="text" name="username" required>
        
        <label>Password:</label>
        <input type="password" name="password" required>
        
        <button type="submit">Login</button>
    </form>

    <p><a href="/">Back to Home</a></p>
</body>
</html>
=== public/js/main.js ===
import { apiFetch } from './api.js';

document.addEventListener("DOMContentLoaded", function () {
    console.log("Main.js Loaded");
    // Ensure this runs only once
    if (window.mainJsInitialized) return;
    window.mainJsInitialized = true;

    // Run script only on dashboard pages
    if (!window.location.pathname.includes("/dashboard")) {
        console.log("main.js: Not on dashboard. Exiting.");
        return;
    }

    console.log("Main.js loaded successfully.");

    // Detect if we're on the dashboard page
    const dashboardView = document.getElementById("dashboard-view");
    if (!dashboardView) {
        console.log("Dashboard view not found. main.js will not run on homepage.");
        return;
    }

    // Prevent execution if not on dashboard
    if (!document.querySelector(".dashboard-container")) {
        return;
    }

    async function fetchData(endpoint) {
        try {
            const response = await fetch(endpoint, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('apiToken')}`,
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Failed to fetch data:', error);
        }
    }

    // Load default dashboard module with session credentials
    apiFetch("/dashboard/modules/user/overview.php", {
        credentials: "include"
    })
    .then(response => response.text())
    .then(data => {
        dashboardView.innerHTML = data;
    })
    .catch(error => console.error("main.js fetch error:", error));

    document.querySelectorAll(".dashboard-link").forEach(link => {
        link.addEventListener("click", function(e) {
            e.preventDefault();
            let targetView = this.getAttribute("href");
            apiFetch(targetView)
                .then(r => r.text())
                .then(data => {
                    document.getElementById("dashboard-view").innerHTML = data;
                })
                .catch(err => console.error("Dashboard link error:", err));
        });
    });
});
=== public/js/ajax.js ===
class Ajax {
    constructor() {
        this.baseUrl = '/api';
        this.token = localStorage.getItem('auth_token') || null;
    }

    /**
     * Stores the authentication token for future requests.
     */
    setToken(token) {
        this.token = token;
        localStorage.setItem('auth_token', token);
    }

    /**
     * Makes an API request with automatic retry and session handling.
     */
    async request(endpoint, method = 'GET', data = null, retry = true) {
        const url = `${this.baseUrl}${endpoint}`;
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': this.token ? `Bearer ${this.token}` : ''
        };

        const options = { method, headers };

        if (data) {
            options.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, options);

            if (response.status === 401 && retry) {
                // Attempt token refresh before retrying request
                const refreshed = await this.refreshToken();
                if (refreshed) {
                    return this.request(endpoint, method, data, false);
                }
                throw new Error('Unauthorized: Session expired.');
            }

            if (!response.ok) {
                throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Błąd API:', error);
            throw error;
        }
    }

    /**
     * Fetches data using GET method.
     */
    get(endpoint) {
        return this.request(endpoint, 'GET');
    }

    /**
     * Sends data using POST method.
     */
    post(endpoint, data) {
        return this.request(endpoint, 'POST', data);
    }

    /**
     * Updates data using PUT method.
     */
    put(endpoint, data) {
        return this.request(endpoint, 'PUT', data);
    }

    /**
     * Deletes a resource using DELETE method.
     */
    delete(endpoint) {
        return this.request(endpoint, 'DELETE');
    }

    /**
     * Attempts to refresh the session token.
     */
    async refreshToken() {
        try {
            const response = await fetch(`${this.baseUrl}/session/refresh`, {
                method: 'POST',
                headers: { 'Authorization': this.token ? `Bearer ${this.token}` : '' }
            });

            if (!response.ok) {
                this.clearToken();
                return false;
            }

            const data = await response.json();
            if (data.success && data.token) {
                this.setToken(data.token);
                return true;
            }

            return false;
        } catch (error) {
            console.error('Błąd odświeżania tokena:', error);
            this.clearToken();
            return false;
        }
    }

    /**
     * Clears stored authentication token.
     */
    clearToken() {
        this.token = null;
        localStorage.removeItem('auth_token');
    }
}

// Ensures global availability
window.ajax = new Ajax();
=== public/js/dashboard.js ===
import ajax from './ajax';
import { showErrorToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    loadDashboardContent();
    setInterval(checkUserActivity, 60000); // Aktualizuj statystyki tylko przy aktywności użytkownika
    window.addEventListener('resize', handleResponsiveUpdates);
});

/**
 * Loads the main dashboard content dynamically.
 */
async function loadDashboardContent() {
    try {
        const response = await ajax.get('/user/overview.php');
        document.getElementById('dashboard-content').innerHTML = response;
        fetchDashboardData();
    } catch (error) {
        showErrorToast('Nie udało się załadować zawartości pulpitu.');
        console.error('Błąd ładowania zawartości pulpitu:', error);
    }
}

/**
 * Fetches dashboard data based on user role.
 */
async function fetchDashboardData() {
    const role = getUserRole();
    if (role === 'admin') {
        await fetchAdminStatistics();
    } else {
        await fetchUserStatistics();
    }
}

/**
 * Fetches admin-specific statistics for the dashboard.
 */
async function fetchAdminStatistics() {
    try {
        showLoadingIndicators();
        const [totalUsers, totalBookings, totalRevenue] = await Promise.all([
            ajax.get('/statistics/totalUsers'),
            ajax.get('/statistics/totalBookings'),
            ajax.get('/statistics/totalRevenue')
        ]);
        updateWidgets({
            totalUsers: totalUsers.data,
            totalBookings: totalBookings.data,
            totalRevenue: totalRevenue.data
        });
    } catch (error) {
        showErrorToast('Nie udało się pobrać statystyk administratora.');
        console.error('Błąd pobierania statystyk administratora:', error);
    } finally {
        hideLoadingIndicators();
    }
}

/**
 * Fetches user-specific statistics for the dashboard.
 */
async function fetchUserStatistics() {
    try {
        showLoadingIndicators();
        const response = await ajax.get('/statistics/user');
        updateWidgets(response.data);
    } catch (error) {
        showErrorToast('Nie udało się pobrać statystyk użytkownika.');
        console.error('Błąd pobierania statystyk użytkownika:', error);
    } finally {
        hideLoadingIndicators();
    }
}

/**
 * Updates dashboard widgets based on API data.
 */
function updateWidgets(data) {
    updateWidget('total-users', data.totalUsers);
    updateWidget('active-sessions', data.activeSessions);
    updateWidget('new-bookings', data.newBookings);
    updateWidget('total-revenue', formatCurrency(data.totalRevenue));
}

/**
 * Updates a single widget if it exists.
 */
function updateWidget(widgetId, value) {
    const widget = document.getElementById(widgetId);
    if (widget) {
        widget.innerText = value ?? 'Brak danych';
    }
}

/**
 * Handles dynamic UI responsiveness updates.
 */
function handleResponsiveUpdates() {
    console.log('Zaktualizowano UI na podstawie zmiany rozmiaru ekranu.');
    // Można dodać dodatkowe funkcje do aktualizacji widżetów lub układu
}

/**
 * Formats numbers into readable currency format.
 */
function formatCurrency(amount) {
    return new Intl.NumberFormat('pl-PL', { style: 'currency', currency: 'PLN' }).format(amount);
}

/**
 * Checks user activity and updates statistics only if the tab is active.
 */
function checkUserActivity() {
    if (document.visibilityState === 'visible') {
        fetchDashboardData();
    }
}

/**
 * Shows loading indicators for widgets.
 */
function showLoadingIndicators() {
    const widgets = document.querySelectorAll('.widget');
    widgets.forEach(widget => {
        widget.classList.add('loading');
    });
}

/**
 * Hides loading indicators for widgets.
 */
function hideLoadingIndicators() {
    const widgets = document.querySelectorAll('.widget');
    widgets.forEach(widget => {
        widget.classList.remove('loading');
    });
}

/**
 * Mock function to get user role.
 */
function getUserRole() {
    // Replace with actual implementation
    return 'user'; // or 'admin'
}
=== public/js/shared copy.js ===
// Ensure this script only runs once
if (!window.sharedJsInitialized) {
    window.sharedJsInitialized = true;
    console.log("Shared.js: homepage initialization started.");

    // Workaround for importing dependencies
    function loadScript(src, callback) {
        const script = document.createElement("script");
        script.src = src;
        script.onload = callback;
        script.onerror = function () {
            console.error(`Failed to load script: ${src}`);
        };
        document.head.appendChild(script);
    }

    // Load api.js dynamically if not already loaded
    if (!window.apiFetch) {
        loadScript("js/api.js", function () {
            console.log("api.js loaded successfully.");
            main(); // Call the main function after loading dependencies
        });
    } else {
        main();
    }

    function main() {
        console.log("Shared.js: running initialization.");

        // Utility function for checking elements
        function getElement(selector, context = document) {
            const element = context.querySelector(selector);
            if (!element) {
                console.warn(`Element not found: ${selector}`);
                return null;
            }
            return element;
        }

        // Improved API call with proper authentication and logging
        async function apiCall(endpoint, options = {}) {
            const token = localStorage.getItem("authToken");
            if (!token) {
                console.error("API call failed: Missing authentication token.");
                alert("Authentication error: Please log in.");
                window.location.href = '/auth/login';
                return null;
            }
            options.headers = {
                ...options.headers,
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            };
            try {
                const response = await fetch(endpoint, options);
                if (response.status === 401) {
                    console.error("API call failed: Unauthorized (401).");
                    await refreshToken();
                    return apiCall(endpoint, options); // Retry the API call
                }
                if (response.status === 403) {
                    console.error("API call failed: Forbidden (403).");
                    alert("Authentication error: Access forbidden.");
                    return null;
                }
                if (!response.ok) {
                    const error = await response.json();
                    console.error("API Error:", error);
                    throw error;
                }
                return await response.json();
            } catch (error) {
                console.error("API call failed:", error);
                return null;
            }
        }

        // Function to refresh JWT token
        async function refreshToken() {
            const refreshToken = localStorage.getItem("refreshToken");
            if (!refreshToken) {
                console.error("Refresh token missing.");
                alert("Session expired. Please log in again.");
                window.location.href = '/auth/login';
                return;
            }
            try {
                const response = await fetch('api/auth/refresh', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ refresh_token: refreshToken })
                });
                if (!response.ok) {
                    throw new Error('Failed to refresh token');
                }
                const data = await response.json();
                localStorage.setItem("authToken", data.access_token);
                console.log("Token refreshed successfully.");
            } catch (error) {
                console.error("Token refresh failed:", error);
                alert("Session expired. Please log in again.");
                window.location.href = '/auth/login';
            }
        }

        // Session-based initialization
        apiCall("api/shared/initSession.php")
            .then((data) => {
                if (data) {
                    console.log("Session initialized successfully for homepage.");
                }
            })
            .catch((error) => console.error("Session init error:", error));

        // Navbar toggle & CTA scrolling
        document.addEventListener("click", function (e) {
            // Navbar toggle handling
            if (e.target.matches("#navbarToggle, #navbarToggle *")) {
                const navbar = getElement("#navbarSupportedContent");
                if (navbar) {
                    navbar.classList.toggle("show");
                    console.log("Navbar toggled successfully.");
                }
            }

            // Register button handling
            if (e.target.matches("#register-btn")) {
                e.preventDefault();
                const href = e.target.getAttribute("href");
                const target = href ? getElement(href) : null;
                if (target) {
                    target.scrollIntoView({ behavior: "smooth" });
                    console.log("Smooth scroll triggered on homepage CTA.");
                }
            }
        });

        console.log("Shared.js: homepage initialization completed.");
    }
}

(function() {
    function isProtectedEndpoint(url) {
        const protectedEndpoints = [
            '/api/profile/update',
            '/api/password/reset/request',
            '/api/password/reset',
            '/api/payments/process',
            '/api/payments/refund',
            '/api/bookings',
            '/api/notifications',
            '/api/admin',
            '/api/documents'
        ];
        return protectedEndpoints.some(endpoint => url.startsWith(endpoint));
    }

    function apiFetch(url, options = {}) {
        if (!options.headers) {
            options.headers = {};
        }

        if (isProtectedEndpoint(url)) {
            const token = localStorage.getItem('token');
            if (token) {
                options.headers['Authorization'] = 'Bearer ' + token;
            } else {
                console.warn('Missing token for protected endpoint:', url);
            }
        }

        return fetch(url, options)
            .then(async response => {
                if (response.status === 401) {
                    console.warn('Unauthorized response. Attempting token refresh...');
                    // ...token refresh logic...
                    // After refresh, retry original request or handle failure
                }
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Request failed [${response.status}]: ${errorText}`);
                }
                return response;
            })
            .catch(error => {
                console.error('API fetch error:', error.message);
                throw error;
            });
    }

    // Expose functions to the global scope
    window.apiFetch = apiFetch;

    // Log successful API script loading
    console.log('Shared API script loaded successfully');
})();
=== public/js/notifications.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

let lastFetchTimestamp = 0;
const FETCH_INTERVAL = 30000; // 30 seconds

document.addEventListener('DOMContentLoaded', function () {
    if (document.visibilityState === 'visible') {
        fetchNotifications();
    }
    document.addEventListener('visibilitychange', handleVisibilityChange);
    document.addEventListener('newEvent', handleNewEvent); // Custom event for new actions
    setInterval(fetchNotifications, FETCH_INTERVAL); // Polling mechanism

    // Event delegation for dynamically loaded notifications
    document.getElementById('notifications-container').addEventListener('click', function (event) {
        if (event.target.classList.contains('mark-as-read')) {
            markAsRead(event.target.dataset.id);
        }
    });
});

/**
 * Handles visibility change events.
 */
function handleVisibilityChange() {
    if (document.visibilityState === 'visible') {
        fetchNotifications();
    }
}

/**
 * Handles new events that require fresh notifications.
 */
function handleNewEvent() {
    fetchNotifications();
}

/**
 * Fetches notifications from the server.
 */
async function fetchNotifications() {
    const now = Date.now();
    if (now - lastFetchTimestamp < FETCH_INTERVAL) return; // Prevent redundant calls

    lastFetchTimestamp = now;
    try {
        const response = await fetch('/api/user/notifications.php');
        if (response.status === 401) {
            showErrorToast('Musisz być zalogowany, aby zobaczyć powiadomienia.');
            return;
        }
        const notifications = await response.json();
        if (notifications.length > 0) {
            displayNotifications(notifications);
        } else {
            displayNoNotificationsMessage();
        }
    } catch (error) {
        console.error('Błąd pobierania powiadomień:', error);
        showErrorToast('Nie udało się pobrać powiadomień.');
    }
}

/**
 * Displays notifications in the UI.
 */
function displayNotifications(notifications) {
    const notificationsContainer = document.getElementById('notifications-container');
    if (!notificationsContainer) return;

    notificationsContainer.innerHTML = '';

    notifications.forEach(notification => {
        const notificationElement = document.createElement('div');
        notificationElement.className = `notification ${notification.read ? 'read' : 'unread'}`;
        notificationElement.innerHTML = `
            <p style="font-weight: ${notification.read ? 'normal' : 'bold'};">${notification.message}</p>
            <button class="mark-as-read" data-id="${notification.id}">Oznacz jako przeczytane</button>
        `;
        notificationsContainer.appendChild(notificationElement);
    });
}

/**
 * Marks a notification as read.
 */
async function markAsRead(notificationId) {
    try {
        const response = await fetch(`/api/user/notifications.php/${notificationId}/read`, {
            method: 'POST'
        });
        const result = await response.json();
        if (result.success) {
            updateNotificationStatus(notificationId);
            showSuccessToast('Powiadomienie oznaczone jako przeczytane.');
        } else {
            showErrorToast(result.error || 'Błąd oznaczania powiadomienia jako przeczytanego.');
        }
    } catch (error) {
        console.error('Błąd oznaczania powiadomienia:', error);
        showErrorToast('Nie udało się oznaczyć powiadomienia.');
    }
}

/**
 * Updates the UI when a notification is marked as read.
 */
function updateNotificationStatus(notificationId) {
    const notificationElement = document.querySelector(`.mark-as-read[data-id="${notificationId}"]`);
    if (notificationElement) {
        const parentElement = notificationElement.closest('.notification');
        parentElement.classList.add('read');
        parentElement.querySelector('p').style.fontWeight = 'normal';
        notificationElement.remove();
    }
}

/**
 * Displays a message when there are no notifications.
 */
function displayNoNotificationsMessage() {
    const notificationsContainer = document.getElementById('notifications-container');
    if (!notificationsContainer) return;

    notificationsContainer.innerHTML = `<p class="text-muted">Brak nowych powiadomień.</p>`;
}
=== public/js/forms.js ===
document.addEventListener('DOMContentLoaded', function () {
    document.body.addEventListener('submit', function (event) {
        const form = event.target;
        if (form.tagName === 'FORM') {
            event.preventDefault();
            if (validateForm(form)) {
                submitForm(form);
            }
        }
    });

    document.body.addEventListener('input', function (event) {
        const input = event.target;
        if (input.closest('form')) {
            validateInput(input);
        }
    });
});

/**
 * Validates form before submission.
 */
function validateForm(form) {
    let isValid = true;
    const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');

    inputs.forEach(input => {
        if (!validateInput(input)) {
            isValid = false;
        }
    });

    return isValid;
}

/**
 * Validates a single input field.
 */
function validateInput(input) {
    const value = input.value.trim();
    const type = input.type;

    if (!value) {
        showError(input, 'This field is required.');
        return false;
    }

    if (type === 'email' && !isValidEmail(value)) {
        showError(input, 'Please enter a valid email address.');
        return false;
    }

    if (type === 'password') {
        if (value.length < 6) {
            showError(input, 'Password must be at least 6 characters long.');
            return false;
        }
        if (!/\d/.test(value) || !/[A-Za-z]/.test(value)) {
            showError(input, 'Password must contain both letters and numbers.');
            return false;
        }
    }

    if (input.dataset.minLength && value.length < input.dataset.minLength) {
        showError(input, `This field must be at least ${input.dataset.minLength} characters long.`);
        return false;
    }

    clearError(input);
    return true;
}

/**
 * Submits the form via AJAX.
 */
function submitForm(form) {
    const formData = new FormData(form);
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    formData.append('_csrf', csrfToken);

    fetch(form.action, {
        method: form.method,
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            form.reset();
            showSuccessMessage(form, data.message);
        } else {
            showErrorMessages(form, data.errors);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

/**
 * Displays an error message next to the form field.
 */
function showError(input, message) {
    let error = input.nextElementSibling;
    if (!error || !error.classList.contains('error-message')) {
        error = document.createElement('div');
        error.classList.add('error-message');
        input.parentNode.insertBefore(error, input.nextSibling);
    }
    error.textContent = message;
    input.classList.add('error');
}

/**
 * Clears an error message when input is corrected.
 */
function clearError(input) {
    let error = input.nextElementSibling;
    if (error && error.classList.contains('error-message')) {
        error.remove();
    }
    input.classList.remove('error');
}

/**
 * Displays success message after form submission.
 */
function showSuccessMessage(form, message) {
    const successMessage = document.createElement('div');
    successMessage.classList.add('success-message');
    successMessage.textContent = message;
    form.appendChild(successMessage);
    setTimeout(() => {
        successMessage.remove();
    }, 5000);
}

/**
 * Displays multiple error messages after form submission.
 */
function showErrorMessages(form, errors) {
    for (const [inputName, message] of Object.entries(errors)) {
        const input = form.querySelector(`[name="${inputName}"]`);
        if (input) {
            showError(input, message);
        }
    }
}

/**
 * Checks if an email is valid.
 */
function isValidEmail(email) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    return emailPattern.test(email);
}
=== public/js/profile.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    initProfileForm();
});

/**
 * Initializes profile form interactions.
 */
function initProfileForm() {
    const profileForm = document.getElementById('profileUpdateForm');
    const avatarUpload = document.getElementById('avatarUpload');

    if (profileForm) profileForm.addEventListener('submit', updateProfile);
    if (avatarUpload) avatarUpload.addEventListener('change', handleAvatarUpload);
}

/**
 * Handles profile update submission.
 */
async function updateProfile(event) {
    event.preventDefault();
    const formData = new FormData(event.target);

    if (!validateProfileForm(formData)) return;

    try {
        const response = await fetch('/api/user/profile.php', {
            method: 'POST',
            body: formData,
        });
        const result = await response.json();
        if (result.success) {
            showSuccessToast('Profil zaktualizowany pomyślnie.');
        } else {
            showErrorToast(result.message || 'Błąd podczas aktualizacji profilu.');
        }
    } catch (error) {
        console.error('Błąd aktualizacji profilu:', error);
        showErrorToast('Nie udało się zaktualizować profilu.');
    }
}

/**
 * Handles avatar image upload and preview.
 */
async function handleAvatarUpload(event) {
    const fileInput = event.target;
    const file = fileInput.files[0];

    if (!validateImage(file)) return;

    const formData = new FormData();
    formData.append('avatar', file);

    try {
        const response = await fetch('/api/user/profile.php', {
            method: 'POST',
            body: formData,
        });
        const result = await response.json();
        if (result.success) {
            document.getElementById('profileAvatar').src = result.avatarUrl;
            showSuccessToast('Zdjęcie profilowe zaktualizowane pomyślnie.');
        } else {
            showErrorToast(result.message || 'Błąd podczas aktualizacji zdjęcia profilowego.');
        }
    } catch (error) {
        console.error('Błąd aktualizacji zdjęcia profilowego:', error);
        showErrorToast('Nie udało się zaktualizować zdjęcia profilowego.');
    }
}

/**
 * Validates profile form inputs.
 */
function validateProfileForm(formData) {
    const name = formData.get('name').trim();
    const email = formData.get('email').trim();
    const password = formData.get('password')?.trim();

    if (!name) {
        showErrorToast('Imię i nazwisko jest wymagane.');
        return false;
    }

    if (!isValidEmail(email)) {
        showErrorToast('Wprowadź poprawny adres e-mail.');
        return false;
    }

    if (password && password.length < 6) {
        showErrorToast('Hasło musi mieć co najmniej 6 znaków.');
        return false;
    }

    return true;
}

/**
 * Validates uploaded image format.
 */
function validateImage(file) {
    if (!file) {
        showErrorToast('Wybierz obraz do przesłania.');
        return false;
    }

    const allowedTypes = ['image/png', 'image/jpeg', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
        showErrorToast('Nieobsługiwany format obrazu. Dozwolone: PNG, JPG, WEBP.');
        return false;
    }

    return true;
}

/**
 * Checks if an email is valid.
 */
function isValidEmail(email) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    return emailPattern.test(email);
}
=== public/js/auth.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const logoutButton = document.getElementById('logout-button');

    if (loginForm) loginForm.addEventListener('submit', handleLogin);
    if (registerForm) registerForm.addEventListener('submit', handleRegister);
    if (logoutButton) logoutButton.addEventListener('click', logout);

    refreshSession(); // Validate session on load
    setInterval(refreshSession, 60000); // Check session expiration every 60s
});

/**
 * Handles user login
 */
async function handleLogin(event) {
    event.preventDefault();
    clearErrors();

    const formData = new FormData(event.target);
    const username = formData.get('username').trim();
    const password = formData.get('password').trim();

    if (!validateCredentials(username, password)) return;

    if (await checkAndRefreshSession()) return;

    try {
        const response = await ajax.post('/login', { username, password });
        if (response.success) {
            ajax.setToken(response.token);
            showSuccessToast('Logowanie udane! Przekierowywanie...');
            setTimeout(() => window.location.href = '/dashboard', 1500);
        } else {
            showError(response.error || 'Błąd logowania.');
        }
    } catch (error) {
        console.error('Błąd logowania:', error);
        showError('Nie udało się zalogować.');
    }
}

/**
 * Handles user registration
 */
async function handleRegister(event) {
    event.preventDefault();
    clearErrors();

    const formData = new FormData(event.target);
    const username = formData.get('username').trim();
    const email = formData.get('email').trim();
    const password = formData.get('password').trim();
    const confirmPassword = formData.get('confirm_password').trim();

    if (!validateCredentials(username, password, confirmPassword, email)) return;

    if (await checkAndRefreshSession()) return;

    try {
        const response = await ajax.post('/register', { username, email, password });
        if (response.success) {
            ajax.setToken(response.token);
            showSuccessToast('Rejestracja udana! Przekierowywanie...');
            setTimeout(() => window.location.href = '/dashboard', 1500);
        } else {
            showError(response.error || 'Błąd rejestracji.');
        }
    } catch (error) {
        console.error('Błąd rejestracji:', error);
        showError('Nie udało się zarejestrować.');
    }
}

/**
 * Logs out user and clears session data
 */
function logout() {
    localStorage.removeItem('auth_token');
    showSuccessToast('Wylogowano pomyślnie.');
    setTimeout(() => window.location.href = '/auth/login', 1500);
}

/**
 * Refreshes the user session and handles expiration
 */
async function refreshSession() {
    const token = localStorage.getItem('auth_token');
    if (!token) return;

    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const expiration = payload.exp * 1000;
        const now = Date.now();

        if (now >= expiration) {
            await logout();
        } else {
            const response = await ajax.get('/session/refresh');
            if (response.success) {
                ajax.setToken(response.token);
            } else {
                await logout();
            }
        }
    } catch (error) {
        await logout();
    }
}

/**
 * Checks and refreshes the session if the token is expired
 */
async function checkAndRefreshSession() {
    const token = localStorage.getItem('auth_token');
    if (!token) return false;

    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const expiration = payload.exp * 1000;
        const now = Date.now();

        if (now >= expiration) {
            await refreshSession();
            return true;
        }
    } catch (error) {
        await logout();
        return true;
    }

    return false;
}

/**
 * Clears error messages
 */
function clearErrors() {
    const errorContainer = document.getElementById('error-container');
    if (errorContainer) {
        errorContainer.innerText = '';
        errorContainer.style.display = 'none';
    }
}

/**
 * Displays an error message
 */
function showError(message) {
    const errorContainer = document.getElementById('error-container');
    if (errorContainer) {
        errorContainer.innerText = message;
        errorContainer.style.display = 'block';
    }
    showErrorToast(message);
}

/**
 * Validates login and registration credentials
 */
function validateCredentials(username, password, confirmPassword = null, email = null) {
    if (!username || username.length < 3) {
        showError('Nazwa użytkownika musi mieć co najmniej 3 znaki.');
        return false;
    }

    if (email && !isValidEmail(email)) {
        showError('Wprowadź poprawny adres e-mail.');
        return false;
    }

    if (!password || password.length < 6) {
        showError('Hasło musi mieć co najmniej 6 znaków.');
        return false;
    }

    if (confirmPassword !== null && password !== confirmPassword) {
        showError('Hasła nie są identyczne.');
        return false;
    }

    return true;
}

/**
 * Validates email format
 */
function isValidEmail(email) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailPattern.test(email);
}
=== public/js/toasts.js ===
document.addEventListener('DOMContentLoaded', function () {
    ensureToastContainer();
});

/**
 * Ensures the toast container exists on the page.
 */
function ensureToastContainer() {
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        document.body.appendChild(toastContainer);
    }
}

/**
 * Creates a toast notification.
 */
function createToast(type, message, autoDismiss = true, dismissTime = 3000) {
    const toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        console.error('Toast container not found');
        return;
    }

    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.innerHTML = `
        <span>${message}</span>
        <button class="toast-close">&times;</button>
    `;

    toastContainer.appendChild(toast);

    // Add event listener for manual close
    toast.querySelector('.toast-close').addEventListener('click', function () {
        fadeOutToast(toast);
    });

    if (autoDismiss) {
        setTimeout(() => fadeOutToast(toast), dismissTime);
    }
}

/**
 * Smoothly fades out and removes a toast notification.
 */
function fadeOutToast(toast) {
    toast.style.opacity = '0';
    setTimeout(() => toast.remove(), 300);
}

/**
 * Displays a success toast.
 */
function showSuccessToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('success', message, autoDismiss, dismissTime);
}

/**
 * Displays a warning toast.
 */
function showWarningToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('warning', message, autoDismiss, dismissTime);
}

/**
 * Displays an error toast.
 */
function showErrorToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('error', message, autoDismiss, dismissTime);
}
=== public/js/documents.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    initDocumentForm();
    loadDocumentList();
});

/**
 * Initializes document-related form actions.
 */
function initDocumentForm() {
    const uploadForm = document.getElementById('document-upload-form');
    const signButton = document.getElementById('sign-button');
    const uploadInput = document.getElementById('uploadButton');

    if (uploadForm) uploadForm.addEventListener('submit', uploadDocument);
    if (signButton) signButton.addEventListener('click', handleSignButtonClick);
    if (uploadInput) uploadInput.addEventListener('change', handleFileSelection);
}

/**
 * Handles document upload process.
 */
async function uploadDocument(event) {
    event.preventDefault();
    const formData = new FormData(event.target);

    if (!validateFileUpload(formData)) {
        return;
    }

    try {
        const response = await fetch('/api/user/upload_document.php', {
            method: 'POST',
            body: formData
        }).then(res => res.json());

        if (response.success) {
            showSuccessToast('Dokument przesłany pomyślnie.');
            previewDocument(response.documentUrl);
            loadDocumentList();
        } else {
            showErrorToast(response.message || 'Nie udało się przesłać dokumentu.');
        }
    } catch (error) {
        console.error('Błąd przesyłania dokumentu:', error);
        showErrorToast('Wystąpił problem podczas przesyłania dokumentu.');
    }
}

/**
 * Validates file upload before sending.
 */
function validateFileUpload(formData) {
    const file = formData.get('document');
    if (!file) {
        showErrorToast('Wybierz dokument do przesłania.');
        return false;
    }

    const allowedTypes = ['application/pdf', 'image/png', 'image/jpeg'];
    if (!allowedTypes.includes(file.type)) {
        showErrorToast('Nieobsługiwany format pliku. Dozwolone: PDF, PNG, JPG.');
        return false;
    }

    const maxSize = 10 * 1024 * 1024; // 10MB
    if (file.size > maxSize) {
        showErrorToast('Plik jest za duży. Maksymalny rozmiar to 10MB.');
        return false;
    }

    return true;
}

/**
 * Handles file selection and previews before upload.
 */
function handleFileSelection(event) {
    const file = event.target.files[0];
    if (!file) return;

    previewContract(file);
}

/**
 * Previews document before signing.
 */
function previewDocument(documentUrl) {
    const previewFrame = document.getElementById('document-preview');
    if (previewFrame) {
        previewFrame.src = documentUrl;
        previewFrame.style.display = 'block';
    }
}

/**
 * Handles document signing process.
 */
function handleSignButtonClick() {
    const documentId = document.getElementById('document-id').value.trim();
    if (!documentId) {
        showErrorToast('Wybierz dokument do podpisania.');
        return;
    }

    signDocument(documentId);
}

/**
 * Sends request to sign a document.
 */
async function signDocument(documentId) {
    try {
        const response = await fetch('/api/user/documents.php?action=sign', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ documentId })
        }).then(res => res.json());

        if (response.success) {
            showSuccessToast('Dokument został pomyślnie podpisany.');
            loadDocumentList();
        } else {
            showErrorToast(response.message || 'Nie udało się podpisać dokumentu.');
        }
    } catch (error) {
        console.error('Błąd podpisywania dokumentu:', error);
        showErrorToast('Wystąpił problem podczas podpisywania dokumentu.');
    }
}

/**
 * Previews document for user review before submission.
 */
function previewContract(file) {
    const reader = new FileReader();
    reader.onload = function (event) {
        const previewFrame = document.getElementById('contractPreview');
        if (previewFrame) {
            previewFrame.src = event.target.result;
        }
    };
    reader.readAsDataURL(file);
}

/**
 * Loads the document list dynamically.
 */
async function loadDocumentList() {
    try {
        const response = await fetch('/api/user/documents.php?action=list').then(res => res.json());
        if (response.success) {
            const documentList = document.getElementById('document-list');
            documentList.innerHTML = response.documents.map(doc => `<li>${doc.name}</li>`).join('');
        } else {
            showErrorToast('Nie udało się załadować listy dokumentów.');
        }
    } catch (error) {
        console.error('Błąd ładowania listy dokumentów:', error);
        showErrorToast('Wystąpił problem podczas ładowania listy dokumentów.');
    }
}
=== public/js/payments.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    const paymentForm = document.getElementById('paymentForm');

    if (paymentForm) {
        paymentForm.addEventListener('submit', function (event) {
            event.preventDefault();
            if (validateForm()) {
                const paymentDetails = new FormData(paymentForm);
                processPayment(paymentDetails);
            }
        });
    }

    initRealTimeValidation();
});

/**
 * Validates payment form before submission
 */
function validateForm() {
    let isValid = true;
    const cardNumber = document.getElementById('cardNumber').value.trim();
    const expiryDate = document.getElementById('expiryDate').value.trim();
    const cvv = document.getElementById('cvv').value.trim();

    if (!isValidCardNumber(cardNumber)) {
        showErrorToast('Nieprawidłowy numer karty. Wprowadź 16 cyfr.');
        isValid = false;
    }

    if (!isValidExpiryDate(expiryDate)) {
        showErrorToast('Nieprawidłowa data ważności. Użyj formatu MM/YY.');
        isValid = false;
    }

    if (!isValidCVV(cvv)) {
        showErrorToast('Nieprawidłowy kod CVV. Wprowadź 3 cyfry.');
        isValid = false;
    }

    return isValid;
}

/**
 * Sends payment request to the API
 */
async function processPayment(paymentDetails) {
    try {
        const response = await ajax.post('/payments', paymentDetails);
        if (response.success) {
            showSuccessToast('Płatność zakończona sukcesem! Przekierowywanie...');
            setTimeout(() => window.location.href = '/booking/confirmation', 1500);
        } else {
            displayErrors(response.errors);
        }
    } catch (error) {
        showErrorToast('Wystąpił błąd podczas przetwarzania płatności.');
    }
}

/**
 * Displays error messages
 */
function displayErrors(errors) {
    errors.forEach(error => showErrorToast(error));
}

/**
 * Validates card number format
 */
function isValidCardNumber(cardNumber) {
    return /^\d{16}$/.test(cardNumber);
}

/**
 * Validates expiry date format (MM/YY)
 */
function isValidExpiryDate(expiryDate) {
    return /^(0[1-9]|1[0-2])\/\d{2}$/.test(expiryDate);
}

/**
 * Validates CVV format (3 digits)
 */
function isValidCVV(cvv) {
    return /^\d{3}$/.test(cvv);
}

/**
 * Initializes real-time validation for payment fields
 */
function initRealTimeValidation() {
    document.getElementById('cardNumber')?.addEventListener('input', function () {
        if (!isValidCardNumber(this.value)) {
            showErrorToast('Numer karty powinien zawierać 16 cyfr.');
        }
    });

    document.getElementById('expiryDate')?.addEventListener('input', function () {
        if (!isValidExpiryDate(this.value)) {
            showErrorToast('Nieprawidłowy format daty ważności (MM/YY).');
        }
    });

    document.getElementById('cvv')?.addEventListener('input', function () {
        if (!isValidCVV(this.value)) {
            showErrorToast('Kod CVV powinien zawierać 3 cyfry.');
        }
    });
}
=== public/js/user.js ===
document.addEventListener("DOMContentLoaded", function () {
    // Fetch and manage user dashboard data
    function loadUserDashboard() {
        fetch("/api/user/dashboard.php")
            .then(response => response.json())
            .then(data => {
                document.getElementById("totalBookings").textContent = data.totalBookings || 0;
                document.getElementById("totalPayments").textContent = data.totalPayments + " PLN" || "0 PLN";
                document.getElementById("totalDocuments").textContent = data.totalDocuments || 0;
            })
            .catch(error => console.error("Błąd ładowania dashboardu:", error));
    }

    // Fetch and manage bookings
    function fetchBookings() {
        fetch("/api/user/bookings.php")
            .then(response => response.json())
            .then(data => {
                const bookingTable = document.getElementById("bookingList");
                bookingTable.innerHTML = "";

                if (data.length === 0) {
                    bookingTable.innerHTML = `<tr><td colspan="6" class="text-center text-muted">Brak rezerwacji.</td></tr>`;
                } else {
                    data.forEach(booking => {
                        bookingTable.innerHTML += `
                            <tr>
                                <td>${booking.id}</td>
                                <td>${booking.vehicle}</td>
                                <td>${booking.start_date}</td>
                                <td>${booking.end_date}</td>
                                <td>${booking.status}</td>
                                <td><button class="btn btn-sm btn-info" onclick="viewBooking(${booking.id})">Podgląd</button></td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd ładowania rezerwacji:", error));
    }

    loadUserDashboard();
    fetchBookings();
});
=== public/js/shared.js ===
document.addEventListener("DOMContentLoaded", function () {
    console.log("Minimal JavaScript Loaded");

    fetch("/api/test")
        .then(response => response.json())
        .then(data => console.log("API Response:", data))
        .catch(error => console.error("API Error:", error));
});
=== public/js/admin.js ===
document.addEventListener("DOMContentLoaded", function () {
    // Fetch and manage admin dashboard data
    function loadAdminDashboard() {
        fetch("/api/admin/dashboard.php")
            .then(response => response.json())
            .then(data => {
                document.getElementById("totalUsers").textContent = data.totalUsers || 0;
                document.getElementById("totalRevenue").textContent = `$${data.totalRevenue || "0.00"}`;
                document.getElementById("totalBookings").textContent = data.totalBookings || 0;
            })
            .catch(error => console.error("Błąd ładowania dashboardu:", error));
    }

    // Fetch and manage users with role dropdown update
    function fetchUsers() {
        fetch("/api/admin/users.php")
            .then(response => response.json())
            .then(data => {
                const userTable = document.getElementById("userList");
                userTable.innerHTML = "";

                if (data.length === 0) {
                    userTable.innerHTML = `<tr><td colspan="5" class="text-center text-muted">Brak użytkowników.</td></tr>`;
                } else {
                    data.forEach(user => {
                        userTable.innerHTML += `
                            <tr>
                                <td>${user.id}</td>
                                <td>${user.name}</td>
                                <td>
                                    <select onchange="updateUserRole(${user.id}, this.value)">
                                        <option value="admin" ${user.role === "admin" ? "selected" : ""}>Admin</option>
                                        <option value="user" ${user.role === "user" ? "selected" : ""}>User</option>
                                        <option value="staff" ${user.role === "staff" ? "selected" : ""}>Staff</option>
                                    </select>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-danger" onclick="deleteUser(${user.id})">Usuń</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd ładowania użytkowników:", error));
    }

    // Update user role via AJAX
    window.updateUserRole = function (userId, newRole) {
        fetch("/api/admin/update_user_role.php", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: userId, role: newRole })
        })
        .then(response => response.json())
        .then(data => {
            if(data.success){
                alert("Rola użytkownika zmieniona.");
            } else {
                alert("Nie udało się zmienić roli.");
            }
        })
        .catch(error => console.error("Błąd aktualizacji roli użytkownika:", error));
    };

    function deleteUser(userId) {
        if (confirm("Czy na pewno chcesz usunąć użytkownika?")) {
            fetch(`/api/admin/delete_user.php?id=${userId}`, { method: "DELETE" })
                .then(response => response.json())
                .then(() => {
                    alert("Użytkownik usunięty.");
                    fetchUsers();
                })
                .catch(error => console.error("Błąd usuwania użytkownika:", error));
        }
    }

    // Fetch and manage reports with filtering and export functionality
    function fetchReports(filter = "") {
        let url = "/api/admin/reports.php";
        if(filter) url += `?filter=${encodeURIComponent(filter)}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                const reportTable = document.getElementById("reportList");
                reportTable.innerHTML = "";

                if (data.length === 0) {
                    reportTable.innerHTML = `<tr><td colspan="4" class="text-center text-muted">Brak raportów.</td></tr>`;
                } else {
                    data.forEach(report => {
                        reportTable.innerHTML += `
                            <tr>
                                <td>${report.id}</td>
                                <td>${report.type}</td>
                                <td>${report.date}</td>
                                <td>
                                    <button class="btn btn-sm btn-info" onclick="viewReport(${report.id})">Podgląd</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd ładowania raportów:", error));
    }

    // Export reports as CSV or PDF
    window.exportReports = function (format) {
        fetch(`/api/admin/reports_export.php?format=${format}`)
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = `reports.${format}`;
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
            .catch(error => console.error("Błąd eksportu raportów:", error));
    };

    // Fetch and manage transactions with refund handling
    function fetchTransactions() {
        fetch("/api/admin/transactions.php")
            .then(response => response.json())
            .then(data => {
                const transactionTable = document.getElementById("transactionList");
                transactionTable.innerHTML = "";

                if (data.length === 0) {
                    transactionTable.innerHTML = `<tr><td colspan="5" class="text-center text-muted">Brak transakcji.</td></tr>`;
                } else {
                    data.forEach(tx => {
                        transactionTable.innerHTML += `
                            <tr>
                                <td>${tx.id}</td>
                                <td>${tx.amount}</td>
                                <td>${tx.date}</td>
                                <td>${tx.status}</td>
                                <td>
                                    ${tx.refundable ? `<button class="btn btn-sm btn-warning" onclick="refundTransaction(${tx.id})">Refund</button>` : ""}
                                </td>
                            </tr>
                        `;
                    });
                }
            })
            .catch(error => console.error("Błąd ładowania transakcji:", error));
    }

    // Handle refund action with confirmation dialog
    window.refundTransaction = function (transactionId) {
        if (confirm("Czy chcesz wydać refundację dla tej transakcji?")) {
            fetch("/api/admin/refund_transaction.php", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ id: transactionId })
            })
            .then(response => response.json())
            .then(data => {
                if(data.success){
                    alert("Refundacja została przeprowadzona.");
                    fetchTransactions();
                } else {
                    alert("Refundacja nie powiodła się.");
                }
            })
            .catch(error => console.error("Błąd refundacji transakcji:", error));
        }
    };

    // Dummy function to view report details
    window.viewReport = function(reportId) {
        // ...existing code to view report...
        alert("Wyświetlanie raportu: " + reportId);
    };

    // Event listener for report filtering input
    document.getElementById("reportFilter")?.addEventListener("input", function (e) {
        fetchReports(e.target.value);
    });

    // Initial data loading
    loadAdminDashboard();
    fetchUsers();
    fetchReports();
    fetchTransactions();
});
=== public/js/bookings.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    const pickupDateInput = document.getElementById('pickup-date');
    const bookingForm = document.getElementById('booking-form');
    const vehiclesContainer = document.getElementById('vehicles-container');
    const errorContainer = document.getElementById('error-container');
    const loadingIndicator = document.getElementById('loading-indicator');

    if (pickupDateInput) pickupDateInput.addEventListener('change', fetchAvailableVehicles);
    if (bookingForm) bookingForm.addEventListener('submit', submitBookingRequest);

    initRealTimeValidation();
});

/**
 * Fetches available vehicles based on the selected pickup date.
 */
async function fetchAvailableVehicles() {
    const pickupDate = document.getElementById('pickup-date').value.trim();
    if (!pickupDate) return;

    showLoadingIndicator();

    try {
        const response = await fetch(`/api/user/bookings.php?pickup_date=${pickupDate}`);
        const data = await response.json();
        hideLoadingIndicator();

        if (data.vehicles && data.vehicles.length > 0) {
            displayAvailableVehicles(data.vehicles);
        } else {
            showErrorToast('Brak dostępnych pojazdów na wybrany termin.');
            clearVehicles();
            fetchAlternativeDates(pickupDate);
        }
    } catch (error) {
        hideLoadingIndicator();
        console.error('Błąd pobierania dostępnych pojazdów:', error);
        showErrorToast('Nie udało się pobrać dostępnych pojazdów.');
    }
}

/**
 * Displays the available vehicles in the UI.
 */
function displayAvailableVehicles(vehicles) {
    vehiclesContainer.innerHTML = '';

    vehicles.forEach(vehicle => {
        const vehicleElement = document.createElement('div');
        vehicleElement.className = 'vehicle';
        vehicleElement.innerHTML = `
            <h4>${vehicle.name}</h4>
            <p>Typ: ${vehicle.type}</p>
        `;
        vehiclesContainer.appendChild(vehicleElement);
    });
}

/**
 * Clears the vehicle list.
 */
function clearVehicles() {
    vehiclesContainer.innerHTML = '<p class="text-muted">Brak dostępnych pojazdów.</p>';
}

/**
 * Fetches alternative dates with available vehicles
 */
async function fetchAlternativeDates(pickupDate) {
    try {
        const response = await fetch(`/api/user/bookings.php?alternative_dates=true&pickup_date=${pickupDate}`);
        const data = await response.json();
        if (data.alternativeDates && data.alternativeDates.length > 0) {
            displayAlternativeDates(data.alternativeDates, pickupDate);
        } else {
            showErrorToast('Brak alternatywnych terminów.');
        }
    } catch (error) {
        console.error('Błąd pobierania alternatywnych terminów:', error);
        showErrorToast('Nie udało się pobrać alternatywnych terminów.');
    }
}

/**
 * Displays alternative dates in the UI
 */
function displayAlternativeDates(alternativeDates, originalDate) {
    vehiclesContainer.innerHTML = '<p class="text-muted">Brak dostępnych pojazdów.</p>';

    const alternativesContainer = document.createElement('div');
    alternativesContainer.className = 'alternatives';

    const title = document.createElement('h5');
    title.innerText = 'Dostępne alternatywne terminy:';
    alternativesContainer.appendChild(title);

    alternativeDates.forEach(date => {
        const dateElement = document.createElement('button');
        dateElement.className = 'alternative-date';
        dateElement.innerText = date;
        dateElement.addEventListener('click', () => {
            document.getElementById('pickup-date').value = date;
            fetchAvailableVehicles();
        });
        alternativesContainer.appendChild(dateElement);
    });

    const notifyButton = document.createElement('button');
    notifyButton.className = 'notify-button';
    notifyButton.innerText = 'Powiadom mnie, gdy pojazdy będą dostępne';
    notifyButton.addEventListener('click', () => setNotificationAlert(originalDate));
    alternativesContainer.appendChild(notifyButton);

    vehiclesContainer.appendChild(alternativesContainer);
}

/**
 * Sets a notification alert for the user
 */
async function setNotificationAlert(pickupDate) {
    try {
        const response = await fetch('/api/user/bookings.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ pickup_date: pickupDate })
        });
        const data = await response.json();
        if (data.success) {
            showSuccessToast('Powiadomienie zostało ustawione.');
        } else {
            showErrorToast(data.error || 'Nie udało się ustawić powiadomienia.');
        }
    } catch (error) {
        console.error('Błąd ustawiania powiadomienia:', error);
        showErrorToast('Nie udało się ustawić powiadomienia.');
    }
}

/**
 * Handles the booking form submission.
 */
async function submitBookingRequest(event) {
    event.preventDefault();
    clearErrors();

    if (!validateBookingForm()) return;

    const formData = new FormData(event.target);
    showLoadingIndicator();

    try {
        const response = await fetch('/api/user/bookings.php', {
            method: 'POST',
            body: formData
        });
        const data = await response.json();
        hideLoadingIndicator();

        if (data.success) {
            showSuccessToast('Rezerwacja zakończona sukcesem!');
            setTimeout(() => window.location.href = "/bookings/view", 1500);
        } else {
            showErrorToast(data.error || 'Wystąpił problem podczas tworzenia rezerwacji.');
        }
    } catch (error) {
        hideLoadingIndicator();
        console.error('Błąd tworzenia rezerwacji:', error);
        showErrorToast('Nie udało się utworzyć rezerwacji.');
    }
}

/**
 * Initializes real-time validation for booking form fields.
 */
function initRealTimeValidation() {
    const requiredFields = ['pickup-date', 'return-date', 'pickup-location', 'dropoff-location'];

    requiredFields.forEach(field => {
        const input = document.getElementById(field);
        if (input) {
            input.addEventListener('input', () => validateField(input));
        }
    });
}

/**
 * Validates a single form field.
 */
function validateField(input) {
    if (!input.value.trim()) {
        showError(input.dataset.errorMessage || 'To pole jest wymagane.');
    } else {
        clearError();
    }
}

/**
 * Validates the entire booking form before submission.
 */
function validateBookingForm() {
    let isValid = true;
    const requiredFields = ['pickup-date', 'return-date', 'pickup-location', 'dropoff-location'];

    requiredFields.forEach(field => {
        const input = document.getElementById(field);
        if (!input || !input.value.trim()) {
            showError(`Pole ${field.replace('-', ' ')} jest wymagane.`);
            isValid = false;
        }
    });

    return isValid;
}

/**
 * Shows a loading indicator.
 */
function showLoadingIndicator() {
    if (loadingIndicator) {
        loadingIndicator.style.display = 'block';
    }
}

/**
 * Hides the loading indicator.
 */
function hideLoadingIndicator() {
    if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
    }
}

/**
 * Displays an error message.
 */
function showError(message) {
    if (errorContainer) {
        errorContainer.innerText = message;
        errorContainer.style.display = 'block';
    }
}

/**
 * Clears all error messages.
 */
function clearErrors() {
    if (errorContainer) {
        errorContainer.innerText = '';
        errorContainer.style.display = 'none';
    }
}
=== public/js/api.js ===
(function() {
    function apiFetch(url, options = {}) {
        if (!options.headers) {
            options.headers = {};
        }
        // Attach bearer token
        const token = localStorage.getItem('token');
        if (token) {
            options.headers['Authorization'] = 'Bearer ' + token;
        }

        return fetch(url, options)
            .then(async response => {
                if (response.status === 401) {
                    console.warn('Unauthorized response. Attempting token refresh...');
                    // ...token refresh logic...
                    // After refresh, retry original request or handle failure
                }
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Request failed [${response.status}]: ${errorText}`);
                }
                return response;
            })
            .catch(error => {
                console.error('API fetch error:', error.message);
                throw error;
            });
    }

    function getUserData(userId) {
        return apiFetch(`/api/user/${userId}`);
    }

    function updateProfile(data) {
        return apiFetch('/api/profile/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
    }

    // Expose functions to the global scope
    window.apiFetch = apiFetch;
    window.getUserData = getUserData;
    window.updateProfile = updateProfile;

    // Log successful API script loading
    console.log('API script loaded successfully');
})();
=== public/api.php ===
<?php
define('API_ENTRY', true);
date_default_timezone_set('UTC');

require_once __DIR__ . '/../App/Helpers/SecurityHelper.php';
require_once __DIR__ . '/../vendor/autoload.php';

use FastRoute\RouteCollector;
use function FastRoute\simpleDispatcher;

// Log every API event
function logApiEvent($message) {
    $timestamp = date('Y-m-d H:i:s');
    $logFile = __DIR__ . '/../logs/api.log';
    file_put_contents($logFile, "{$timestamp} - {$message}\n", FILE_APPEND);
}

// New helper function to send standardized JSON responses
function sendJsonResponse($status, $data, $httpCode = 200) {
    http_response_code($httpCode);
    header('Content-Type: application/json');
    echo json_encode(['status' => $status, 'data' => $data]);
    exit();
}

$method = $_SERVER['REQUEST_METHOD'];
$requestUri = $_SERVER['REQUEST_URI'];
logApiEvent("Request: {$method} {$requestUri}");

// Determine the route path and public routes
$publicRoutes = ['/auth/login', '/auth/register'];
$path = parse_url($requestUri, PHP_URL_PATH);

// Enforce authentication for protected routes
if (!in_array($path, $publicRoutes)) {
    // Assuming isAuthenticated() is defined in SecurityHelper.php
    if (!isAuthenticated()) {
        $authLogFile = __DIR__ . '/../logs/auth.log';
        file_put_contents($authLogFile, date('Y-m-d H:i:s') . " - Authentication failure for {$path}\n", FILE_APPEND);
        sendJsonResponse('error', ['message' => 'Authentication required'], 401);
    }
}

// Global CSRF check for POST requests
if ($method === 'POST') {
    $csrf = $_SERVER['HTTP_X_CSRF_TOKEN'] ?? ($_POST['csrf_token'] ?? '');
    if (!validateCsrfToken($csrf)) {
        $authLogFile = __DIR__ . '/../logs/auth.log';
        file_put_contents($authLogFile, date('Y-m-d H:i:s') . " - CSRF token validation failed for {$path}\n", FILE_APPEND);
        sendJsonResponse('error', ['message' => 'Invalid CSRF token'], 403);
    }
}

// Dynamically register API routes from /public/api directory
$apiDir = __DIR__ . '/api';
$apiRoutes = [];
if (is_dir($apiDir)) {
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($apiDir, RecursiveDirectoryIterator::SKIP_DOTS)
    );
    foreach ($iterator as $file) {
        if ($file->isFile() && $file->getExtension() === 'php') {
            $relativePath = str_replace($apiDir, '', $file->getPathname());
            $relativePath = ltrim(str_replace('\\', '/', $relativePath), '/');
            $route = preg_replace('/\.php$/', '', $relativePath);
            $apiRoutes[$route] = $file->getPathname();
        }
    }
}

// Setup FastRoute dispatcher
$dispatcher = simpleDispatcher(function (RouteCollector $router) use ($apiRoutes) {
    foreach ($apiRoutes as $route => $filePath) {
        $router->addRoute('GET', '/' . $route, $filePath);
        $router->addRoute('POST', '/' . $route, $filePath);
    }
});

// Remove query string from URI and dispatch routing
$uri = parse_url($requestUri, PHP_URL_PATH);
$routeInfo = $dispatcher->dispatch($method, $uri);

switch ($routeInfo[0]) {
    case FastRoute\Dispatcher::NOT_FOUND:
        sendJsonResponse('error', ['message' => 'API route not found'], 404);
        break;
    case FastRoute\Dispatcher::METHOD_NOT_ALLOWED:
        sendJsonResponse('error', ['message' => 'Method not allowed'], 405);
        break;
    case FastRoute\Dispatcher::FOUND:
        $handler = $routeInfo[1];
        $vars = $routeInfo[2];
        ob_start();
        include $handler;
        $output = ob_get_clean();
        // Wrap output in JSON response, ensuring success status and HTTP 200
        sendJsonResponse('success', ['data' => $output], 200);
        break;
}
?>
