=== config/encryption.php ===
<?php

$logFile = __DIR__ . '/../logs/errors.log';

try {
    // ✅ Load Environment Variables (If `.env` Exists)
    if (file_exists(__DIR__ . '/../.env')) {
        $env = parse_ini_file(__DIR__ . '/../.env');
    } else {
        $env = [];
    }

    // ✅ Retrieve Secure Keys from `.env` or Use Safe Fallbacks
    $jwtSecret = $env['JWT_SECRET'] ?? getenv('JWT_SECRET') ?: 'default_secure_fallback_key_32_characters_long';
    $jwtRefreshSecret = $env['JWT_REFRESH_SECRET'] ?? getenv('JWT_REFRESH_SECRET') ?: 'your-secure-refresh-jwt-secret';
    $encryptionKey = $env['ENCRYPTION_KEY'] ?? getenv('ENCRYPTION_KEY') ?: 'default_fallback_encryption_key_32+characters_long';

    // ✅ Validate JWT & Encryption Key Lengths
    if (strlen($jwtSecret) < 32) {
        throw new Exception('JWT secret key must be at least 32 characters long.');
    }
    if (strlen($jwtRefreshSecret) < 32) {
        throw new Exception('JWT refresh secret key must be at least 32 characters long.');
    }
    if (strlen($encryptionKey) < 32) {
        throw new Exception('Encryption key must be at least 32 characters long.');
    }

    // ✅ Return Secure Configuration
    return [
        'encryption_key' => $encryptionKey,
        'cipher' => 'AES-256-CBC',
        'jwt_secret' => $jwtSecret,
        'jwt_refresh_secret' => $jwtRefreshSecret,
    ];
} catch (Exception $e) {
    $timestamp = date('Y-m-d H:i:s');
    error_log("[$timestamp][error] Encryption configuration error: " . $e->getMessage() . "\n", 3, $logFile);
    
    // ✅ Prevent Information Leakage
    http_response_code(500);
    exit('Internal Server Error');
}
?>
=== config/app.php ===
<?php

/**
 * General Application Configuration
 */

return [
    'name' => 'CarFuse',
    'env' => 'development',  // Options: development, staging, production
    'debug' => false,  // Set to true for debugging
    'timezone' => 'UTC',
];
=== config/dependencies.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php'; // Ensure autoload is included

use DI\Container;
use App\Services\Validator;
use App\Services\RateLimiter;
use App\Services\Auth\TokenService;
use App\Services\NotificationService;
use App\Services\UserService;
use App\Services\PaymentService;
use App\Services\BookingService;
use App\Services\MetricsService;
use App\Services\ReportService;
use App\Services\RevenueService;
use App\Services\EncryptionService;
use App\Services\Security\KeyManager;
use App\Queues\NotificationQueue;
use App\Queues\DocumentQueue;
use DocumentManager\Services\DocumentService;
use DocumentManager\Services\FileStorage;
use DocumentManager\Services\TemplateService;
use DocumentManager\Services\SignatureService;
use AuditManager\Services\AuditService;
use App\Models\Payment;
use Psr\Log\LoggerInterface;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Monolog\Formatter\LineFormatter;
use App\Services\PayUService;
use GuzzleHttp\Client;

// ✅ Initialize Dependency Container
$container = new Container();

// ✅ Load configuration
$configDirectory = __DIR__;
$config = [];

foreach (glob("{$configDirectory}/*.php") as $filePath) {
    $fileName = basename($filePath, '.php');
    if ($fileName !== 'dependencies') {
        $config[$fileName] = require $filePath;
    }
}

// ✅ Ensure necessary directories exist
$templateDirectory = __DIR__ . '/../storage/templates';
$fileStorageConfig = $config['storage'];

foreach ([$templateDirectory, $fileStorageConfig['base_directory']] as $directory) {
    if (!is_dir($directory)) {
        mkdir($directory, 0775, true);
    }
}

// ✅ Initialize Logger First
$logger = new Logger('carfuse');
$logFile = __DIR__ . '/../logs/app.log';

if (!file_exists(dirname($logFile))) {
    mkdir(dirname($logFile), 0775, true);
}

$streamHandler = new StreamHandler($logFile, Logger::DEBUG);
$formatter = new LineFormatter(null, null, true, true);
$streamHandler->setFormatter($formatter);
$logger->pushHandler($streamHandler);

$container->set(LoggerInterface::class, $logger);

// ✅ Initialize Encryption Service
$encryptionService = new EncryptionService($config['encryption']['encryption_key']);
$container->set(EncryptionService::class, fn() => $encryptionService);

// ✅ Initialize File Storage Before Using It Anywhere
$fileStorage = new FileStorage($fileStorageConfig, $logger, $encryptionService);
$container->set(FileStorage::class, fn() => $fileStorage);
$config['keymanager'] = require __DIR__ . '/keymanager.php';

// ✅ Initialize PDO Instances
try {
    $pdo = new PDO(
        sprintf('mysql:host=%s;dbname=%s;charset=utf8mb4',
            $config['database']['app_database']['host'],
            $config['database']['app_database']['database']
        ),
        $config['database']['app_database']['username'],
        $config['database']['app_database']['password'],
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC]
    );

    $securePdo = new PDO(
        sprintf('mysql:host=%s;dbname=%s;charset=utf8mb4',
            $config['database']['secure_database']['host'],
            $config['database']['secure_database']['database']
        ),
        $config['database']['secure_database']['username'],
        $config['database']['secure_database']['password'],
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC]
    );
} catch (PDOException $e) {
    throw new RuntimeException("❌ Database connection failed: " . $e->getMessage());
}

// ✅ Register services in the container
$container->set(PDO::class, $pdo);
$container->set('SecurePDO', $securePdo);

$container->set(DocumentQueue::class, function () use ($fileStorage, $logger) {
    return new DocumentQueue($fileStorage, __DIR__ . '/../storage/document_queue.json', $logger);
});

$container->set(Validator::class, fn() => new Validator());
$container->set(RateLimiter::class, fn() => new RateLimiter($pdo));
$container->set(AuditService::class, fn() => new AuditService($securePdo));

$container->set(DocumentService::class, function () use ($pdo, $logger, $container) {
    return new DocumentService(
        $pdo,
        $container->get(AuditService::class),
        $container->get(FileStorage::class),
        $container->get(EncryptionService::class),
        new TemplateService(__DIR__ . '/../storage/templates'),
        $logger
    );
});

$container->set(TokenService::class, fn() => new TokenService($config['encryption']['jwt_secret'], $config['encryption']['jwt_refresh_secret']));
$container->set(NotificationService::class, fn() => new NotificationService($pdo, $logger, $config['notifications']));
$container->set(NotificationQueue::class, fn() => new NotificationQueue($container->get(NotificationService::class), __DIR__ . '/../storage/notification_queue.json', $logger));
$container->set(UserService::class, fn() => new UserService($securePdo, $logger, $config['encryption']['jwt_secret']));
$container->set(Payment::class, fn() => new Payment());

$container->set(PaymentService::class, function () use ($pdo, $logger, $config) {
    return new PaymentService($pdo, $logger, new Payment(), $config['payu']['api_key'], $config['payu']['api_secret']);
});

$container->set(PayUService::class, fn() => new PayUService(new Client(), $logger, $config['payu']));
$container->set(BookingService::class, fn() => new BookingService($pdo, $logger));
$container->set(MetricsService::class, fn() => new MetricsService($pdo));
$container->set(ReportService::class, fn() => new ReportService($pdo));
$container->set(RevenueService::class, fn() => new RevenueService($pdo));

$container->set(SignatureService::class, function () use ($config, $container) {
    return new SignatureService(
        new Client(),
        $config['signature'],
        $container->get(FileStorage::class),
        $container->get(EncryptionService::class),
        $container->get(LoggerInterface::class)
    );
});

$container->set(TemplateService::class, fn() => new TemplateService(__DIR__ . '/../storage/templates'));

$container->set(KeyManager::class, function () use ($config, $logger) {
    return new KeyManager($config['keymanager']['keys'], $logger);
});

// ✅ Return the DI container
return $container;
=== config/database.php ===
<?php
/**
 * Securely configure database connections without .env
 * This file is committed to Git and used directly.
 */

return [
    'app_database' => [
        'driver'   => 'mysql',
        'host'     => 'srv1803.hstgr.io',
        'port'     => 3306,
        'database' => 'u122931475_carfuse',
        'username' => 'u122931475_user',
        'password' => '59&:NJ9a@',
        'charset'  => 'utf8mb4',
        'collation'=> 'utf8mb4_unicode_ci',
        'prefix'   => '',
    ],
    'secure_database' => [
        'driver'   => 'mysql',
        'host'     => 'srv1803.hstgr.io',
        'port'     => 3306,
        'database' => 'u122931475_secure',
        'username' => 'u122931475_admin',
        'password' => '&hNAA*4a8Jx$',
        'charset'  => 'utf8mb4',
        'collation'=> 'utf8mb4_unicode_ci',
        'prefix'   => '',
    ],
];
=== config/payu.php ===
<?php
return [
    'api_key' => 'your-payu-api-key',
    'api_secret' => 'your-payu-api-secret',
    'endpoint' => 'https://secure.payu.com/api',
    'merchant_key' => 'your-merchant-key',
    'merchant_salt' => 'your-merchant-salt',
];
=== config/signature.php ===
<?php

return [
    'api_endpoint' => 'https://api.example.com',
    'api_key' => 'your-api',
];=== config/storage.php ===
<?php

return [
    'base_directory' => __DIR__ . '/../storage/',

    'security' => [
        'permissions' => [
            'default' => 0640,  // Default file permissions (owner read/write)
            'directory' => 0755, // Default directory permissions
        ],
        'max_file_size' => 5 * 1024 * 1024, // Max file size (5MB)
        'allowed_extensions' => ['png', 'jpg', 'svg', 'pdf', 'docx'],
    ],

    'encryption' => [
        'enabled' => true,
    ],
];
=== config/logs.php ===
<?php

/**
 * Logging Configuration
 */

return [
    'log_channel' => 'daily',  // Options: single, daily, syslog
    'log_path' => __DIR__ . '/../logs/app.log',
    'log_level' => 'debug',  // Options: debug, info, notice, warning, error, critical, alert, emergency
];
=== config/notifications.php ===
<?php

return [
    'smtp_host' => 'smtp.example.com',
    'smtp_user' => 'user@example.com',
    'smtp_password' => 'password',
    'smtp_secure' => 'tls',
    'smtp_port' => 587,
    'from_email' => 'no-reply@example.com',
    'from_name' => 'CarFuse Notifications',
    'fcm_api_key' => 'YOUR_FCM_API_KEY_HERE'
];
=== config/keymanager.php ===
<?php

return [
    'keys' => [
        'default' => 'your-default-key-here',
        'encryption' => getenv('ENCRYPTION_KEY') ?: 'fallback-encryption-key-32chars',
        'jwt_signing' => getenv('JWT_SECRET') ?: 'fallback-jwt-secret-32chars',
    ]
];
=== config/routes.php ===
<?php

use FastRoute\RouteCollector;
use function FastRoute\simpleDispatcher;
use App\Middleware\AuthMiddleware;

// ✅ Prevent Function Redeclaration
if (!function_exists('getViewFiles')) {
    function getViewFiles($baseDir)
    {
        $views = [];
        $iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($baseDir, \RecursiveDirectoryIterator::SKIP_DOTS));

        foreach ($iterator as $file) {
            if ($file->isFile() && pathinfo($file, PATHINFO_EXTENSION) === 'php') {
                $relativePath = str_replace([$baseDir, '\\'], ['', '/'], $file->getPathname());
                $routePath = '/' . trim(str_replace('.php', '', $relativePath), '/');

                // ✅ Prevent duplicate route registrations
                if (!isset($views[$routePath])) {
                    $views[$routePath] = $file->getPathname();
                }
            }
        }
        return $views;
    }
}

// ✅ Base Directory for Views
$baseViewPath = __DIR__ . '/../public/views';
$viewFiles = getViewFiles($baseViewPath);

// ✅ Setup FastRoute Dispatcher
return simpleDispatcher(function (RouteCollector $router) use ($viewFiles) {
    
    $registeredRoutes = []; // ✅ Track registered routes to prevent duplication

    // ✅ Register View Routes Dynamically
    foreach ($viewFiles as $route => $filePath) {
        if (!isset($registeredRoutes[$route])) {
            $router->addRoute(['GET', 'POST'], $route, function () use ($filePath) {
                include $filePath;
            });
            $registeredRoutes[$route] = true;
        }
    }

    // ✅ Protected Routes (Require JWT Authentication)
    $protectedRoutes = ['/dashboard', '/profile', '/reports'];
    foreach ($protectedRoutes as $route) {
        if (isset($viewFiles[$route]) && !isset($registeredRoutes[$route])) {
            $router->addRoute(['GET', 'POST'], $route, function () use ($route, $viewFiles) {
                AuthMiddleware::validateJWT(true);
                include $viewFiles[$route];
            });
            $registeredRoutes[$route] = true;
        }
    }

    // ✅ Dynamic API Routing (Prevent Direct Access)
    $router->addRoute(['GET', 'POST'], '/api/{endpoint:.+}', function ($vars) {
        $apiFile = __DIR__ . "/../public/api/" . basename($vars['endpoint']) . ".php"; // ✅ Security check

        if (file_exists($apiFile) && !isset($registeredRoutes["/api/" . $vars['endpoint']])) {
            include $apiFile;
            $registeredRoutes["/api/" . $vars['endpoint']] = true;
        } else {
            http_response_code(404);
            echo json_encode(["error" => "API not found"]);
        }
    });

    // ✅ Default Route for Unmatched Requests
    $router->addRoute('GET', '/{any:.+}', function () {
        http_response_code(404);
        echo json_encode(["error" => "Page not found"]);
    });
});
=== config/document.php ===
<?php

return [
    'encryption' => [
        'enabled' => true, // Toggle document encryption
    ],
    'storage' => [
        'contracts' => 'contracts/',
        'templates' => 'templates/',
        'terms' => 'templates/terms_and_conditions.html',
    ],
];
=== config/api.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../App/Helpers/SecurityHelper.php';

use Firebase\JWT\JWT;
use Firebase\JWT\Key;

// ✅ Load encryption keys
$config = require __DIR__ . '/encryption.php';
$jwtSecret = $config['jwt_secret'] ?? '';

header('Content-Type: application/json');

// --- Modified code: Log incoming headers and cookies using X-Auth-Token ---
$tmpHeaders = getallheaders();
if (isset($tmpHeaders['X-Auth-Token'])) {
    // Redact the JWT token value
    $tmpHeaders['X-Auth-Token'] = 'Bearer <redacted>';
}
$tmpCookies = $_COOKIE;
if (isset($tmpCookies['jwt'])) {
    $tmpCookies['jwt'] = '<redacted>';
}
error_log("[API DEBUG] " . date('Y-m-d H:i:s') . " - Headers: " . json_encode($tmpHeaders) . "\n", 3, __DIR__ . '/../logs/debug.log');
error_log("[API DEBUG] " . date('Y-m-d H:i:s') . " - Cookies: " . json_encode($tmpCookies) . "\n", 3, __DIR__ . '/../logs/debug.log');
// --- End modified code ---

// ✅ Extract JWT from X-Auth-Token Header or Cookie
function getJWT() {
    $headers = getallheaders();
    if (isset($headers['X-Auth-Token']) && preg_match('/Bearer\s+(\S+)/', $headers['X-Auth-Token'], $matches)) {
        return trim($matches[1]);
    }
    return isset($_COOKIE['jwt']) ? trim($_COOKIE['jwt']) : null;
}

// ✅ Validate JWT and Decode User Info
function validateToken() {
    global $jwtSecret;

    $jwt = getJWT();
    if (!$jwt) {
        logApiError("Missing JWT");
        http_response_code(401);
        echo json_encode(["error" => "Unauthorized: Missing token"]);
        exit;
    }

    try {
        return (array) JWT::decode($jwt, new Key($jwtSecret, 'HS256'));
    } catch (Exception $e) {
        logApiError("Invalid JWT: " . $e->getMessage());
        http_response_code(401);
        echo json_encode(["error" => "Unauthorized: Invalid token"]);
        exit;
    }
}

// ✅ Log API Errors for Debugging
function logApiError($message) {
    error_log("[API] " . date('Y-m-d H:i:s') . " - {$message}\n", 3, __DIR__ . '/../logs/debug.log');
}

// ✅ CORS Handling (Apply to All Requests)
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, X-Auth-Token');

// ✅ Handle CORS Preflight Requests
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit;
}

// ✅ Parse API request
$requestUri = $_SERVER['REQUEST_URI'];
$requestMethod = $_SERVER['REQUEST_METHOD'];
$apiPath = str_replace('/api/', '', parse_url($requestUri, PHP_URL_PATH));

// ✅ Define Public and Protected Routes
$publicRoutes = ['auth/login', 'auth/register', 'home', 'vehicles', 'auth/password_reset'];
$protectedRoutes = ['user/dashboard', 'user/profile', 'user/reports'];

// ✅ Enforce JWT Authentication for Protected Routes
if (in_array($apiPath, $protectedRoutes)) {
    validateToken();
}

// ✅ Dynamically Route API Calls
$apiFile = __DIR__ . '/' . $apiPath . '.php';
if (file_exists($apiFile)) {
    logApiError("Processing API endpoint: $apiPath");
    require_once $apiFile;
} else {
    logApiError("API Endpoint Not Found: $apiPath");
    http_response_code(404);
    echo json_encode(['error' => 'API not found']);
}
