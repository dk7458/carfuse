=== public/js/main.js ===
=== public/js/ajax.js ===
class Ajax {
    constructor() {
        this.baseUrl = '/api';
        this.token = localStorage.getItem('auth_token') || null;
    }

    /**
     * Stores the authentication token for future requests.
     */
    setToken(token) {
        this.token = token;
        localStorage.setItem('auth_token', token);
    }

    /**
     * Makes an API request with automatic retry and session handling.
     */
    async request(endpoint, method = 'GET', data = null, retry = true) {
        const url = `${this.baseUrl}${endpoint}`;
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': this.token ? `Bearer ${this.token}` : ''
        };

        const options = { method, headers };

        if (data) {
            options.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, options);

            if (response.status === 401 && retry) {
                // Attempt token refresh before retrying request
                const refreshed = await this.refreshToken();
                if (refreshed) {
                    return this.request(endpoint, method, data, false);
                }
                throw new Error('Unauthorized: Session expired.');
            }

            if (!response.ok) {
                throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Błąd API:', error);
            throw error;
        }
    }

    /**
     * Fetches data using GET method.
     */
    get(endpoint) {
        return this.request(endpoint, 'GET');
    }

    /**
     * Sends data using POST method.
     */
    post(endpoint, data) {
        return this.request(endpoint, 'POST', data);
    }

    /**
     * Updates data using PUT method.
     */
    put(endpoint, data) {
        return this.request(endpoint, 'PUT', data);
    }

    /**
     * Deletes a resource using DELETE method.
     */
    delete(endpoint) {
        return this.request(endpoint, 'DELETE');
    }

    /**
     * Attempts to refresh the session token.
     */
    async refreshToken() {
        try {
            const response = await fetch(`${this.baseUrl}/session/refresh`, {
                method: 'POST',
                headers: { 'Authorization': this.token ? `Bearer ${this.token}` : '' }
            });

            if (!response.ok) {
                this.clearToken();
                return false;
            }

            const data = await response.json();
            if (data.success && data.token) {
                this.setToken(data.token);
                return true;
            }

            return false;
        } catch (error) {
            console.error('Błąd odświeżania tokena:', error);
            this.clearToken();
            return false;
        }
    }

    /**
     * Clears stored authentication token.
     */
    clearToken() {
        this.token = null;
        localStorage.removeItem('auth_token');
    }
}

// Ensures global availability
window.ajax = new Ajax();
=== public/js/dashboard.js ===
import ajax from './ajax';
import { showErrorToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    fetchStatistics();
    setInterval(checkUserActivity, 60000); // Aktualizuj statystyki tylko przy aktywności użytkownika
    window.addEventListener('resize', handleResponsiveUpdates);
});

/**
 * Fetches real-time statistics for the dashboard.
 */
async function fetchStatistics() {
    try {
        const response = await ajax.get('/statistics');
        updateWidgets(response);
    } catch (error) {
        showErrorToast('Nie udało się pobrać statystyk.');
        console.error('Błąd pobierania statystyk:', error);
    }
}

/**
 * Updates dashboard widgets based on API data.
 */
function updateWidgets(data) {
    updateWidget('total-users', data.totalUsers);
    updateWidget('active-sessions', data.activeSessions);
    updateWidget('new-bookings', data.newBookings);
    updateWidget('total-revenue', formatCurrency(data.totalRevenue));
}

/**
 * Updates a single widget if it exists.
 */
function updateWidget(widgetId, value) {
    const widget = document.getElementById(widgetId);
    if (widget) {
        widget.innerText = value ?? 'Brak danych';
    }
}

/**
 * Handles dynamic UI responsiveness updates.
 */
function handleResponsiveUpdates() {
    console.log('Zaktualizowano UI na podstawie zmiany rozmiaru ekranu.');
    // Można dodać dodatkowe funkcje do aktualizacji widżetów lub układu
}

/**
 * Formats numbers into readable currency format.
 */
function formatCurrency(amount) {
    return new Intl.NumberFormat('pl-PL', { style: 'currency', currency: 'PLN' }).format(amount);
}

/**
 * Checks user activity and updates statistics only if the tab is active.
 */
function checkUserActivity() {
    if (document.visibilityState === 'visible') {
        fetchStatistics();
    }
}
=== public/js/notifications.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    fetchNotifications();
    setInterval(fetchNotifications, 30000); // Refresh notifications every 30 seconds
});

/**
 * Fetches notifications from the server.
 */
async function fetchNotifications() {
    try {
        const notifications = await ajax.get('/notifications');
        if (notifications.length > 0) {
            displayNotifications(notifications);
        } else {
            displayNoNotificationsMessage();
        }
    } catch (error) {
        console.error('Błąd pobierania powiadomień:', error);
        showErrorToast('Nie udało się pobrać powiadomień.');
    }
}

/**
 * Displays notifications in the UI.
 */
function displayNotifications(notifications) {
    const notificationsContainer = document.getElementById('notifications-container');
    if (!notificationsContainer) return;

    notificationsContainer.innerHTML = '';

    notifications.forEach(notification => {
        const notificationElement = document.createElement('div');
        notificationElement.className = `notification ${notification.read ? 'read' : 'unread'}`;
        notificationElement.innerHTML = `
            <p>${notification.message}</p>
            <button class="mark-as-read" data-id="${notification.id}">Oznacz jako przeczytane</button>
        `;
        notificationsContainer.appendChild(notificationElement);
    });

    attachMarkAsReadListeners();
}

/**
 * Adds event listeners to "Mark as Read" buttons.
 */
function attachMarkAsReadListeners() {
    document.querySelectorAll('.mark-as-read').forEach(button => {
        button.addEventListener('click', function () {
            markAsRead(this.dataset.id);
        });
    });
}

/**
 * Marks a notification as read.
 */
async function markAsRead(notificationId) {
    try {
        const response = await ajax.post(`/notifications/${notificationId}/read`);
        if (response.success) {
            updateNotificationStatus(notificationId);
            showSuccessToast('Powiadomienie oznaczone jako przeczytane.');
        } else {
            showErrorToast(response.error || 'Błąd oznaczania powiadomienia jako przeczytanego.');
        }
    } catch (error) {
        console.error('Błąd oznaczania powiadomienia:', error);
        showErrorToast('Nie udało się oznaczyć powiadomienia.');
    }
}

/**
 * Updates the UI when a notification is marked as read.
 */
function updateNotificationStatus(notificationId) {
    const notificationElement = document.querySelector(`.mark-as-read[data-id="${notificationId}"]`);
    if (notificationElement) {
        notificationElement.closest('.notification').classList.add('read');
        notificationElement.remove();
    }
}

/**
 * Displays a message when there are no notifications.
 */
function displayNoNotificationsMessage() {
    const notificationsContainer = document.getElementById('notifications-container');
    if (!notificationsContainer) return;

    notificationsContainer.innerHTML = `<p class="text-muted">Brak nowych powiadomień.</p>`;
}
=== public/js/forms.js ===
document.addEventListener('DOMContentLoaded', function () {
    const forms = document.querySelectorAll('form');

    forms.forEach(form => {
        form.addEventListener('submit', function (event) {
            if (!validateForm(form)) {
                event.preventDefault();
            }
        });

        attachRealTimeValidation(form);
    });
});

/**
 * Validates form before submission.
 */
function validateForm(form) {
    let isValid = true;
    const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');

    inputs.forEach(input => {
        if (!validateInput(input)) {
            isValid = false;
        }
    });

    return isValid;
}

/**
 * Attaches real-time validation to form inputs.
 */
function attachRealTimeValidation(form) {
    const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');

    inputs.forEach(input => {
        input.addEventListener('input', function () {
            validateInput(input);
        });
    });
}

/**
 * Validates a single input field.
 */
function validateInput(input) {
    const value = input.value.trim();
    const type = input.type;

    if (!value) {
        showError(input, 'To pole jest wymagane.');
        return false;
    }

    if (type === 'email' && !isValidEmail(value)) {
        showError(input, 'Wprowadź poprawny adres e-mail.');
        return false;
    }

    if (type === 'password') {
        if (value.length < 6) {
            showError(input, 'Hasło musi zawierać co najmniej 6 znaków.');
            return false;
        }
        if (!/\d/.test(value) || !/[A-Za-z]/.test(value)) {
            showError(input, 'Hasło musi zawierać litery i cyfry.');
            return false;
        }
    }

    if (input.dataset.minLength && value.length < input.dataset.minLength) {
        showError(input, `To pole musi mieć co najmniej ${input.dataset.minLength} znaków.`);
        return false;
    }

    clearError(input);
    return true;
}

/**
 * Displays an error message next to the form field.
 */
function showError(input, message) {
    let error = input.nextElementSibling;
    if (!error || !error.classList.contains('error-message')) {
        error = document.createElement('div');
        error.classList.add('error-message');
        input.parentNode.insertBefore(error, input.nextSibling);
    }
    error.textContent = message;
    input.classList.add('error');
}

/**
 * Clears an error message when input is corrected.
 */
function clearError(input) {
    let error = input.nextElementSibling;
    if (error && error.classList.contains('error-message')) {
        error.remove();
    }
    input.classList.remove('error');
}

/**
 * Checks if an email is valid.
 */
function isValidEmail(email) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    return emailPattern.test(email);
}
=== public/js/profile.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    initProfileForm();
});

/**
 * Initializes profile form interactions.
 */
function initProfileForm() {
    const profileForm = document.getElementById('profile-form');
    const avatarUpload = document.getElementById('avatar-upload');

    if (profileForm) profileForm.addEventListener('submit', updateProfile);
    if (avatarUpload) avatarUpload.addEventListener('change', handleAvatarUpload);
}

/**
 * Handles profile update submission.
 */
async function updateProfile(event) {
    event.preventDefault();
    const formData = new FormData(event.target);

    if (!validateProfileForm(formData)) return;

    try {
        const response = await ajax.post('/profile/update', formData);
        if (response.success) {
            showSuccessToast('Profil zaktualizowany pomyślnie.');
        } else {
            showErrorToast(response.message || 'Błąd podczas aktualizacji profilu.');
        }
    } catch (error) {
        console.error('Błąd aktualizacji profilu:', error);
        showErrorToast('Nie udało się zaktualizować profilu.');
    }
}

/**
 * Handles avatar image upload and preview.
 */
function handleAvatarUpload(event) {
    const fileInput = event.target;
    const file = fileInput.files[0];

    if (!validateImage(file)) return;

    const reader = new FileReader();
    reader.onload = function (e) {
        document.getElementById('avatar-preview').src = e.target.result;
    };
    reader.readAsDataURL(file);
}

/**
 * Validates profile form inputs.
 */
function validateProfileForm(formData) {
    const name = formData.get('name').trim();
    const email = formData.get('email').trim();
    const password = formData.get('password')?.trim();

    if (!name) {
        showErrorToast('Imię i nazwisko jest wymagane.');
        return false;
    }

    if (!isValidEmail(email)) {
        showErrorToast('Wprowadź poprawny adres e-mail.');
        return false;
    }

    if (password && password.length < 6) {
        showErrorToast('Hasło musi mieć co najmniej 6 znaków.');
        return false;
    }

    return true;
}

/**
 * Validates uploaded image format.
 */
function validateImage(file) {
    if (!file) {
        showErrorToast('Wybierz obraz do przesłania.');
        return false;
    }

    const allowedTypes = ['image/png', 'image/jpeg', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
        showErrorToast('Nieobsługiwany format obrazu. Dozwolone: PNG, JPG, WEBP.');
        return false;
    }

    return true;
}

/**
 * Checks if an email is valid.
 */
function isValidEmail(email) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    return emailPattern.test(email);
}
=== public/js/auth.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const logoutButton = document.getElementById('logout-button');

    if (loginForm) loginForm.addEventListener('submit', handleLogin);
    if (registerForm) registerForm.addEventListener('submit', handleRegister);
    if (logoutButton) logoutButton.addEventListener('click', logout);

    refreshSession(); // Validate session on load
    setInterval(refreshSession, 60000); // Check session expiration every 60s
});

/**
 * Handles user login
 */
async function handleLogin(event) {
    event.preventDefault();
    clearErrors();

    const formData = new FormData(event.target);
    const username = formData.get('username').trim();
    const password = formData.get('password').trim();

    if (!validateCredentials(username, password)) return;

    try {
        const response = await ajax.post('/login', { username, password });
        if (response.success) {
            ajax.setToken(response.token);
            showSuccessToast('Logowanie udane! Przekierowywanie...');
            setTimeout(() => window.location.href = '/dashboard', 1500);
        } else {
            showError(response.error || 'Błąd logowania.');
        }
    } catch (error) {
        console.error('Błąd logowania:', error);
        showError('Nie udało się zalogować.');
    }
}

/**
 * Handles user registration
 */
async function handleRegister(event) {
    event.preventDefault();
    clearErrors();

    const formData = new FormData(event.target);
    const username = formData.get('username').trim();
    const email = formData.get('email').trim();
    const password = formData.get('password').trim();
    const confirmPassword = formData.get('confirm_password').trim();

    if (!validateCredentials(username, password, confirmPassword, email)) return;

    try {
        const response = await ajax.post('/register', { username, email, password });
        if (response.success) {
            ajax.setToken(response.token);
            showSuccessToast('Rejestracja udana! Przekierowywanie...');
            setTimeout(() => window.location.href = '/dashboard', 1500);
        } else {
            showError(response.error || 'Błąd rejestracji.');
        }
    } catch (error) {
        console.error('Błąd rejestracji:', error);
        showError('Nie udało się zarejestrować.');
    }
}

/**
 * Logs out user and clears session data
 */
function logout() {
    localStorage.removeItem('auth_token');
    showSuccessToast('Wylogowano pomyślnie.');
    setTimeout(() => window.location.href = '/auth/login', 1500);
}

/**
 * Refreshes the user session and handles expiration
 */
function refreshSession() {
    const token = localStorage.getItem('auth_token');
    if (!token) return;

    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const expiration = payload.exp * 1000;
        const now = Date.now();

        if (now >= expiration) {
            logout();
        } else {
            ajax.get('/session/refresh').then(response => {
                if (response.success) {
                    ajax.setToken(response.token);
                }
            }).catch(() => logout());
        }
    } catch (error) {
        logout();
    }
}

/**
 * Clears error messages
 */
function clearErrors() {
    const errorContainer = document.getElementById('error-container');
    if (errorContainer) {
        errorContainer.innerText = '';
        errorContainer.style.display = 'none';
    }
}

/**
 * Displays an error message
 */
function showError(message) {
    const errorContainer = document.getElementById('error-container');
    if (errorContainer) {
        errorContainer.innerText = message;
        errorContainer.style.display = 'block';
    }
    showErrorToast(message);
}

/**
 * Validates login and registration credentials
 */
function validateCredentials(username, password, confirmPassword = null, email = null) {
    if (!username || username.length < 3) {
        showError('Nazwa użytkownika musi mieć co najmniej 3 znaki.');
        return false;
    }

    if (email && !isValidEmail(email)) {
        showError('Wprowadź poprawny adres e-mail.');
        return false;
    }

    if (!password || password.length < 6) {
        showError('Hasło musi mieć co najmniej 6 znaków.');
        return false;
    }

    if (confirmPassword !== null && password !== confirmPassword) {
        showError('Hasła nie są identyczne.');
        return false;
    }

    return true;
}

/**
 * Validates email format
 */
function isValidEmail(email) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailPattern.test(email);
}
=== public/js/toasts.js ===
document.addEventListener('DOMContentLoaded', function () {
    ensureToastContainer();
});

/**
 * Ensures the toast container exists on the page.
 */
function ensureToastContainer() {
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        document.body.appendChild(toastContainer);
    }
}

/**
 * Creates a toast notification.
 */
function createToast(type, message, autoDismiss = true, dismissTime = 3000) {
    const toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        console.error('Toast container not found');
        return;
    }

    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.innerHTML = `
        <span>${message}</span>
        <button class="toast-close">&times;</button>
    `;

    toastContainer.appendChild(toast);

    // Add event listener for manual close
    toast.querySelector('.toast-close').addEventListener('click', function () {
        fadeOutToast(toast);
    });

    if (autoDismiss) {
        setTimeout(() => fadeOutToast(toast), dismissTime);
    }
}

/**
 * Smoothly fades out and removes a toast notification.
 */
function fadeOutToast(toast) {
    toast.style.opacity = '0';
    setTimeout(() => toast.remove(), 300);
}

/**
 * Displays a success toast.
 */
function showSuccessToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('success', message, autoDismiss, dismissTime);
}

/**
 * Displays a warning toast.
 */
function showWarningToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('warning', message, autoDismiss, dismissTime);
}

/**
 * Displays an error toast.
 */
function showErrorToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('error', message, autoDismiss, dismissTime);
}
=== public/js/documents.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    initDocumentForm();
});

/**
 * Initializes document-related form actions.
 */
function initDocumentForm() {
    const uploadForm = document.getElementById('document-upload-form');
    const signButton = document.getElementById('sign-button');
    const uploadInput = document.getElementById('uploadButton');

    if (uploadForm) uploadForm.addEventListener('submit', uploadDocument);
    if (signButton) signButton.addEventListener('click', handleSignButtonClick);
    if (uploadInput) uploadInput.addEventListener('change', handleFileSelection);
}

/**
 * Handles document upload process.
 */
async function uploadDocument(event) {
    event.preventDefault();
    const formData = new FormData(event.target);

    if (!validateFileUpload(formData)) {
        return;
    }

    try {
        const response = await ajax.post('/documents/upload', formData);
        if (response.success) {
            showSuccessToast('Dokument przesłany pomyślnie.');
            previewDocument(response.documentUrl);
        } else {
            showErrorToast(response.message || 'Nie udało się przesłać dokumentu.');
        }
    } catch (error) {
        console.error('Błąd przesyłania dokumentu:', error);
        showErrorToast('Wystąpił problem podczas przesyłania dokumentu.');
    }
}

/**
 * Validates file upload before sending.
 */
function validateFileUpload(formData) {
    const file = formData.get('document');
    if (!file) {
        showErrorToast('Wybierz dokument do przesłania.');
        return false;
    }

    const allowedTypes = ['application/pdf', 'image/png', 'image/jpeg'];
    if (!allowedTypes.includes(file.type)) {
        showErrorToast('Nieobsługiwany format pliku. Dozwolone: PDF, PNG, JPG.');
        return false;
    }

    return true;
}

/**
 * Handles file selection and previews before upload.
 */
function handleFileSelection(event) {
    const file = event.target.files[0];
    if (!file) return;

    previewContract(file);
}

/**
 * Previews document before signing.
 */
function previewDocument(documentUrl) {
    const previewFrame = document.getElementById('document-preview');
    if (previewFrame) {
        previewFrame.src = documentUrl;
        previewFrame.style.display = 'block';
    }
}

/**
 * Handles document signing process.
 */
function handleSignButtonClick() {
    const documentId = document.getElementById('document-id').value.trim();
    if (!documentId) {
        showErrorToast('Wybierz dokument do podpisania.');
        return;
    }

    signDocument(documentId);
}

/**
 * Sends request to sign a document.
 */
async function signDocument(documentId) {
    try {
        const response = await ajax.post('/documents/sign', { documentId });
        if (response.success) {
            showSuccessToast('Dokument został pomyślnie podpisany.');
        } else {
            showErrorToast(response.message || 'Nie udało się podpisać dokumentu.');
        }
    } catch (error) {
        console.error('Błąd podpisywania dokumentu:', error);
        showErrorToast('Wystąpił problem podczas podpisywania dokumentu.');
    }
}

/**
 * Previews document for user review before submission.
 */
function previewContract(file) {
    const reader = new FileReader();
    reader.onload = function (event) {
        const previewFrame = document.getElementById('contractPreview');
        if (previewFrame) {
            previewFrame.src = event.target.result;
        }
    };
    reader.readAsDataURL(file);
}
=== public/js/payments.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    const paymentForm = document.getElementById('paymentForm');

    if (paymentForm) {
        paymentForm.addEventListener('submit', function (event) {
            event.preventDefault();
            if (validateForm()) {
                const paymentDetails = new FormData(paymentForm);
                processPayment(paymentDetails);
            }
        });
    }

    initRealTimeValidation();
});

/**
 * Validates payment form before submission
 */
function validateForm() {
    let isValid = true;
    const cardNumber = document.getElementById('cardNumber').value.trim();
    const expiryDate = document.getElementById('expiryDate').value.trim();
    const cvv = document.getElementById('cvv').value.trim();

    if (!isValidCardNumber(cardNumber)) {
        showErrorToast('Nieprawidłowy numer karty. Wprowadź 16 cyfr.');
        isValid = false;
    }

    if (!isValidExpiryDate(expiryDate)) {
        showErrorToast('Nieprawidłowa data ważności. Użyj formatu MM/YY.');
        isValid = false;
    }

    if (!isValidCVV(cvv)) {
        showErrorToast('Nieprawidłowy kod CVV. Wprowadź 3 cyfry.');
        isValid = false;
    }

    return isValid;
}

/**
 * Sends payment request to the API
 */
async function processPayment(paymentDetails) {
    try {
        const response = await ajax.post('/payments', paymentDetails);
        if (response.success) {
            showSuccessToast('Płatność zakończona sukcesem! Przekierowywanie...');
            setTimeout(() => window.location.href = '/booking/confirmation', 1500);
        } else {
            displayErrors(response.errors);
        }
    } catch (error) {
        showErrorToast('Wystąpił błąd podczas przetwarzania płatności.');
    }
}

/**
 * Displays error messages
 */
function displayErrors(errors) {
    errors.forEach(error => showErrorToast(error));
}

/**
 * Validates card number format
 */
function isValidCardNumber(cardNumber) {
    return /^\d{16}$/.test(cardNumber);
}

/**
 * Validates expiry date format (MM/YY)
 */
function isValidExpiryDate(expiryDate) {
    return /^(0[1-9]|1[0-2])\/\d{2}$/.test(expiryDate);
}

/**
 * Validates CVV format (3 digits)
 */
function isValidCVV(cvv) {
    return /^\d{3}$/.test(cvv);
}

/**
 * Initializes real-time validation for payment fields
 */
function initRealTimeValidation() {
    document.getElementById('cardNumber')?.addEventListener('input', function () {
        if (!isValidCardNumber(this.value)) {
            showErrorToast('Numer karty powinien zawierać 16 cyfr.');
        }
    });

    document.getElementById('expiryDate')?.addEventListener('input', function () {
        if (!isValidExpiryDate(this.value)) {
            showErrorToast('Nieprawidłowy format daty ważności (MM/YY).');
        }
    });

    document.getElementById('cvv')?.addEventListener('input', function () {
        if (!isValidCVV(this.value)) {
            showErrorToast('Kod CVV powinien zawierać 3 cyfry.');
        }
    });
}
=== public/js/bookings.js ===
import ajax from './ajax';
import { showErrorToast, showSuccessToast } from './toasts';

document.addEventListener('DOMContentLoaded', function () {
    const pickupDateInput = document.getElementById('pickup-date');
    const bookingForm = document.getElementById('booking-form');
    const vehiclesContainer = document.getElementById('vehicles-container');
    const errorContainer = document.getElementById('error-container');
    const loadingIndicator = document.getElementById('loading-indicator');

    if (pickupDateInput) pickupDateInput.addEventListener('change', fetchAvailableVehicles);
    if (bookingForm) bookingForm.addEventListener('submit', submitBookingRequest);

    initRealTimeValidation();
});

/**
 * Fetches available vehicles based on the selected pickup date.
 */
async function fetchAvailableVehicles() {
    const pickupDate = document.getElementById('pickup-date').value.trim();
    if (!pickupDate) return;

    showLoadingIndicator();

    try {
        const response = await ajax.get(`/vehicles/available?pickup_date=${pickupDate}`);
        hideLoadingIndicator();

        if (response.vehicles && response.vehicles.length > 0) {
            displayAvailableVehicles(response.vehicles);
        } else {
            showErrorToast('Brak dostępnych pojazdów na wybrany termin.');
            clearVehicles();
        }
    } catch (error) {
        hideLoadingIndicator();
        console.error('Błąd pobierania dostępnych pojazdów:', error);
        showErrorToast('Nie udało się pobrać dostępnych pojazdów.');
    }
}

/**
 * Displays the available vehicles in the UI.
 */
function displayAvailableVehicles(vehicles) {
    vehiclesContainer.innerHTML = '';

    vehicles.forEach(vehicle => {
        const vehicleElement = document.createElement('div');
        vehicleElement.className = 'vehicle';
        vehicleElement.innerHTML = `
            <h4>${vehicle.name}</h4>
            <p>Typ: ${vehicle.type}</p>
        `;
        vehiclesContainer.appendChild(vehicleElement);
    });
}

/**
 * Clears the vehicle list.
 */
function clearVehicles() {
    vehiclesContainer.innerHTML = '<p class="text-muted">Brak dostępnych pojazdów.</p>';
}

/**
 * Handles the booking form submission.
 */
async function submitBookingRequest(event) {
    event.preventDefault();
    clearErrors();

    if (!validateBookingForm()) return;

    const formData = new FormData(event.target);
    showLoadingIndicator();

    try {
        const response = await ajax.post('/booking/create', formData);
        hideLoadingIndicator();

        if (response.success) {
            showSuccessToast('Rezerwacja zakończona sukcesem!');
            setTimeout(() => window.location.href = "/bookings/view", 1500);
        } else {
            showErrorToast(response.error || 'Wystąpił problem podczas tworzenia rezerwacji.');
        }
    } catch (error) {
        hideLoadingIndicator();
        console.error('Błąd tworzenia rezerwacji:', error);
        showErrorToast('Nie udało się utworzyć rezerwacji.');
    }
}

/**
 * Initializes real-time validation for booking form fields.
 */
function initRealTimeValidation() {
    const requiredFields = ['pickup-date', 'return-date', 'pickup-location', 'dropoff-location'];

    requiredFields.forEach(field => {
        const input = document.getElementById(field);
        if (input) {
            input.addEventListener('input', () => validateField(input));
        }
    });
}

/**
 * Validates a single form field.
 */
function validateField(input) {
    if (!input.value.trim()) {
        showError(input.dataset.errorMessage || 'To pole jest wymagane.');
    } else {
        clearError();
    }
}

/**
 * Validates the entire booking form before submission.
 */
function validateBookingForm() {
    let isValid = true;
    const requiredFields = ['pickup-date', 'return-date', 'pickup-location', 'dropoff-location'];

    requiredFields.forEach(field => {
        const input = document.getElementById(field);
        if (!input || !input.value.trim()) {
            showError(`Pole ${field.replace('-', ' ')} jest wymagane.`);
            isValid = false;
        }
    });

    return isValid;
}

/**
 * Shows a loading indicator.
 */
function showLoadingIndicator() {
    if (loadingIndicator) {
        loadingIndicator.style.display = 'block';
    }
}

/**
 * Hides the loading indicator.
 */
function hideLoadingIndicator() {
    if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
    }
}

/**
 * Displays an error message.
 */
function showError(message) {
    if (errorContainer) {
        errorContainer.innerText = message;
        errorContainer.style.display = 'block';
    }
}

/**
 * Clears all error messages.
 */
function clearErrors() {
    if (errorContainer) {
        errorContainer.innerText = '';
        errorContainer.style.display = 'none';
    }
}
