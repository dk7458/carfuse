=== config/filestorage.php ===
<?php
/**
 * File: filestorage.php
 * Purpose: Configuration file for the FileStorage service in DocumentManager.
 * Path: DocumentManager/config/filestorage.php
 *
 * Changelog:
 * - [2025-01-28] Initial creation of the file.
 */

return [
    // General file storage settings
    'base_directory' => __DIR__ . '/../Storage', // Base directory for storing files

    // Storage structure
    'directories' => [
        'templates' => 'Templates', // Directory for storing document templates
        'users' => 'Users', // Directory for user-specific documents
        'logs' => '../logs', // Directory for storing logs (relative to base)
    ],

    // File security settings
    'security' => [
        'allowed_extensions' => ['pdf', 'docx', 'html'], // Allowed file extensions
        'max_file_size' => 10 * 1024 * 1024, // Max file size (10 MB in bytes)
        'encryption' => [
            'enabled' => true, // Enable encryption for stored files
        ],
        'permissions' => [
            'default' => 0640, // Default file permissions (read/write for owner, read for group)
        ],
    ],

    // Temporary storage settings
    'temporary' => [
        'enabled' => true, // Enable temporary storage
        'directory' => __DIR__ . '/../Storage/Temp', // Temp directory path
        'cleanup_interval' => 86400, // Time in seconds to clean up old temp files (24 hours)
    ],

    // Error handling and logging
    'error_handling' => [
        'log_errors' => true, // Log errors related to file storage
        'log_file' => __DIR__ . '/../logs/filestorage.log', // Log file for file storage errors
    ],
];
=== config/encryption.php ===
<?php

$logFile = __DIR__ . '/../logs/errors.log';

try {
    // ✅ Load Environment Variables (If `.env` Exists)
    if (file_exists(__DIR__ . '/../.env')) {
        $env = parse_ini_file(__DIR__ . '/../.env');
    } else {
        $env = [];
    }

    // ✅ Retrieve Secure Keys from `.env` or Use Safe Fallbacks
    $jwtSecret = $env['JWT_SECRET'] ?? getenv('JWT_SECRET') ?: 'default_secure_fallback_key_32_characters_long';
    $jwtRefreshSecret = $env['JWT_REFRESH_SECRET'] ?? getenv('JWT_REFRESH_SECRET') ?: 'your-secure-refresh-jwt-secret';
    $encryptionKey = $env['ENCRYPTION_KEY'] ?? getenv('ENCRYPTION_KEY') ?: 'default_fallback_encryption_key_32+characters_long';

    // ✅ Validate JWT & Encryption Key Lengths
    if (strlen($jwtSecret) < 32) {
        throw new Exception('JWT secret key must be at least 32 characters long.');
    }
    if (strlen($jwtRefreshSecret) < 32) {
        throw new Exception('JWT refresh secret key must be at least 32 characters long.');
    }
    if (strlen($encryptionKey) < 32) {
        throw new Exception('Encryption key must be at least 32 characters long.');
    }

    // ✅ Return Secure Configuration
    return [
        'encryption_key' => $encryptionKey,
        'cipher' => 'AES-256-CBC',
        'jwt_secret' => $jwtSecret,
        'jwt_refresh_secret' => $jwtRefreshSecret,
    ];
} catch (Exception $e) {
    $timestamp = date('Y-m-d H:i:s');
    error_log("[$timestamp][error] Encryption configuration error: " . $e->getMessage() . "\n", 3, $logFile);
    
    // ✅ Prevent Information Leakage
    http_response_code(500);
    exit('Internal Server Error');
}
?>
=== config/app.php ===
<?php

/**
 * General Application Configuration
 */

return [
    'name' => 'CarFuse',
    'env' => 'development',  // Options: development, staging, production
    'debug' => false,  // Set to true for debugging
    'timezone' => 'UTC',
];
=== config/dependencies.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../App/Helpers/ExceptionHandler.php';

use DI\Container;
use Psr\Log\LoggerInterface;
use App\Helpers\DatabaseHelper;
use App\Helpers\ExceptionHandler;
use App\Helpers\SecurityHelper;
use App\Services\Validator;
use App\Services\RateLimiter;
use App\Services\Auth\TokenService;
use App\Services\Auth\AuthService;
use App\Services\NotificationService;
use App\Services\UserService;
use App\Services\PaymentService;
use App\Services\BookingService;
use App\Services\MetricsService;
use App\Services\ReportService;
use App\Services\RevenueService;
use App\Services\EncryptionService;
use App\Services\Security\KeyManager;
use App\Services\DocumentService;
use App\Services\FileStorage;
use App\Services\TemplateService;
use App\Services\SignatureService;
use App\Services\AuditService;
use App\Queues\NotificationQueue;
use App\Queues\DocumentQueue;
use App\Models\Payment;
use GuzzleHttp\Client;

// Step 1: Initialize DI Container
try {
    $container = new Container();
    // Register categorized loggers.
    $container->set(LoggerInterface::class, fn() => getLogger('system'));
    $container->set('auth_logger', fn() => getLogger('auth'));
    $container->set('db_logger', fn() => getLogger('db'));
    $container->set('api_logger', fn() => getLogger('api'));
    $container->set('security_logger', fn() => getLogger('security'));
    $container->set('audit_logger', fn() => getLogger('audit')); 

    // Register new dependencies logger.
    $container->set('dependencies_logger', fn() => getLogger('dependencies'));
    $container->get('dependencies_logger')->info("🔄 Step 1: Starting Dependency Injection.");
    $container->get(LoggerInterface::class)->info("Step 1: DI Container created and loggers registered.");
} catch (Exception $e) {
    getLogger('system')->error("❌ [DI] Failed to initialize DI container: " . $e->getMessage());
    die("❌ Dependency Injection container failed: " . $e->getMessage() . "\n");
}

// Register ExceptionHandler after the loggers are available.
$container->set(ExceptionHandler::class, fn($c) => new ExceptionHandler(
    $c->get('db_logger'),
    $c->get('auth_logger'),
    $c->get(LoggerInterface::class)
));

// Add helper registrations immediately after logger registration.
require_once __DIR__ . '/../App/Helpers/SecurityHelper.php';
require_once __DIR__ . '/../App/Helpers/DatabaseHelper.php';
$container->set(SecurityHelper::class, fn() => new SecurityHelper());

// Step 2: Load configuration files.
$container->get(LoggerInterface::class)->info("Step 2: Loading configuration files.");
$configDirectory = __DIR__;
$config = [];
foreach (glob("{$configDirectory}/*.php") as $filePath) {
    $fileName = basename($filePath, '.php');
    if ($fileName !== 'dependencies') {
        $config[$fileName] = require $filePath;
        $container->get(LoggerInterface::class)->info("Configuration file loaded: {$fileName}.php");
    }
}

// Step 3: Initialize DatabaseHelper instances BEFORE services that depend on them.
try {
    DatabaseHelper::setLogger($container->get('db_logger'));
    $database = DatabaseHelper::getInstance($envConfig); // Pass the envConfig array
    $secureDatabase = DatabaseHelper::getSecureInstance($envConfig); // Pass the envConfig array and specify 'secure'
    $container->get('db_logger')->info("✅ Both databases initialized successfully.");
} catch (Exception $e) {
    $container->get('db_logger')->error("❌ Database initialization failed: " . $e->getMessage());
    die("❌ Database initialization failed. Check logs for details.\n");
}

// ✅ Register database instances in DI container
$container->set(DatabaseHelper::class, fn() => $database); // Register as DatabaseHelper class
$container->set('db', fn() => $database); // Register generic key
$container->set('secure_db', fn() => $secureDatabase);

// Debug database connection before proceeding.
try {
    $pdo = $container->get('db')->getConnection()->getPdo();
    if (!$pdo) {
        throw new Exception("❌ Database connection failed.");
    }
    $container->get('db_logger')->info("✅ Database connection verified successfully.");
} catch (Exception $e) {
    $container->get('db_logger')->critical("❌ Database connection verification failed: " . $e->getMessage());
    die("❌ Database connection issue: " . $e->getMessage() . "\n");
}

// Step 4: Initialize EncryptionService.
$encryptionService = new EncryptionService(
    $container->get(LoggerInterface::class), // Pass the correct logger
    $container->get(ExceptionHandler::class), // Pass the ExceptionHandler
    $envConfig['encryption']['encryption_key'] ?? '' // Pass the encryption key from envConfig
);
$container->set(EncryptionService::class, fn() => $encryptionService);
$container->get(LoggerInterface::class)->info("Step 4: EncryptionService registered.");

// Step 5: Initialize FileStorage using centralized logger.
if (!isset($config['filestorage']) || !is_array($config['filestorage'])) {
    $container->get(LoggerInterface::class)->critical("❌ FileStorage configuration is missing or invalid.");
    die("❌ FileStorage configuration is missing or invalid.\n");
}
$container->set(FileStorage::class, function () use ($container, $config) {
    return new FileStorage(
        $config['filestorage'],  // Pass correct config as an array.
        $container->get('api_logger'), // Pass the proper logger.
        $container->get(EncryptionService::class) // Inject EncryptionService.
    );
});
$container->get(LoggerInterface::class)->info("Step 5: FileStorage registered.");

// Step 6: Load key manager configuration.
$config['keymanager'] = require __DIR__ . '/keymanager.php';
$container->get(LoggerInterface::class)->info("Step 6: Key Manager configuration loaded.");

// Step 7: Ensure required directories exist.
$templateDirectory = __DIR__ . '/../storage/templates';
$fileStorageConfig = $config['filestorage'] ?? [];
if (!is_dir($templateDirectory)) {
    mkdir($templateDirectory, 0775, true);
}
if (!empty($fileStorageConfig['base_directory']) && !is_dir($fileStorageConfig['base_directory'])) {
    mkdir($fileStorageConfig['base_directory'], 0775, true);
}
$container->get(LoggerInterface::class)->info("Step 7: Required directories verified.");

// Step 8: Register services with proper dependency order.
$container->set(Validator::class, fn() => new Validator(
    $container->get('api_logger'), // Pass the logger
    $container->get(DatabaseHelper::class), // Pass the DatabaseHelper
    $container->get(ExceptionHandler::class)
));
$container->set(RateLimiter::class, fn() => new RateLimiter(
    $container->get('db_logger'), 
    $container->get(ExceptionHandler::class)
));
$container->set(AuditService::class, fn() => new AuditService(
    $container->get('security_logger'),
    $container->get(ExceptionHandler::class),
    $container->get(DatabaseHelper::class)
));
$container->set(TokenService::class, fn() => new TokenService(
    $envConfig['JWT_SECRET'] ?? '',
    $envConfig['JWT_REFRESH_SECRET'] ?? '',
    $container->get('auth_logger'),
    $container->get(ExceptionHandler::class)
));
$container->set(AuthService::class, fn() => new AuthService(
    $container->get(DatabaseHelper::class),  // Ensure DatabaseHelper is injected
    $container->get(TokenService::class),
    $container->get(ExceptionHandler::class),
    $container->get('auth_logger'),
    $container->get('audit_logger'),
    $envConfig['encryption'],
    $container->get(Validator::class) // Inject Validator
));
// Register UserController to receive AuthService via DI.
$container->set(\App\Controllers\UserController::class, fn() => new \App\Controllers\UserController(
    $container->get(\App\Services\Auth\AuthService::class)
));
$container->set(UserService::class, fn() => new UserService(
    $container->get(DatabaseHelper::class),
    $container->get('auth_logger'),
    $container->get('audit_logger')
));
$container->set(NotificationService::class, fn() => new NotificationService(
    $container->get('api_logger'),
    $container->get(ExceptionHandler::class),
    $container->get(DatabaseHelper::class),
    $config['notifications'] ?? []
));
$container->set(PaymentService::class, fn() => new PaymentService(
    $container->get('db_logger'),
    $container->get(DatabaseHelper::class),
    $container->get(ExceptionHandler::class)
));
$container->set(BookingService::class, fn() => new BookingService(
    $container->get('api_logger'),
    $container->get(ExceptionHandler::class),
    $container->get(DatabaseHelper::class)
));
$container->set(MetricsService::class, fn() => new MetricsService(
    $container->get('api_logger'),
    $container->get(ExceptionHandler::class),
    $container->get(DatabaseHelper::class)
));
$container->set(ReportService::class, fn() => new ReportService(
    $container->get('api_logger'),
    $container->get(DatabaseHelper::class),
    $container->get(ExceptionHandler::class)
));
$container->set(RevenueService::class, fn() => new RevenueService(
    $container->get('db_logger'),
    $container->get(DatabaseHelper::class),
    $container->get(ExceptionHandler::class)
));
$container->set(SignatureService::class, fn() => new SignatureService(
    $container->get('security_logger'),
    $container->get(DatabaseHelper::class),
    $config['signature']
));
$container->set(DocumentService::class, fn() => new DocumentService(
    $container->get('api_logger'),
    $container->get(AuditService::class),
    $container->get(FileStorage::class),
    $container->get(EncryptionService::class),
    $container->get(TemplateService::class)
));
$container->set(TemplateService::class, fn() => new TemplateService(
    $container->get('api_logger'),
    __DIR__ . '/../storage/templates',
    $container->get(ExceptionHandler::class)
));
$container->set(FileStorage::class, fn() => new FileStorage(
    $config['filestorage'],
    $container->get(EncryptionService::class),
    $container->get('api_logger'),
    $container->get(ExceptionHandler::class)
));
$container->set(EncryptionService::class, fn() => new EncryptionService(
    $container->get('api_logger'),
    $container->get(ExceptionHandler::class),
    $config['encryption']['encryption_key'] ?? ''
));
$container->set(KeyManager::class, fn() => new KeyManager(
    $config['keymanager'],
    $container->get('security_logger'),
    $container->get(ExceptionHandler::class)
));

// New registrations for additional services ensuring proper logging.
$container->set(\App\Controllers\AuthController::class, fn() => new \App\Controllers\AuthController(
    $container->get(\App\Services\Auth\AuthService::class),
    $container->get(Validator::class),
    $container->get(TokenService::class),
    $container->get(ExceptionHandler::class),
    $container->get('auth_logger'),
    $container->get('audit_logger')
));

$container->get(LoggerInterface::class)->info("Step 8: Service registration completed.");

// Step 9: Final check for required service registrations and circular dependency detection.
$requiredServices = [
    TokenService::class,
    AuthService::class,
    Validator::class,
    DatabaseHelper::class,
];
$container->get('dependencies_logger')->info("🔄 Step 9: Checking for circular dependencies...");
foreach ($requiredServices as $service) {
    try {
        $container->get($service);
        $container->get('dependencies_logger')->info("✅ Service loaded successfully: {$service}");
    } catch (Exception $e) {
        $container->get('dependencies_logger')->critical("❌ Service failed to load: {$service}", ['trace' => $e->getTraceAsString()]);
        die("❌ Service failure: {$service}: " . $e->getMessage() . "\n");
    }
}

$container->get('dependencies_logger')->info("✅ DI container validation completed successfully.");

// Before returning the container, verify security-related services load successfully.
try {
    $container->get(AuthService::class);
    $container->get(Validator::class);
    $container->get(EncryptionService::class);
    $container->get('security_logger')->info("✅ All security-dependent services loaded successfully.");
} catch (Exception $e) {
    $container->get('security_logger')->critical("❌ Security-related service failed: " . $e->getMessage());
    die("❌ Security-related service failure: " . $e->getMessage() . "\n");
}

// Ensure container integrity before return.
return [
    'db'                => $container->get('db'),
    'secure_db'         => $container->get('secure_db'),
    'logger'            => $container->get(LoggerInterface::class),
    'auditService'      => $container->get(AuditService::class),
    'encryptionService' => $container->get(EncryptionService::class),
    'container'         => $container,
];
=== config/database.php ===
<?php
use Dotenv\Dotenv;

// ✅ Ensure `.env` is loaded before accessing database credentials
$dotenvPath = __DIR__ . '/../';
if (file_exists($dotenvPath . '.env')) {
    $dotenv = Dotenv::createImmutable($dotenvPath);
    $dotenv->load();
}

// ✅ Log database configurations for debugging (ONLY FOR DEVELOPMENT)
// ✅ Return structured database configurations
return [
    'app_database' => [
        'driver'    => 'mysql',
        'host'      => getenv('DB_HOST') ?: 'localhost',
        'database'  => getenv('DB_DATABASE') ?: '',
        'username'  => getenv('DB_USERNAME') ?: '',
        'password'  => getenv('DB_PASSWORD') ?: '',
        'charset'   => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix'    => '',
    ],
    'secure_database' => [
        'driver'    => 'mysql',
        'host'      => getenv('SECURE_DB_HOST') ?: 'localhost',
        'database'  => getenv('SECURE_DB_DATABASE') ?: '',
        'username'  => getenv('SECURE_DB_USERNAME') ?: '',
        'password'  => getenv('SECURE_DB_PASSWORD') ?: '',
        'charset'   => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix'    => '',
    ]
];
=== config/payu.php ===
<?php
return [
    'api_key' => 'your-payu-api-key',
    'api_secret' => 'your-payu-api-secret',
    'endpoint' => 'https://secure.payu.com/api',
    'merchant_key' => 'your-merchant-key',
    'merchant_salt' => 'your-merchant-salt',
];
=== config/signature.php ===
<?php

return [
    'api_endpoint' => 'https://api.example.com',
    'api_key' => 'your-api',
];=== config/storage.php ===
<?php

return [
    'base_directory' => __DIR__ . '/../storage/',

    'security' => [
        'permissions' => [
            'default' => 0640,  // Default file permissions (owner read/write)
            'directory' => 0755, // Default directory permissions
        ],
        'max_file_size' => 5 * 1024 * 1024, // Max file size (5MB)
        'allowed_extensions' => ['png', 'jpg', 'svg', 'pdf', 'docx'],
    ],

    'encryption' => [
        'enabled' => true,
    ],
];
=== config/logs.php ===
<?php

/**
 * Logging Configuration
 */

return [
    'log_channel' => 'daily',  // Options: single, daily, syslog
    'log_path' => __DIR__ . '/../logs/app.log',
    'log_level' => 'debug',  // Options: debug, info, notice, warning, error, critical, alert, emergency
];
=== config/notifications.php ===
<?php

return [
    'smtp_host' => 'smtp.example.com',
    'smtp_user' => 'user@example.com',
    'smtp_password' => 'password',
    'smtp_secure' => 'tls',
    'smtp_port' => 587,
    'from_email' => 'no-reply@example.com',
    'from_name' => 'CarFuse Notifications',
    'fcm_api_key' => 'YOUR_FCM_API_KEY_HERE'
];
=== config/keymanager.php ===
<?php

return [
    'keys' => [
        'default' => 'your-default-key-here',
        'encryption' => getenv('ENCRYPTION_KEY') ?: 'fallback-encryption-key-32chars',
        'jwt_signing' => getenv('JWT_SECRET') ?: 'fallback-jwt-secret-32chars',
    ]
];
=== config/routes.php ===
<?php

use FastRoute\RouteCollector;
use function FastRoute\simpleDispatcher;
use App\Middleware\AuthMiddleware;
use App\Helpers\SecurityHelper;
use App\Helpers\ApiHelper;

return simpleDispatcher(function (RouteCollector $router) {

    // ✅ Define Public View Routes
    $router->addRoute(['GET'], '/', fn() => require '../public/views/home.php');
    $router->addRoute(['GET'], '/dashboard', fn() => require '../public/views/dashboard.php');
    $router->addRoute(['GET'], '/profile', fn() => require '../public/views/user/profile.php');
    $router->addRoute(['GET'], '/reports', fn() => require '../public/views/user/reports.php');
    $router->addRoute(['GET'], '/auth/login', fn() => require '../public/views/auth/login.php');
    $router->addRoute(['GET'], '/auth/register', fn() => require '../public/views/auth/register.php');
    $router->addRoute(['GET'], '/auth/password_reset', fn() => require '../public/views/auth/password_reset.php');
    $router->addRoute(['GET'], '/documents/signing_page', fn() => require '../public/views/documents/signing_page.php');

    // ✅ Define API Routes with Authentication and Middleware
    $router->addRoute(['POST'], '/api/auth/login', 'App\Controllers\AuthController@login');
    $router->addRoute(['POST'], '/api/auth/register', 'App\Controllers\AuthController@register');
    $router->addRoute(['POST'], '/api/auth/refresh', 'App\Controllers\AuthController@refresh');
    $router->addRoute(['POST'], '/api/auth/logout', 'App\Controllers\AuthController@logout');

    // ✅ Protected API Routes (Require Authentication)
    $router->addRoute(['GET'], '/api/user/profile', function () {
        AuthMiddleware::requireAuth();
        require '../public/api/user/profile.php';
    });

    $router->addRoute(['GET'], '/api/user/settings', function () {
        AuthMiddleware::requireAuth();
        require '../public/api/user/settings.php';
    });

    $router->addRoute(['GET'], '/api/user/notifications', function () {
        AuthMiddleware::requireAuth();
        require '../public/api/user/notifications.php';
    });

    $router->addRoute(['GET'], '/api/dashboard/metrics', function () {
        AuthMiddleware::requireAuth();
        require '../public/api/dashboard/metrics.php';
    });

    $router->addRoute(['GET'], '/api/dashboard/reports', function () {
        AuthMiddleware::requireAuth();
        require '../public/api/dashboard/reports.php';
    });

    // ✅ Booking API Routes
    $router->addRoute(['POST'], '/api/bookings/create', 'App\Controllers\BookingController@createBooking');
    $router->addRoute(['GET'], '/api/bookings/view/{id:\d+}', 'App\Controllers\BookingController@viewBooking');
    $router->addRoute(['POST'], '/api/bookings/cancel/{id:\d+}', 'App\Controllers\BookingController@cancelBooking');
    $router->addRoute(['POST'], '/api/bookings/reschedule/{id:\d+}', 'App\Controllers\BookingController@rescheduleBooking');

    // ✅ Payment API Routes
    $router->addRoute(['POST'], '/api/payments/process', 'App\Controllers\PaymentController@processPayment');
    $router->addRoute(['POST'], '/api/payments/refund/{id:\d+}', 'App\Controllers\PaymentController@refundPayment');
    $router->addRoute(['GET'], '/api/payments/history', 'App\Controllers\PaymentController@paymentHistory');

    // ✅ Report API Routes
    $router->addRoute(['POST'], '/api/reports/generate', 'App\Controllers\ReportController@generateReport');
    $router->addRoute(['GET'], '/api/reports/view/{id:\d+}', 'App\Controllers\ReportController@viewReport');

    // ✅ Admin API Routes
    $router->addRoute(['GET'], '/api/admin/users', function () {
        AuthMiddleware::requireAdmin();
        require '../public/api/admin/users.php';
    });

    $router->addRoute(['GET'], '/api/admin/dashboard', function () {
        AuthMiddleware::requireAdmin();
        require '../public/api/admin/dashboard.php';
    });

    $router->addRoute(['GET'], '/api/admin/logs', function () {
        AuthMiddleware::requireAdmin();
        require '../public/api/admin/logs.php';
    });

    // ✅ Document API Routes
    $router->addRoute(['POST'], '/api/documents/upload', 'App\Controllers\DocumentController@uploadDocument');
    $router->addRoute(['POST'], '/api/documents/sign', 'App\Controllers\DocumentController@signDocument');
    $router->addRoute(['GET'], '/api/documents/view/{id:\d+}', 'App\Controllers\DocumentController@viewDocument');

    // ✅ System API Routes
    $router->addRoute(['GET'], '/api/system/logs', function () {
        AuthMiddleware::requireAdmin();
        require '../public/api/system/logs.php';
    });

    $router->addRoute(['GET'], '/api/system/status', function () {
        AuthMiddleware::requireAuth();
        require '../public/api/system/status.php';
    });

    // ✅ Catch-All for Unmatched Requests
    $router->addRoute(['GET', 'POST'], '/{any:.+}', function () {
        http_response_code(404);
        echo json_encode(["error" => "Not Found"]);
    });
});
=== config/document.php ===
<?php

return [
    'encryption' => [
        'enabled' => true, // Toggle document encryption
    ],
    'storage' => [
        'contracts' => 'contracts/',
        'templates' => 'templates/',
        'terms' => 'templates/terms_and_conditions.html',
    ],
];
=== config/documents.php ===
<?php
/**
 * File: config/documents.php
 * Purpose: Configuration for the Document Management System.
 */

return [
    // Storage Paths
    'storage' => [
        'user_documents' => __DIR__ . '/../../storage/documents/users/', // Path for user-specific documents
        'templates' => __DIR__ . '/../../storage/documents/templates/', // Path for document templates
        'terms_and_conditions' => __DIR__ . '/../../storage/documents/terms/', // Path for T&C documents
    ],

    // Encryption Settings
    'encryption' => [
        'aes_key' => getenv('DOCUMENT_AES_KEY') ?: 'default_secure_key', // AES Encryption Key
    ],

    // Document Types
    'allowed_types' => ['pdf', 'docx'], // Allowed document file types

    // Naming Conventions
    'naming' => [
        'contract_format' => 'contract_booking_{booking_id}_{timestamp}.pdf', // Format for contract names
        'invoice_format' => 'invoice_booking_{booking_id}_{timestamp}.pdf',  // Format for invoice names
    ],

    // Retention Policy
    'retention_policy' => [
        'contracts' => '10 years', // Retention period for contracts
        'invoices' => '7 years',   // Retention period for invoices
    ],
];
=== config/audit.php ===
<?php
/**
 * File: audit.php
 * Purpose: Configuration file for the Audit Manager module.
 * Path: audit_manager/config/audit.php
 * 
 * Changelog:
 * - [2025-01-25] Initial creation of the file.
 * - [2025-01-27] Added logging level configuration and encryption details.
 * - [2025-01-28] Updated access control and notification settings.
 */

return [
    // General settings
    'enabled' => true, // Enable or disable the audit manager

    // Log file storage settings
    'storage' => [
        'directory' => __DIR__ . '/../logs', // Directory where logs will be stored
        'file_prefix' => 'audit_', // Prefix for log files
        'rotation' => [
            'enabled' => true, // Enable log rotation
            'frequency' => 'daily', // Rotate logs daily
            'max_files' => 30, // Keep logs for the last 30 days
        ],
    ],

    // Logging levels
    'log_levels' => [
        'info' => true, // Log informational messages
        'warning' => true, // Log warnings
        'error' => true, // Log errors
        'critical' => true, // Log critical system events
    ],

    // Encryption settings
    'encryption' => [
        'enabled' => true, // Enable AES encryption for sensitive log entries
        'key' => $_ENV['ENCRYPTION_KEY'] ?? 'your-encryption-key-here', // AES encryption key (store securely)
        'cipher' => 'AES-256-CBC', // Cipher method
    ],

    // Filters for accessing logs
    'filters' => [
        'by_user' => true, // Enable filtering logs by user ID
        'by_booking' => true, // Enable filtering logs by booking ID
        'by_date' => true, // Enable filtering logs by date range
    ],

    // Access control
    'access' => [
        'allowed_roles' => ['admin', 'audit_manager'], // Roles allowed to access the logs
    ],

    // Notification settings
    'notifications' => [
        'enabled' => true, // Enable email notifications for critical events
        'email_recipients' => explode(',', $_ENV['AUDIT_NOTIFICATION_EMAILS'] ?? 'admin@example.com'), // Recipients for critical event notifications
    ],
];
=== config/Migrations/setup_secure_database.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../App/Helpers/DatabaseHelper.php';

use Illuminate\Database\Capsule\Manager as Capsule;
use App\Helpers\DatabaseHelper;

// ✅ Initialize Secure Database
DatabaseHelper::getSecureInstance();

// ✅ Log Setup
$logFilePath = __DIR__ . '/../logs/secure_db_setup.log';
file_put_contents($logFilePath, "🚀 Secure Database Setup Started at " . date('Y-m-d H:i:s') . "\n", FILE_APPEND);

// ✅ Define Secure Tables (No Cross-Database Foreign Keys)
$tables = [
    "consent_logs" => "
        CREATE TABLE IF NOT EXISTS consent_logs (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference VARCHAR(255) NOT NULL,
            ip_address VARCHAR(45) NOT NULL,
            consent_given TINYINT(1) DEFAULT 0,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "logs" => "
        CREATE TABLE IF NOT EXISTS logs (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference BIGINT UNSIGNED NOT NULL,
            action VARCHAR(255) NOT NULL,
            details TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "audit_trails" => "
        CREATE TABLE IF NOT EXISTS audit_trails (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            action VARCHAR(255) NOT NULL,
            details TEXT NOT NULL,
            user_reference BIGINT UNSIGNED NULL,
            booking_reference BIGINT UNSIGNED NULL,
            ip_address VARCHAR(45),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "contracts" => "
        CREATE TABLE IF NOT EXISTS contracts (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            booking_reference BIGINT UNSIGNED NOT NULL,
            user_reference BIGINT UNSIGNED NOT NULL,
            contract_pdf VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    "
];

// ✅ Execute Table Creation with Error Handling
foreach ($tables as $tableName => $sql) {
    try {
        Capsule::connection('secure')->statement($sql);
        file_put_contents($logFilePath, "[✅] Secure Table `{$tableName}` created successfully.\n", FILE_APPEND);
    } catch (Exception $e) {
        file_put_contents($logFilePath, "[❌] Error creating `{$tableName}`: " . $e->getMessage() . "\n", FILE_APPEND);
    }
}

file_put_contents($logFilePath, "✅ Secure Database Setup Completed Successfully.\n", FILE_APPEND);
echo "[🚀] Secure database setup completed. Check `logs/secure_db_setup.log` for details.\n";
=== config/Migrations/crete_audit_trail_table.php ===
<?php
/**
 * File: create_audit_trail_table.php
 * Purpose: Creates the `audit_trails` table for recording audit trail logs.
 */

require_once __DIR__ . '/../../bootstrap.php'; // Ensure this points to the correct path for database initialization.

try {
    $pdo = new PDO(DB_DSN, DB_USER, DB_PASS, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    ]);

    echo "Connected to the database successfully.\n";

    $query = "
        CREATE TABLE IF NOT EXISTS audit_trails (
            id BIGINT AUTO_INCREMENT PRIMARY KEY,
            action VARCHAR(255) NOT NULL,
            details TEXT NOT NULL,
            user_id INT NULL,
            booking_id INT NULL,
            ip_address VARCHAR(45),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ";

    $pdo->exec($query);
    echo "Table `audit_trails` created successfully.\n";

} catch (PDOException $e) {
    echo "Database error: " . $e->getMessage() . "\n";
    exit(1);
}
=== config/Migrations/setup_database.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../App/Helpers/DatabaseHelper.php';

use Illuminate\Database\Capsule\Manager as Capsule;
use App\Helpers\DatabaseHelper;

// ✅ Initialize Application Database
DatabaseHelper::getInstance();

// ✅ Define Tables (Ensuring Correct Creation Order)
$tables = [

    // ✅ Ensure `fleet` exists before any table references it
    "fleet" => "
        CREATE TABLE IF NOT EXISTS fleet (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            make VARCHAR(255) NOT NULL,
            model VARCHAR(255) NOT NULL,
            registration_number VARCHAR(20) NOT NULL UNIQUE,
            availability TINYINT(1) DEFAULT 1,
            last_maintenance_date DATE DEFAULT NULL,
            next_maintenance_date DATE DEFAULT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "users" => "
        CREATE TABLE IF NOT EXISTS users (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            surname VARCHAR(255) NOT NULL,
            email VARCHAR(255) NOT NULL UNIQUE,
            phone VARCHAR(15),
            address TEXT,
            pesel_or_id VARCHAR(20),
            updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            password_hash VARCHAR(255) NOT NULL,
            role ENUM('user', 'admin') DEFAULT 'user',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            email_notifications TINYINT(1) DEFAULT 0,
            sms_notifications TINYINT(1) DEFAULT 0,
            active TINYINT(1) DEFAULT 1,
            deleted_at TIMESTAMP NULL DEFAULT NULL
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "bookings" => "
        CREATE TABLE IF NOT EXISTS bookings (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference BIGINT UNSIGNED NOT NULL,
            vehicle_id BIGINT UNSIGNED NOT NULL,
            pickup_date DATE NOT NULL,
            dropoff_date DATE NOT NULL,
            total_price DECIMAL(10,2) NOT NULL,
            status ENUM('active', 'canceled') DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_reference) REFERENCES users(id) ON DELETE CASCADE,
            FOREIGN KEY (vehicle_id) REFERENCES fleet(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "notifications" => "
        CREATE TABLE IF NOT EXISTS notifications (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference BIGINT UNSIGNED NOT NULL,
            type ENUM('email','sms') NOT NULL,
            message TEXT NOT NULL,
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_read TINYINT(1) DEFAULT 0,
            FOREIGN KEY (user_reference) REFERENCES users(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "admin_notification_settings" => "
        CREATE TABLE IF NOT EXISTS admin_notification_settings (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            admin_reference BIGINT UNSIGNED NOT NULL,
            contract_alerts TINYINT(1) DEFAULT 0,
            maintenance_alerts TINYINT(1) DEFAULT 0,
            booking_reminders TINYINT(1) DEFAULT 0,
            FOREIGN KEY (admin_reference) REFERENCES users(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "maintenance_logs" => "
        CREATE TABLE IF NOT EXISTS maintenance_logs (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            vehicle_id BIGINT UNSIGNED NOT NULL,
            description TEXT NOT NULL,
            maintenance_date DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (vehicle_id) REFERENCES fleet(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "availability" => "
        CREATE TABLE IF NOT EXISTS availability (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            vehicle_id BIGINT UNSIGNED NOT NULL,
            date DATE NOT NULL,
            status ENUM('available','unavailable') DEFAULT 'available',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE (vehicle_id, date),
            FOREIGN KEY (vehicle_id) REFERENCES fleet(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",
        "password_resets" => "
        CREATE TABLE IF NOT EXISTS password_resets (
        id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        email VARCHAR(255) NOT NULL,
        token VARCHAR(255) NOT NULL,
        ip_address VARCHAR(45),
        expires_at TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_email (email),
        INDEX idx_token (token)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    "
];

// ✅ Execute Table Creation with Error Handling
$logFilePath = __DIR__ . '/../logs/database_setup.log';
file_put_contents($logFilePath, "🚀 Database Setup Started at " . date('Y-m-d H:i:s') . "\n", FILE_APPEND);

foreach ($tables as $tableName => $sql) {
    try {
        Capsule::statement($sql);
        file_put_contents($logFilePath, "[✅] Table `{$tableName}` created successfully.\n", FILE_APPEND);
    } catch (Exception $e) {
        file_put_contents($logFilePath, "[❌] Error creating `{$tableName}`: " . $e->getMessage() . "\n", FILE_APPEND);
    }
}

file_put_contents($logFilePath, "✅ Database setup completed successfully.\n", FILE_APPEND);
echo "[🚀] Application database setup completed. Check `logs/database_setup.log` for details.\n";
