=== config/filestorage.php ===
<?php
/**
 * File: filestorage.php
 * Purpose: Configuration file for the FileStorage service in DocumentManager.
 * Path: DocumentManager/config/filestorage.php
 *
 * Changelog:
 * - [2025-01-28] Initial creation of the file.
 */

return [
    // General file storage settings
    'base_directory' => '/path/to/filestorage', // Base directory for storing files

    // Storage structure
    'directories' => [
        'templates' => 'Templates', // Directory for storing document templates
        'users' => 'Users', // Directory for user-specific documents
        'logs' => '../logs', // Directory for storing logs (relative to base)
    ],

    // File security settings
    'security' => [
        'allowed_extensions' => ['jpg', 'png', 'pdf', 'docx'], // Allowed file extensions
        'max_file_size' => 10485760, // Max file size (10 MB in bytes)
        'encryption' => [
            'enabled' => true, // Enable encryption for stored files
        ],
        'permissions' => [
            'default' => 0640, // Default file permissions (read/write for owner, read for group)
        ],
    ],

    // Temporary storage settings
    'temporary' => [
        'enabled' => true, // Enable temporary storage
        'directory' => __DIR__ . '/../Storage/Temp', // Temp directory path
        'cleanup_interval' => 86400, // Time in seconds to clean up old temp files (24 hours)
    ],

    // Error handling and logging
    'error_handling' => [
        'log_errors' => true, // Log errors related to file storage
        'log_file' => __DIR__ . '/../logs/filestorage.log', // Log file for file storage errors
    ],
];
=== config/encryption.php ===
<?php
use Dotenv\Dotenv;

$logFile = __DIR__ . '/../logs/errors.log';

try {
    // ✅ Ensure `.env` is loaded before accessing encryption keys
    $dotenvPath = __DIR__ . '/../';
    if (file_exists($dotenvPath . '.env')) {
        $dotenv = Dotenv::createImmutable($dotenvPath);
        $dotenv->load();
    }

    // ✅ Load Environment Variables (If `.env` Exists)
    if (file_exists(__DIR__ . '/../.env')) {
        $env = parse_ini_file(__DIR__ . '/../.env');
    } else {
        $env = [];
    }

    // ✅ Retrieve Secure Keys from `.env` or Use Safe Fallbacks
    $jwtSecret = $env['JWT_SECRET'] ?? getenv('JWT_SECRET') ?: 'default_secure_fallback_key_32_characters_long';
    $jwtRefreshSecret = $env['JWT_REFRESH_SECRET'] ?? getenv('JWT_REFRESH_SECRET') ?: 'your-secure-refresh-jwt-secret';
    $encryptionKey = $env['ENCRYPTION_KEY'] ?? getenv('ENCRYPTION_KEY') ?: 'default_fallback_encryption_key_32+characters_long';

    // ✅ Validate JWT & Encryption Key Lengths
    if (strlen($jwtSecret) < 32) {
        throw new Exception('JWT secret key must be at least 32 characters long.');
    }
    if (strlen($jwtRefreshSecret) < 32) {
        throw new Exception('JWT refresh secret key must be at least 32 characters long.');
    }
    if (strlen($encryptionKey) < 32) {
        throw new Exception('Encryption key must be at least 32 characters long.');
    }

    // ✅ Return Secure Configuration
    return [
        'encryption_key' => $encryptionKey,
        'cipher' => 'AES-256-CBC',
        'jwt_secret' => $jwtSecret,
        'jwt_refresh_secret' => $jwtRefreshSecret,
    ];
} catch (Exception $e) {
    $timestamp = date('Y-m-d H:i:s');
    error_log("[$timestamp][error] Encryption configuration error: " . $e->getMessage() . "\n", 3, $logFile);
    
    // ✅ Prevent Information Leakage
    http_response_code(500);
    exit('Internal Server Error');
}
?>
=== config/app.php ===
<?php
use Dotenv\Dotenv;

/**
 * General Application Configuration
 */

// ✅ Ensure `.env` is loaded before accessing app settings
$dotenvPath = __DIR__ . '/../';
if (file_exists($dotenvPath . '.env')) {
    $dotenv = Dotenv::createImmutable($dotenvPath);
    $dotenv->load();
}

// ✅ Return structured app configurations
return [
    'environment' => getenv('APP_ENV') ?: 'production',
    'debug'       => getenv('APP_DEBUG') === 'true',
];
=== config/dependencies/database_dependencies.php ===
<?php

/**
 * Database Dependencies Configuration
 * 
 * This file contains all database-related dependency registrations for the DI container.
 * It centralizes the database configuration to make the main dependencies.php cleaner.
 */

use DI\Container;
use App\Helpers\DatabaseHelper;
use Psr\Log\LoggerInterface;

/**
 * Register database dependencies in the container
 * 
 * @param Container $container The DI container
 * @param array $config Database configuration
 * @return Container The container with registered database dependencies
 * @throws Exception When database initialization fails
 */
function registerDatabases(Container $container, array $config): Container
{
    // Get database logger from container
    $dbLogger = $container->get('db_logger');
    $systemLogger = $container->get(LoggerInterface::class);
    
    try {
        // 1. Set the logger for DatabaseHelper
        DatabaseHelper::setLogger($dbLogger);
        
        // 2. Initialize the app database instance
        if (!isset($config['app_database']) || !is_array($config['app_database'])) {
            throw new Exception("App database configuration missing or invalid");
        }
        $database = DatabaseHelper::getInstance($config['app_database']);
        $dbLogger->info("✅ App database initialized successfully");
        
        // 3. Initialize the secure database instance for sensitive operations
        if (!isset($config['secure_database']) || !is_array($config['secure_database'])) {
            throw new Exception("Secure database configuration missing or invalid");
        }
        $secureDatabase = DatabaseHelper::getSecureInstance($config['secure_database']);
        $dbLogger->info("✅ Secure database initialized successfully");
        
        // 4. Register the app database instance as the default DatabaseHelper
        $container->set(DatabaseHelper::class, fn() => $database);
        
        // 5. Register database instances in container
        $container->set('db', fn() => $database); // Generic key for app database
        $container->set('secure_db', fn() => $secureDatabase);
        
        // 6. Verify app database connection
        verifyDatabaseConnection($database, $dbLogger, 'App');
        
        // 7. Verify secure database connection
        verifyDatabaseConnection($secureDatabase, $dbLogger, 'Secure');
        
        return $container;
    } catch (Exception $e) {
        $dbLogger->error("❌ Database initialization failed: " . $e->getMessage());
        $systemLogger->critical("Database initialization failed", [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);
        throw new Exception("Database initialization failed: " . $e->getMessage());
    }
}

/**
 * Verify a database connection by attempting to get a PDO instance
 * 
 * @param DatabaseHelper $db Database helper instance
 * @param LoggerInterface $logger Logger for recording results
 * @param string $type Type of database (for logging)
 * @return bool True if connection is valid
 * @throws Exception When connection fails
 */
function verifyDatabaseConnection(DatabaseHelper $db, LoggerInterface $logger, string $type = 'Database'): bool
{
    try {
        $pdo = $db->getConnection()->getPdo();
        if (!$pdo) {
            throw new Exception("Failed to get PDO instance");
        }
        
        // Try a simple query to verify connection is working
        $pdo->query('SELECT 1');
        
        $logger->info("✅ {$type} database connection verified successfully");
        return true;
    } catch (Exception $e) {
        $logger->critical("❌ {$type} database connection failed: " . $e->getMessage());
        throw new Exception("{$type} database connection failed: " . $e->getMessage());
    }
}

/**
 * Get database configuration from a file
 * 
 * @param string $configPath Path to the database config file
 * @return array Database configuration
 * @throws Exception When config file doesn't exist or has invalid structure
 */
function getDatabaseConfig(string $configPath): array
{
    if (!file_exists($configPath)) {
        throw new Exception("Database configuration file not found: {$configPath}");
    }
    
    $config = require $configPath;
    
    if (!is_array($config) || !isset($config['app_database']) || !isset($config['secure_database'])) {
        throw new Exception("Invalid database configuration structure");
    }
    
    return $config;
}

/**
 * Initialize Eloquent ORM for a database
 * 
 * @param DatabaseHelper $dbHelper Database helper instance
 * @return void
 */
function initializeEloquent(DatabaseHelper $dbHelper): void
{
    $dbHelper->bootEloquent();
}

// If this file is included directly, return a container with registered databases
if (!isset($container) && basename($_SERVER['SCRIPT_FILENAME']) == basename(__FILE__)) {
    $container = new Container();
    
    // Simple logger for standalone mode
    $container->set('db_logger', function() {
        $logger = new \Monolog\Logger('database');
        $handler = new \Monolog\Handler\StreamHandler('php://stderr');
        $logger->pushHandler($handler);
        return $logger;
    });
    
    $container->set(LoggerInterface::class, $container->get('db_logger'));
    
    // Get database config
    $config = getDatabaseConfig(__DIR__ . '/database.php');
    
    // Register databases
    $container = registerDatabases($container, $config);
    
    return $container;
}
=== config/dependencies/logging_dependencies.php ===
<?php

/**
 * Logging Dependencies Configuration
 * 
 * This file contains all logging-related dependency registrations for the DI container.
 * It centralizes the logger configuration to make the main dependencies.php cleaner.
 */

use Psr\Log\LoggerInterface;
use DI\Container;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\RotatingFileHandler;
use Monolog\Formatter\LineFormatter;
use Monolog\Processor\IntrospectionProcessor;
use Monolog\Processor\WebProcessor;
use Monolog\Processor\MemoryUsageProcessor;

/**
 * Register logger dependencies in the container
 * 
 * @param Container $container The DI container
 * @return Container The container with registered loggers
 */
function registerLoggers(Container $container): Container
{
    // Define log directory
    $logDir = __DIR__ . '/../logs';
    
    // Create logs directory if it doesn't exist
    if (!is_dir($logDir)) {
        mkdir($logDir, 0775, true);
    }
    
    // Set up formatter for consistent log format
    $dateFormat = "Y-m-d H:i:s";
    $lineFormat = "[%datetime%] [%level_name%] %channel%: %message% %context% %extra%\n";
    $formatter = new LineFormatter($lineFormat, $dateFormat);
    
    // Common processors for all loggers
    $processors = [
        new WebProcessor(),
        new IntrospectionProcessor(),
        new MemoryUsageProcessor()
    ];
    
    // Register main system logger (PSR-3 compatible)
    $container->set(LoggerInterface::class, function() use ($logDir, $formatter, $processors) {
        $logger = new Logger('system');
        $handler = new RotatingFileHandler(
            $logDir . '/system.log',
            10, // Keep 10 days of logs
            Logger::INFO
        );
        $handler->setFormatter($formatter);
        $logger->pushHandler($handler);
        
        // Add processors
        foreach ($processors as $processor) {
            $logger->pushProcessor($processor);
        }
        
        return $logger;
    });
    
    // Register specialized loggers
    $specializedLoggers = [
        'auth_logger' => [
            'name' => 'auth',
            'level' => Logger::INFO
        ],
        'db_logger' => [
            'name' => 'db',
            'level' => Logger::DEBUG
        ],
        'api_logger' => [
            'name' => 'api',
            'level' => Logger::INFO
        ],
        'security_logger' => [
            'name' => 'security',
            'level' => Logger::INFO
        ],
        'audit_logger' => [
            'name' => 'audit',
            'level' => Logger::INFO
        ],
        'dependencies_logger' => [
            'name' => 'dependencies',
            'level' => Logger::INFO
        ],
        'user_logger' => [
            'name' => 'user',
            'level' => Logger::INFO
        ]
    ];
    
    // Register each specialized logger
    foreach ($specializedLoggers as $key => $config) {
        $container->set($key, function() use ($logDir, $formatter, $processors, $config) {
            $logger = new Logger($config['name']);
            $handler = new RotatingFileHandler(
                $logDir . '/' . $config['name'] . '.log',
                10, // Keep 10 days of logs
                $config['level']
            );
            $handler->setFormatter($formatter);
            $logger->pushHandler($handler);
            
            // Add processors
            foreach ($processors as $processor) {
                $logger->pushProcessor($processor);
            }
            
            return $logger;
        });
    }
    
    return $container;
}

/**
 * Helper function to get a logger by name (useful for direct invocation)
 * 
 * @param string $name Logger name
 * @return Logger The configured logger
 */
function getConfiguredLogger(string $name): Logger
{
    $logDir = __DIR__ . '/../logs';
    
    // Create logs directory if it doesn't exist
    if (!is_dir($logDir)) {
        mkdir($logDir, 0775, true);
    }
    
    // Set up formatter
    $dateFormat = "Y-m-d H:i:s";
    $lineFormat = "[%datetime%] [%level_name%] %channel%: %message% %context% %extra%\n";
    $formatter = new LineFormatter($lineFormat, $dateFormat);
    
    // Create logger
    $logger = new Logger($name);
    $handler = new RotatingFileHandler(
        $logDir . '/' . $name . '.log',
        10,
        Logger::INFO
    );
    $handler->setFormatter($formatter);
    $logger->pushHandler($handler);
    
    // Add processors
    $logger->pushProcessor(new WebProcessor());
    $logger->pushProcessor(new IntrospectionProcessor());
    $logger->pushProcessor(new MemoryUsageProcessor());
    
    return $logger;
}

// If this file is included directly, return a container with registered loggers
if (!isset($container) && basename($_SERVER['SCRIPT_FILENAME']) == basename(__FILE__)) {
    $container = new Container();
    $container = registerLoggers($container);
    return $container;
}
=== config/dependencies/service_dependencies.php ===
<?php

/**
 * Service Dependencies Configuration
 * 
 * This file contains all service-related dependency registrations for the DI container.
 * It centralizes service registrations to make the main dependencies.php cleaner.
 */

use DI\Container;
use Psr\Log\LoggerInterface;
use App\Helpers\DatabaseHelper;
use App\Helpers\ExceptionHandler;
use App\Services\Validator;
use App\Services\RateLimiter;
use App\Services\Auth\TokenService;
use App\Services\Auth\AuthService;
use App\Services\NotificationService;
use App\Services\UserService;
use App\Services\PaymentService;
use App\Services\BookingService;
use App\Services\MetricsService;
use App\Services\ReportService;
use App\Services\RevenueService;
use App\Services\EncryptionService;
use App\Services\Security\KeyManager;
use App\Services\DocumentService;
use App\Services\FileStorage;
use App\Services\TemplateService;
use App\Services\SignatureService;
use App\Services\AuditService;

/**
 * Register all service dependencies in the container
 * 
 * @param Container $container The DI container
 * @param array $config Configuration values
 * @return Container The container with registered services
 */
function registerServices(Container $container, array $config): Container
{
    // Register basic services first (those with fewer dependencies)
    registerBaseServices($container, $config);
    
    // Register auth services (TokenService and AuthService)
    registerAuthServices($container, $config);
    
    // Register business logic services
    registerBusinessServices($container, $config);
    
    // Register file and document services
    registerDocumentServices($container, $config);
    
    // Register security and audit services
    registerSecurityServices($container, $config);
    
    $container->get(LoggerInterface::class)->info("All services registered successfully");
    
    return $container;
}

/**
 * Register base services (those with minimal dependencies)
 */
function registerBaseServices(Container $container, array $config): void
{
    // Validator service (for input validation)
    $container->set(Validator::class, function($c) {
        return new Validator(
            $c->get('api_logger'),
            $c->get(DatabaseHelper::class),
            $c->get(ExceptionHandler::class)
        );
    });
    
    // Rate limiter service (for API rate limiting)
    $container->set(RateLimiter::class, function($c) {
        return new RateLimiter(
            $c->get('api_logger'),
            $c->get(ExceptionHandler::class)
        );
    });
    
    // Encryption service (for data encryption)
    $container->set(EncryptionService::class, function($c) use ($config) {
        return new EncryptionService(
            $c->get('api_logger'),
            $c->get(ExceptionHandler::class),
            $config['encryption']['encryption_key'] ?? ''
        );
    });
    
    // Template service (for document templates)
    $container->set(TemplateService::class, function($c) {
        return new TemplateService(
            $c->get('api_logger'),
            __DIR__ . '/../storage/templates',
            $c->get(ExceptionHandler::class)
        );
    });
}

/**
 * Register authentication and authorization services
 */
function registerAuthServices(Container $container, array $config): void
{
    // TokenService for JWT token management
    $container->set(TokenService::class, function($c) use ($config) {
        return new TokenService(
            $config['encryption']['jwt_secret'],
            $config['encryption']['jwt_refresh_secret'],
            3600, // JWT TTL: 1 hour
            604800, // Refresh Token TTL: 7 days
            $c->get('auth_logger'),
            $c->get(ExceptionHandler::class)
        );
    });
    
    // AuthService for user authentication
    $container->set(AuthService::class, function($c) use ($config) {
        return new AuthService(
            $c->get(DatabaseHelper::class),
            $c->get(TokenService::class),
            $c->get(ExceptionHandler::class),
            $c->get('auth_logger'),
            $c->get('audit_logger'),
            $config['encryption'],
            $c->get(Validator::class)
        );
    });
}

/**
 * Register core business logic services
 */
function registerBusinessServices(Container $container, array $config): void
{
    // UserService for user management
    $container->set(UserService::class, function($c) {
        return new UserService(
            $c->get(DatabaseHelper::class),
            $c->get('user_logger'),
            $c->get('audit_logger'),
            $c->get(ExceptionHandler::class),
            $c->get(Validator::class)
        );
    });
    
    // NotificationService for sending notifications
    $container->set(NotificationService::class, function($c) use ($config) {
        return new NotificationService(
            $c->get('api_logger'),
            $c->get(ExceptionHandler::class),
            $c->get(DatabaseHelper::class),
            $config['notifications'] ?? []
        );
    });
    
    // PaymentService for payment processing
    $container->set(PaymentService::class, function($c) {
        return new PaymentService(
            $c->get('db_logger'),
            $c->get(DatabaseHelper::class),
            $c->get(ExceptionHandler::class)
        );
    });
    
    // BookingService for booking management
    $container->set(BookingService::class, function($c) {
        return new BookingService(
            $c->get('api_logger'),
            $c->get(ExceptionHandler::class),
            $c->get(DatabaseHelper::class)
        );
    });
    
    // MetricsService for analytics and metrics
    $container->set(MetricsService::class, function($c) {
        return new MetricsService(
            $c->get('api_logger'),
            $c->get(ExceptionHandler::class),
            $c->get(DatabaseHelper::class)
        );
    });
    
    // ReportService for generating reports
    $container->set(ReportService::class, function($c) {
        return new ReportService(
            $c->get('api_logger'),
            $c->get(DatabaseHelper::class),
            $c->get(ExceptionHandler::class)
        );
    });
    
    // RevenueService for revenue management
    $container->set(RevenueService::class, function($c) {
        return new RevenueService(
            $c->get('db_logger'),
            $c->get(DatabaseHelper::class),
            $c->get(ExceptionHandler::class)
        );
    });
}

/**
 * Register document and file services
 */
function registerDocumentServices(Container $container, array $config): void
{
    // FileStorage for file management
    $container->set(FileStorage::class, function($c) use ($config) {
        return new FileStorage(
            $config['filestorage'],
            $c->get(EncryptionService::class),
            $c->get('api_logger'),
            $c->get(ExceptionHandler::class)
        );
    });
    
    // SignatureService for document signing
    $container->set(SignatureService::class, function($c) use ($config) {
        return new SignatureService(
            $c->get('security_logger'),
            $c->get(DatabaseHelper::class),
            $config['signature'] ?? []
        );
    });
    
    // DocumentService for document management
    $container->set(DocumentService::class, function($c) {
        return new DocumentService(
            $c->get('api_logger'),
            $c->get(AuditService::class),
            $c->get(FileStorage::class),
            $c->get(EncryptionService::class),
            $c->get(TemplateService::class)
        );
    });
}

/**
 * Register security and audit services
 */
function registerSecurityServices(Container $container, array $config): void
{
    // AuditService for audit logging
    $container->set(AuditService::class, function($c) {
        return new AuditService(
            $c->get('security_logger'),
            $c->get(ExceptionHandler::class),
            $c->get(DatabaseHelper::class)
        );
    });
    
    // KeyManager for cryptographic key management
    $container->set(KeyManager::class, function($c) use ($config) {
        return new KeyManager(
            $config['keymanager'] ?? [],
            $c->get('security_logger'),
            $c->get(ExceptionHandler::class)
        );
    });
}

/**
 * Register system helpers
 */
function registerSystemHelpers(Container $container): void
{
    // Register RouterHelper
    $container->set(App\Helpers\RouterHelper::class, function ($c) {
        return new App\Helpers\RouterHelper($c);
    });
}

/**
 * Load service-specific configuration
 * 
 * @param string $configDir Directory containing configuration files
 * @return array Configuration values
 */
function loadServiceConfigs(string $configDir): array
{
    $serviceConfigs = [];
    
    // List of service configuration files to load
    $serviceConfigFiles = [
        'notifications' => 'notifications.php',
        'signature' => 'signature.php',
        'keymanager' => 'keymanager.php'
    ];
    
    foreach ($serviceConfigFiles as $key => $file) {
        $path = "{$configDir}/{$file}";
        if (file_exists($path)) {
            $serviceConfigs[$key] = require $path;
        }
    }
    
    return $serviceConfigs;
}

// If this file is included directly, return a container with registered services
if (!isset($container) && basename($_SERVER['SCRIPT_FILENAME']) == basename(__FILE__)) {
    $container = new Container();
    
    // Need basic service dependencies
    require_once __DIR__ . '/logging_dependencies.php';
    $container = registerLoggers($container);
    
    require_once __DIR__ . '/database_dependencies.php';
    $config = require __DIR__ . '/database.php';
    $container = registerDatabases($container, $config);
    
    // Load other configurations
    $config = [
        'encryption' => require __DIR__ . '/encryption.php',
        'filestorage' => require __DIR__ . '/filestorage.php'
    ];
    
    // Register services
    $container = registerServices($container, $config);
    
    return $container;
}
=== config/dependencies/controller_dependencies.php ===
<?php

/**
 * Controller Dependencies Configuration
 * 
 * This file contains all controller-related dependency registrations for the DI container.
 * It centralizes controller registrations to make the main dependencies.php cleaner.
 */

use DI\Container;
use Psr\Log\LoggerInterface;
use App\Controllers\AuthController;
use App\Controllers\UserController;
use App\Controllers\AdminController;
use App\Controllers\DashboardController;
use App\Controllers\ApiController;
use App\Controllers\DocumentController;
use App\Controllers\PaymentController;
use App\Controllers\ReportController;
use App\Services\Auth\AuthService;
use App\Services\Auth\TokenService;
use App\Services\UserService;
use App\Services\AdminService;
use App\Services\DashboardService;
use App\Services\DocumentService;
use App\Services\PaymentService;
use App\Services\ReportService;
use App\Middleware\AuthMiddleware;
use App\Helpers\ExceptionHandler;

/**
 * Register all controller dependencies in the container
 * 
 * @param Container $container The DI container
 * @return Container The container with registered controllers
 */
function registerControllers(Container $container): Container
{
    // Register authentication and user controllers
    registerAuthControllers($container);
    
    // Register admin and dashboard controllers
    registerAdminControllers($container);
    
    // Register feature-specific controllers
    registerFeatureControllers($container);
    
    $container->get(LoggerInterface::class)->info("All controllers registered successfully");
    
    return $container;
}

/**
 * Register authentication and user-related controllers
 */
function registerAuthControllers(Container $container): void
{
    // Auth Controller - handles login, registration, password reset, etc.
    $container->set(AuthController::class, function($c) {
        return new AuthController(
            $c->get(AuthService::class),
            $c->get(TokenService::class),
            $c->get(ExceptionHandler::class),
            $c->get('auth_logger'),
            $c->get('audit_logger')
        );
    });
    
    // User Controller - handles user profile, settings, etc.
    $container->set(UserController::class, function($c) {
        return new UserController(
            $c->get(UserService::class),
            $c->get(ExceptionHandler::class),
            $c->get('user_logger'),
            $c->get('audit_logger'),
            $c->get(AuthMiddleware::class)
        );
    });
}

/**
 * Register admin and dashboard controllers
 */
function registerAdminControllers(Container $container): void
{
    // Admin Controller - handles administrative functions
    if (class_exists(AdminController::class)) {
        $container->set(AdminController::class, function($c) {
            return new AdminController(
                $c->get(AdminService::class),
                $c->get(UserService::class),
                $c->get(AuthMiddleware::class),
                $c->get(ExceptionHandler::class),
                $c->get('admin_logger'),
                $c->get('audit_logger')
            );
        });
    }
    
    // Dashboard Controller - handles dashboard views and data
    if (class_exists(DashboardController::class)) {
        $container->set(DashboardController::class, function($c) {
            return new DashboardController(
                $c->get(DashboardService::class),
                $c->get(AuthMiddleware::class),
                $c->get(ExceptionHandler::class),
                $c->get('api_logger')
            );
        });
    }
}

/**
 * Register feature-specific controllers
 */
function registerFeatureControllers(Container $container): void
{
    // API Controller - handles generic API endpoints
    if (class_exists(ApiController::class)) {
        $container->set(ApiController::class, function($c) {
            return new ApiController(
                $c->get(ExceptionHandler::class),
                $c->get('api_logger')
            );
        });
    }
    
    // Document Controller - handles document management
    if (class_exists(DocumentController::class)) {
        $container->set(DocumentController::class, function($c) {
            return new DocumentController(
                $c->get(DocumentService::class),
                $c->get(AuthMiddleware::class),
                $c->get(ExceptionHandler::class),
                $c->get('api_logger')
            );
        });
    }
    
    // Payment Controller - handles payment processing
    if (class_exists(PaymentController::class)) {
        $container->set(PaymentController::class, function($c) {
            return new PaymentController(
                $c->get(PaymentService::class),
                $c->get(AuthMiddleware::class),
                $c->get(ExceptionHandler::class),
                $c->get('api_logger')
            );
        });
    }
    
    // Report Controller - handles report generation
    if (class_exists(ReportController::class)) {
        $container->set(ReportController::class, function($c) {
            return new ReportController(
                $c->get(ReportService::class),
                $c->get(AuthMiddleware::class),
                $c->get(ExceptionHandler::class),
                $c->get('api_logger')
            );
        });
    }
}

/**
 * Register middleware for controllers
 */
function registerControllerMiddleware(Container $container): void
{
    // Auth Middleware - handles authentication for protected routes
    $container->set(AuthMiddleware::class, function($c) {
        return new AuthMiddleware(
            $c->get(TokenService::class),
            $c->get('auth_logger')
        );
    });
}

// If this file is included directly, return a container with registered controllers
if (!isset($container) && basename($_SERVER['SCRIPT_FILENAME']) == basename(__FILE__)) {
    $container = new Container();
    
    // We need logger and services to be available
    require_once __DIR__ . '/logging_dependencies.php';
    require_once __DIR__ . '/service_dependencies.php';
    
    $container = registerLoggers($container);
    
    // Mock configuration for standalone usage
    $config = [
        'encryption' => ['jwt_secret' => 'test', 'jwt_refresh_secret' => 'test'],
    ];
    
    // Register services needed by controllers
    $container = registerServices($container, $config);
    
    // Register middleware
    registerControllerMiddleware($container);
    
    // Register controllers
    $container = registerControllers($container);
    
    return $container;
}
=== config/dependencies.php ===
<?php

/**
 * Main Dependencies Configuration File
 * 
 * This file initializes the dependency injection container and loads
 * all modular dependency components.
 */

require_once __DIR__ . '/../vendor/autoload.php';

// Define the path to the modular dependency files
$dependenciesDir = __DIR__ . '/dependencies/';

// Check if directory exists, if not, create it
if (!is_dir($dependenciesDir)) {
    // Make migration easier by copying current files if needed
    mkdir($dependenciesDir, 0775, true);
    
    // Define files to migrate to the dependencies directory
    $filesToMigrate = [
        'logging_dependencies.php',
        'database_dependencies.php',
        'service_dependencies.php',
        'controller_dependencies.php',
    ];
    
    foreach ($filesToMigrate as $file) {
        $source = __DIR__ . '/' . $file;
        $destination = $dependenciesDir . $file;
        
        if (file_exists($source) && !file_exists($destination)) {
            copy($source, $destination);
        }
    }
}

// Load the main dependencies index file which handles the loading sequence
$result = require_once $dependenciesDir . 'index.php';

// Return the container and other important registered services
return $result;
=== config/database.php ===
<?php
return [
    'app_database' => [
        'driver'    => 'mysql',
        'host'      => 'localhost',
        'database'  => 'u122931475_app', // use the app database name
        'username'  => 'app_user',
        'password'  => 'app_password',
        'charset'   => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix'    => '',
    ],
    'secure_database' => [
        'driver'    => 'mysql',
        'host'      => 'localhost',
        'database'  => 'u122931475_secure', // secure database name
        'username'  => 'secure_user',
        'password'  => 'secure_password',
        'charset'   => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix'    => '',
    ]
];
=== config/payu.php ===
<?php
return [
    'api_key' => 'your-payu-api-key',
    'api_secret' => 'your-payu-api-secret',
    'endpoint' => 'https://secure.payu.com/api',
    'merchant_key' => 'your-merchant-key',
    'merchant_salt' => 'your-merchant-salt',
];
=== config/signature.php ===
<?php

return [
    'api_endpoint' => 'https://api.example.com',
    'api_key' => 'your-api',
];=== config/storage.php ===
<?php

return [
    'base_directory' => __DIR__ . '/../storage/',

    'security' => [
        'permissions' => [
            'default' => 0640,  // Default file permissions (owner read/write)
            'directory' => 0755, // Default directory permissions
        ],
        'max_file_size' => 5 * 1024 * 1024, // Max file size (5MB)
        'allowed_extensions' => ['png', 'jpg', 'svg', 'pdf', 'docx'],
    ],

    'encryption' => [
        'enabled' => true,
    ],
];
=== config/logs.php ===
<?php

/**
 * Logging Configuration
 */

return [
    'log_channel' => 'daily',  // Options: single, daily, syslog
    'log_path' => __DIR__ . '/../logs/app.log',
    'log_level' => 'debug',  // Options: debug, info, notice, warning, error, critical, alert, emergency
];
=== config/notifications.php ===
<?php

return [
    'smtp_host' => 'smtp.example.com',
    'smtp_user' => 'user@example.com',
    'smtp_password' => 'password',
    'smtp_secure' => 'tls',
    'smtp_port' => 587,
    'from_email' => 'no-reply@example.com',
    'from_name' => 'CarFuse Notifications',
    'fcm_api_key' => 'YOUR_FCM_API_KEY_HERE'
];
=== config/keymanager.php ===
<?php

return [
    'keys' => [
        'default' => 'your-default-key-here',
        'encryption' => getenv('ENCRYPTION_KEY') ?: 'fallback-encryption-key-32chars',
        'jwt_signing' => getenv('JWT_SECRET') ?: 'fallback-jwt-secret-32chars',
    ]
];
=== config/routes.php ===
<?php

use FastRoute\RouteCollector;
use function FastRoute\simpleDispatcher;
use App\Middleware\AuthMiddleware;
use App\Helpers\SecurityHelper;
use App\Helpers\ApiHelper;

return simpleDispatcher(function (RouteCollector $router) {
    // ✅ Define Public View Routes
    $router->addRoute(['GET'], '/', fn() => require '../public/views/home.php');
    $router->addRoute(['GET'], '/dashboard', fn() => require '../public/views/dashboard.php');
    $router->addRoute(['GET'], '/profile', fn() => require '../public/views/user/profile.php');
    $router->addRoute(['GET'], '/reports', fn() => require '../public/views/user/reports.php');
    $router->addRoute(['GET'], '/auth/login', fn() => require '../public/views/auth/login.php');
    $router->addRoute(['GET'], '/auth/register', fn() => require '../public/views/auth/register.php');
    $router->addRoute(['GET'], '/auth/password_reset', fn() => require '../public/views/auth/password_reset.php');
    $router->addRoute(['GET'], '/documents/signing_page', fn() => require '../public/views/documents/signing_page.php');

    // ✅ Auth API Routes - moved from routes/api.php
    $router->addRoute(['POST'], '/api/auth/login', 'AuthController@login');
    $router->addRoute(['POST'], '/api/auth/register', 'AuthController@register');
    $router->addRoute(['POST'], '/api/auth/refresh', 'AuthController@refreshToken');
    $router->addRoute(['POST'], '/api/auth/logout', 'AuthController@logout');
    $router->addRoute(['POST'], '/api/auth/reset-request', 'AuthController@resetPasswordRequest');
    $router->addRoute(['POST'], '/api/auth/reset', 'AuthController@resetPassword');

    // ✅ User API Routes - moved from routes/api.php
    $router->addRoute(['GET'], '/api/user/profile', 'UserController@getUserProfile');
    $router->addRoute(['PUT'], '/api/user/profile', 'UserController@updateProfile');
    $router->addRoute(['GET'], '/api/user/dashboard', 'UserController@userDashboard');
    $router->addRoute(['GET'], '/api/admin/dashboard', 'UserController@adminAction');

    // ✅ Protected API Routes - simplified with controller references
    $router->addRoute(['GET'], '/api/user/settings', 'UserController@getSettings');
    $router->addRoute(['GET'], '/api/user/notifications', 'UserController@getNotifications');
    $router->addRoute(['GET'], '/api/dashboard/metrics', 'DashboardController@getMetrics');
    $router->addRoute(['GET'], '/api/dashboard/reports', 'DashboardController@getReports');

    // ✅ Booking API Routes
    $router->addRoute(['POST'], '/api/bookings/create', 'BookingController@createBooking');
    $router->addRoute(['GET'], '/api/bookings/view/{id:\d+}', 'BookingController@viewBooking');
    $router->addRoute(['POST'], '/api/bookings/cancel/{id:\d+}', 'BookingController@cancelBooking');
    $router->addRoute(['POST'], '/api/bookings/reschedule/{id:\d+}', 'BookingController@rescheduleBooking');

    // ✅ Payment API Routes
    $router->addRoute(['POST'], '/api/payments/process', 'PaymentController@processPayment');
    $router->addRoute(['POST'], '/api/payments/refund/{id:\d+}', 'PaymentController@refundPayment');
    $router->addRoute(['GET'], '/api/payments/history', 'PaymentController@paymentHistory');

    // ✅ Report API Routes
    $router->addRoute(['POST'], '/api/reports/generate', 'ReportController@generateReport');
    $router->addRoute(['GET'], '/api/reports/view/{id:\d+}', 'ReportController@viewReport');

    // ✅ Admin API Routes
    $router->addRoute(['GET'], '/api/admin/users', 'AdminController@listUsers');
    $router->addRoute(['GET'], '/api/admin/dashboard', 'AdminController@getDashboard');
    $router->addRoute(['GET'], '/api/admin/logs', 'AdminController@viewLogs');

    // ✅ Document API Routes
    $router->addRoute(['POST'], '/api/documents/upload', 'DocumentController@uploadDocument');
    $router->addRoute(['POST'], '/api/documents/sign', 'DocumentController@signDocument');
    $router->addRoute(['GET'], '/api/documents/view/{id:\d+}', 'DocumentController@viewDocument');

    // ✅ System API Routes
    $router->addRoute(['GET'], '/api/system/logs', 'SystemController@viewLogs');
    $router->addRoute(['GET'], '/api/system/status', 'SystemController@getStatus');

    // ✅ Catch-All for Unmatched Requests
    $router->addRoute(['GET', 'POST'], '/{any:.+}', function () {
        http_response_code(404);
        echo json_encode(["error" => "Not Found"]);
    });
});
=== config/document.php ===
<?php

return [
    'encryption' => [
        'enabled' => true, // Toggle document encryption
    ],
    'storage' => [
        'contracts' => 'contracts/',
        'templates' => 'templates/',
        'terms' => 'templates/terms_and_conditions.html',
    ],
];
=== config/documents.php ===
<?php
/**
 * File: config/documents.php
 * Purpose: Configuration for the Document Management System.
 */

return [
    // Storage Paths
    'storage' => [
        'user_documents' => __DIR__ . '/../../storage/documents/users/', // Path for user-specific documents
        'templates' => __DIR__ . '/../../storage/documents/templates/', // Path for document templates
        'terms_and_conditions' => __DIR__ . '/../../storage/documents/terms/', // Path for T&C documents
    ],

    // Encryption Settings
    'encryption' => [
        'aes_key' => getenv('DOCUMENT_AES_KEY') ?: 'default_secure_key', // AES Encryption Key
    ],

    // Document Types
    'allowed_types' => ['pdf', 'docx'], // Allowed document file types

    // Naming Conventions
    'naming' => [
        'contract_format' => 'contract_booking_{booking_id}_{timestamp}.pdf', // Format for contract names
        'invoice_format' => 'invoice_booking_{booking_id}_{timestamp}.pdf',  // Format for invoice names
    ],

    // Retention Policy
    'retention_policy' => [
        'contracts' => '10 years', // Retention period for contracts
        'invoices' => '7 years',   // Retention period for invoices
    ],
];
=== config/audit.php ===
<?php
/**
 * File: audit.php
 * Purpose: Configuration file for the Audit Manager module.
 * Path: audit_manager/config/audit.php
 * 
 * Changelog:
 * - [2025-01-25] Initial creation of the file.
 * - [2025-01-27] Added logging level configuration and encryption details.
 * - [2025-01-28] Updated access control and notification settings.
 */

return [
    // General settings
    'enabled' => true, // Enable or disable the audit manager

    // Log file storage settings
    'storage' => [
        'directory' => __DIR__ . '/../logs', // Directory where logs will be stored
        'file_prefix' => 'audit_', // Prefix for log files
        'rotation' => [
            'enabled' => true, // Enable log rotation
            'frequency' => 'daily', // Rotate logs daily
            'max_files' => 30, // Keep logs for the last 30 days
        ],
    ],

    // Logging levels
    'log_levels' => [
        'info' => true, // Log informational messages
        'warning' => true, // Log warnings
        'error' => true, // Log errors
        'critical' => true, // Log critical system events
    ],

    // Encryption settings
    'encryption' => [
        'enabled' => true, // Enable AES encryption for sensitive log entries
        'key' => $_ENV['ENCRYPTION_KEY'] ?? 'your-encryption-key-here', // AES encryption key (store securely)
        'cipher' => 'AES-256-CBC', // Cipher method
    ],

    // Filters for accessing logs
    'filters' => [
        'by_user' => true, // Enable filtering logs by user ID
        'by_booking' => true, // Enable filtering logs by booking ID
        'by_date' => true, // Enable filtering logs by date range
    ],

    // Access control
    'access' => [
        'allowed_roles' => ['admin', 'audit_manager'], // Roles allowed to access the logs
    ],

    // Notification settings
    'notifications' => [
        'enabled' => true, // Enable email notifications for critical events
        'email_recipients' => explode(',', $_ENV['AUDIT_NOTIFICATION_EMAILS'] ?? 'admin@example.com'), // Recipients for critical event notifications
    ],
];
=== config/Migrations/setup_secure_database.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../App/Helpers/DatabaseHelper.php';

use Illuminate\Database\Capsule\Manager as Capsule;
use App\Helpers\DatabaseHelper;

// ✅ Initialize Secure Database
DatabaseHelper::getSecureInstance();

// ✅ Log Setup
$logFilePath = __DIR__ . '/../logs/secure_db_setup.log';
file_put_contents($logFilePath, "🚀 Secure Database Setup Started at " . date('Y-m-d H:i:s') . "\n", FILE_APPEND);

// ✅ Define Secure Tables (No Cross-Database Foreign Keys)
$tables = [
    "consent_logs" => "
        CREATE TABLE IF NOT EXISTS consent_logs (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference VARCHAR(255) NOT NULL,
            ip_address VARCHAR(45) NOT NULL,
            consent_given TINYINT(1) DEFAULT 0,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "logs" => "
        CREATE TABLE IF NOT EXISTS logs (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference BIGINT UNSIGNED NOT NULL,
            action VARCHAR(255) NOT NULL,
            details TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "audit_trails" => "
        CREATE TABLE IF NOT EXISTS audit_trails (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            action VARCHAR(255) NOT NULL,
            details TEXT NOT NULL,
            user_reference BIGINT UNSIGNED NULL,
            booking_reference BIGINT UNSIGNED NULL,
            ip_address VARCHAR(45),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "contracts" => "
        CREATE TABLE IF NOT EXISTS contracts (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            booking_reference BIGINT UNSIGNED NOT NULL,
            user_reference BIGINT UNSIGNED NOT NULL,
            contract_pdf VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    "
];

// ✅ Execute Table Creation with Error Handling
foreach ($tables as $tableName => $sql) {
    try {
        Capsule::connection('secure')->statement($sql);
        file_put_contents($logFilePath, "[✅] Secure Table `{$tableName}` created successfully.\n", FILE_APPEND);
    } catch (Exception $e) {
        file_put_contents($logFilePath, "[❌] Error creating `{$tableName}`: " . $e->getMessage() . "\n", FILE_APPEND);
    }
}

file_put_contents($logFilePath, "✅ Secure Database Setup Completed Successfully.\n", FILE_APPEND);
echo "[🚀] Secure database setup completed. Check `logs/secure_db_setup.log` for details.\n";
=== config/Migrations/crete_audit_trail_table.php ===
<?php
/**
 * File: create_audit_trail_table.php
 * Purpose: Creates the `audit_trails` table for recording audit trail logs.
 */

require_once __DIR__ . '/../../bootstrap.php'; // Ensure this points to the correct path for database initialization.

try {
    $pdo = new PDO(DB_DSN, DB_USER, DB_PASS, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    ]);

    echo "Connected to the database successfully.\n";

    $query = "
        CREATE TABLE IF NOT EXISTS audit_trails (
            id BIGINT AUTO_INCREMENT PRIMARY KEY,
            action VARCHAR(255) NOT NULL,
            details TEXT NOT NULL,
            user_id INT NULL,
            booking_id INT NULL,
            ip_address VARCHAR(45),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ";

    $pdo->exec($query);
    echo "Table `audit_trails` created successfully.\n";

} catch (PDOException $e) {
    echo "Database error: " . $e->getMessage() . "\n";
    exit(1);
}
=== config/Migrations/setup_database.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../App/Helpers/DatabaseHelper.php';

use Illuminate\Database\Capsule\Manager as Capsule;
use App\Helpers\DatabaseHelper;

// ✅ Initialize Application Database
DatabaseHelper::getInstance();

// ✅ Define Tables (Ensuring Correct Creation Order)
$tables = [

    // ✅ Ensure `fleet` exists before any table references it
    "fleet" => "
        CREATE TABLE IF NOT EXISTS fleet (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            make VARCHAR(255) NOT NULL,
            model VARCHAR(255) NOT NULL,
            registration_number VARCHAR(20) NOT NULL UNIQUE,
            availability TINYINT(1) DEFAULT 1,
            last_maintenance_date DATE DEFAULT NULL,
            next_maintenance_date DATE DEFAULT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "users" => "
        CREATE TABLE IF NOT EXISTS users (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            surname VARCHAR(255) NOT NULL,
            email VARCHAR(255) NOT NULL UNIQUE,
            phone VARCHAR(15),
            address TEXT,
            pesel_or_id VARCHAR(20),
            updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            password_hash VARCHAR(255) NOT NULL,
            role ENUM('user', 'admin') DEFAULT 'user',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            email_notifications TINYINT(1) DEFAULT 0,
            sms_notifications TINYINT(1) DEFAULT 0,
            active TINYINT(1) DEFAULT 1,
            deleted_at TIMESTAMP NULL DEFAULT NULL
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "bookings" => "
        CREATE TABLE IF NOT EXISTS bookings (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference BIGINT UNSIGNED NOT NULL,
            vehicle_id BIGINT UNSIGNED NOT NULL,
            pickup_date DATE NOT NULL,
            dropoff_date DATE NOT NULL,
            total_price DECIMAL(10,2) NOT NULL,
            status ENUM('active', 'canceled') DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_reference) REFERENCES users(id) ON DELETE CASCADE,
            FOREIGN KEY (vehicle_id) REFERENCES fleet(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "notifications" => "
        CREATE TABLE IF NOT EXISTS notifications (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_reference BIGINT UNSIGNED NOT NULL,
            type ENUM('email','sms') NOT NULL,
            message TEXT NOT NULL,
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_read TINYINT(1) DEFAULT 0,
            FOREIGN KEY (user_reference) REFERENCES users(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "admin_notification_settings" => "
        CREATE TABLE IF NOT EXISTS admin_notification_settings (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            admin_reference BIGINT UNSIGNED NOT NULL,
            contract_alerts TINYINT(1) DEFAULT 0,
            maintenance_alerts TINYINT(1) DEFAULT 0,
            booking_reminders TINYINT(1) DEFAULT 0,
            FOREIGN KEY (admin_reference) REFERENCES users(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "maintenance_logs" => "
        CREATE TABLE IF NOT EXISTS maintenance_logs (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            vehicle_id BIGINT UNSIGNED NOT NULL,
            description TEXT NOT NULL,
            maintenance_date DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (vehicle_id) REFERENCES fleet(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",

    "availability" => "
        CREATE TABLE IF NOT EXISTS availability (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            vehicle_id BIGINT UNSIGNED NOT NULL,
            date DATE NOT NULL,
            status ENUM('available','unavailable') DEFAULT 'available',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE (vehicle_id, date),
            FOREIGN KEY (vehicle_id) REFERENCES fleet(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    ",
        "password_resets" => "
        CREATE TABLE IF NOT EXISTS password_resets (
        id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        email VARCHAR(255) NOT NULL,
        token VARCHAR(255) NOT NULL,
        ip_address VARCHAR(45),
        expires_at TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_email (email),
        INDEX idx_token (token)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    "
];

// ✅ Execute Table Creation with Error Handling
$logFilePath = __DIR__ . '/../logs/database_setup.log';
file_put_contents($logFilePath, "🚀 Database Setup Started at " . date('Y-m-d H:i:s') . "\n", FILE_APPEND);

foreach ($tables as $tableName => $sql) {
    try {
        Capsule::statement($sql);
        file_put_contents($logFilePath, "[✅] Table `{$tableName}` created successfully.\n", FILE_APPEND);
    } catch (Exception $e) {
        file_put_contents($logFilePath, "[❌] Error creating `{$tableName}`: " . $e->getMessage() . "\n", FILE_APPEND);
    }
}

file_put_contents($logFilePath, "✅ Database setup completed successfully.\n", FILE_APPEND);
echo "[🚀] Application database setup completed. Check `logs/database_setup.log` for details.\n";
