=== App/Middleware/EncryptionMiddleware.php ===
<?php

namespace App\Middleware;

// Removed: use Illuminate\Http\Request;
// Removed: use Illuminate\Support\Facades\Log;
use Psr\Log\LoggerInterface;
use App\Services\EncryptionService;

class EncryptionMiddleware
{
    private LoggerInterface $logger;
    
    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }
    
    // Modified handle() to use native PHP request handling without Closure
    public function handle(array $request)
    {
        $uri = $_SERVER['REQUEST_URI'] ?? '/';
        if ($this->isSensitiveEndpoint($uri)) {
            $this->encryptRequestData($request);
        }

        // Process request (replace with your actual request processing)
        // ...existing code or processRequest($request)...
        $response = []; // Placeholder for processed response
        
        if ($this->isSensitiveEndpoint($uri)) {
            $response = $this->encryptResponseData(json_encode($response));
        }
        
        echo json_encode($response);
        exit;
    }
    
    // Modified to encrypt response data and return a string
    private function encryptResponseData(string $data): string
    {
        return EncryptionService::encrypt($data);
    }

    // Handle encryption on native request arrays (e.g., $_POST or $_GET)
    private function encryptRequestData(array &$request)
    {
        foreach ($request as $key => $value) {
            if ($this->isSensitiveField($key)) {
                $request[$key] = EncryptionService::encrypt($value);
            }
        }
    }

    // Load sensitive fields dynamically from configuration file
    private function isSensitiveField(string $field): bool
    {
        $configPath = __DIR__ . '/../../config/sensitive_fields.json';
        $config = file_exists($configPath) ? json_decode(file_get_contents($configPath), true) : [];
        $sensitiveFields = $config['sensitive_fields'] ?? ['password', 'email', 'phone'];
        return in_array($field, $sensitiveFields);
    }

    // Load sensitive endpoints dynamically from configuration file
    private function isSensitiveEndpoint(string $endpoint): bool
    {
        $configPath = __DIR__ . '/../../config/sensitive_endpoints.json';
        $config = file_exists($configPath) ? json_decode(file_get_contents($configPath), true) : [];
        $sensitiveEndpoints = $config['sensitive_endpoints'] ?? ['/user/profile-data'];
        return in_array($endpoint, $sensitiveEndpoints);
    }
    
    // Log events using injected LoggerInterface
    private function logEvent(string $message)
    {
        $this->logger->info("[EncryptionMiddleware] $message");
    }
}
=== App/Middleware/AuthMiddleware.php ===
<?php

namespace App\Middleware;

use App\Services\Auth\TokenService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Psr\Log\LoggerInterface;
use App\Helpers\DatabaseHelper;

class AuthMiddleware implements MiddlewareInterface
{
    private TokenService $tokenService;
    private LoggerInterface $logger;
    private $pdo;
    private bool $required;

    public function __construct(
        TokenService $tokenService, 
        LoggerInterface $logger,
        DatabaseHelper $dbHelper,
        bool $required = false
    ) {
        $this->tokenService = $tokenService;
        $this->logger = $logger;
        $this->pdo = $dbHelper->getPdo();
        $this->required = $required;
    }

    public function process(Request $request, RequestHandler $handler): Response
    {
        $this->logger->debug("AuthMiddleware processing request", [
            'required_auth' => $this->required ? 'yes' : 'no'
        ]);
        
        // Try to get token from Authorization header
        $token = null;
        $authHeader = $request->getHeaderLine('Authorization');
        if (strpos($authHeader, 'Bearer ') === 0) {
            $token = substr($authHeader, 7);
            $this->logger->debug("Found token in Authorization header");
        }
        
        // If not in header, try cookies
        if (!$token) {
            $cookies = $request->getCookieParams();
            $token = $cookies['jwt'] ?? null;
            if ($token) {
                $this->logger->debug("Found token in cookies");
            }
        }
        
        $authenticated = false;
        
        if ($token) {
            try {
                // Verify and decode the token
                $decoded = $this->tokenService->verifyToken($token);
                $userId = $decoded['sub'];
                $this->logger->debug("Token verified successfully", ['userId' => $userId]);
                
                // Fetch user from application database
                $stmt = $this->pdo->prepare("
                    SELECT id, name, surname, email, phone, role, address, 
                           pesel_or_id, created_at, email_notifications, sms_notifications 
                    FROM users WHERE id = ? AND active = 1
                ");
                $stmt->execute([$userId]);
                $user = $stmt->fetch();
                
                if ($user) {
                    // Attach user to request
                    $this->logger->debug("User attached to request", ['userId' => $user['id']]);
                    $request = $request->withAttribute('user', $user);
                    $authenticated = true;
                } else {
                    $this->logger->warning("User not found or inactive", ['userId' => $userId]);
                }
            } catch (\Exception $e) {
                $this->logger->warning("Token validation failed: " . $e->getMessage());
                // We'll proceed without setting the user attribute
            }
        } else {
            $this->logger->debug("No token found in request");
        }
        
        // If authentication is required but failed, return 401 Unauthorized
        if ($this->required && !$authenticated) {
            $this->logger->warning("Authentication required but failed or missing");
            $response = new \Slim\Psr7\Response();
            $response->getBody()->write(json_encode([
                'error' => 'Authentication required',
                'status' => 401
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(401);
        }
        
        return $handler->handle($request);
    }
}
?>
=== App/Middleware/RequireAuthMiddleware.php ===
<?php

namespace App\Middleware;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Psr\Log\LoggerInterface;

/**
 * Middleware that ensures a user is authenticated
 * To be used after AuthMiddleware has processed the request
 */
class RequireAuthMiddleware implements MiddlewareInterface
{
    private LoggerInterface $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    public function process(Request $request, RequestHandler $handler): Response
    {
        $user = $request->getAttribute('user');
        
        if (!$user) {
            $this->logger->warning("Access attempt to protected route without authentication");
            
            $response = new \Slim\Psr7\Response();
            $response->getBody()->write(json_encode([
                'error' => 'Authentication required',
                'status' => 401
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(401);
        }
        
        $this->logger->debug("User authenticated for protected route", ['user_id' => $user['id']]);
        return $handler->handle($request);
    }
}
=== App/Middleware/TokenValidationMiddleware.php ===
<?php

namespace App\Middleware;

use App\Services\Auth\AuthService;
use App\Helpers\ApiHelper;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Psr\Log\LoggerInterface;

class TokenValidationMiddleware
{
    private AuthService $authService;
    private LoggerInterface $logger;

    public function __construct(AuthService $authService, LoggerInterface $logger)
    {
        $this->authService = $authService;
        $this->logger = $logger;
    }

    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        $token = $this->extractToken($request);

        if (!$token || !$this->authService->validateToken($token)) {
            $this->logger->warning("Invalid or missing token", ['ip' => $request->getServerParams()['REMOTE_ADDR']]);
            return ApiHelper::sendJsonResponse('error', 'Unauthorized', [], 401);
        }

        $user = $this->authService->getUserFromToken($token);
        $request = $request->withAttribute('user', $user);

        return $handler->handle($request);
    }

    private function extractToken(Request $request): ?string
    {
        $authHeader = $request->getHeaderLine('Authorization');
        if (strpos($authHeader, 'Bearer ') === 0) {
            return substr($authHeader, 7);
        }

        return $_COOKIE['jwt'] ?? null;
    }
}
?>
=== App/Middleware/AuditTrailMiddleware.php ===
<?php

namespace App\Middleware;

use AuditManager\Services\AuditService;
use Psr\Log\LoggerInterface;

/**
 * AuditTrailMiddleware - Logs user actions for audit tracking.
 */
class AuditTrailMiddleware
{
    private AuditService $auditService;
    private LoggerInterface $logger;

    public function __construct(AuditService $auditService, LoggerInterface $logger)
    {
        $this->auditService = $auditService;
        $this->logger = $logger;
    }

    /**
     * Handle an incoming request and log relevant details.
     *
     * @param array $request The request data.
     * @param callable $next The next middleware function.
     */
    public function handle(array $request, callable $next)
    {
        try {
            // Extract request details
            $action = $this->determineAction();
            $details = json_encode($this->sanitizeRequestData($request));
            $userId = $_SESSION['user_id'] ?? null;
            $ipAddress = $_SERVER['REMOTE_ADDR'] ?? 'unknown';

            // Log the action
            $this->auditService->log($action, $details, $userId, $ipAddress);

            // Continue to the next middleware/controller
            return $next($request);
        } catch (\Exception $e) {
            $this->logger->error('[AuditTrail] Failed to log action', ['error' => $e->getMessage()]);
            return $next($request); // Allow the request to proceed even if logging fails
        }
    }

    /**
     * Determine the action performed based on the request.
     *
     * @return string
     */
    private function determineAction(): string
    {
        return $_SERVER['REQUEST_METHOD'] . ' ' . ($_SERVER['REQUEST_URI'] ?? 'unknown');
    }

    /**
     * Sanitize request data before logging.
     *
     * @param array $request The raw request data.
     * @return array The sanitized request data.
     */
    private function sanitizeRequestData(array $request): array
    {
        unset($request['password'], $request['token']); // Remove sensitive fields
        return $request;
    }
}
