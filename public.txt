=== public/.htaccess ===
RewriteEngine On

# Allow direct access to existing files and directories
RewriteCond %{REQUEST_FILENAME} -f [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^ - [L]

# Redirect all other requests to index.php for FastRoute
RewriteRule ^ index.php [QSA,L]=== public/css/style.css ===
/* ...existing code... */

/* Consistent theme and UI styling */
body {
    /* ...existing code... */
    /* Ensure consistent theme colors and fonts */
}

/* ...existing code... */

/* Button and form designs for accessibility */
button, input[type="submit"] {
    /* ...existing code... */
    /* Ensure buttons are accessible */
    /* Example: High contrast colors, focus styles */
}

/* ...existing code... */

/* Mobile responsiveness */
@media (max-width: 768px) {
    /* ...existing code... */
    /* Ensure layout adjusts for smaller screens */
    /* Example: Flexbox or grid adjustments */
}

/* ...existing code... */
=== public/css/admin.css ===
/* General styles for admin dashboard */
.admin-dashboard {
    font-family: Arial, sans-serif;
    padding: 20px;
    background-color: #f4f4f4;
}

.admin-dashboard h1, .admin-dashboard h2, .admin-dashboard h3 {
    color: #333;
}

/* Styles for logs and reports */
.logs, .reports {
    margin-top: 20px;
}

.logs table, .reports table {
    width: 100%;
    border-collapse: collapse;
}

.logs table th, .reports table th, .logs table td, .reports table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.logs table th, .reports table th {
    background-color: #f2f2f2;
    color: #333;
}

/* Improve table designs for transaction logs */
.transaction-logs table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

.transaction-logs table th, .transaction-logs table td {
    border: 1px solid #ddd;
    padding: 10px;
    text-align: left;
}

.transaction-logs table th {
    background-color: #4CAF50;
    color: white;
}

.transaction-logs table tr:nth-child(even) {
    background-color: #f2f2f2;
}

.transaction-logs table tr:hover {
    background-color: #ddd;
}

/* Ensure mobile responsiveness */
@media screen and (max-width: 768px) {
    .admin-dashboard {
        padding: 10px;
    }

    .logs table, .reports table, .transaction-logs table {
        width: 100%;
        display: block;
        overflow-x: auto;
    }

    .logs table th, .reports table th, .logs table td, .reports table td, 
    .transaction-logs table th, .transaction-logs table td {
        white-space: nowrap;
    }
}
=== public/css/styles.css ===
/* Toast styles */
#toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

.toast {
    display: inline-block;
    padding: 10px 20px;
    margin-bottom: 10px;
    border-radius: 5px;
    color: #fff;
    font-size: 14px;
    opacity: 0.9;
}

.toast-success {
    background-color: #28a745;
}

.toast-warning {
    background-color: #ffc107;
}

.toast-error {
    background-color: #dc3545;
}

/* Widget styles */
.widget {
    padding: 20px;
    margin: 10px;
    border-radius: 5px;
    background-color: #f8f9fa;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.widget h3 {
    margin: 0;
    font-size: 24px;
    color: #343a40;
}

.widget p {
    margin: 5px 0 0;
    font-size: 18px;
    color: #6c757d;
}

/* Responsive styles */
@media (max-width: 768px) {
    .widget {
        margin: 10px 0;
    }
}
=== public/index.php ===
<?php

require_once __DIR__ . '/../vendor/autoload.php';

// Load Route Dispatcher
$dispatcher = require __DIR__ . '/../routes/web.php';

// Fetch method and URI
$httpMethod = $_SERVER['REQUEST_METHOD'];
$uri = $_SERVER['REQUEST_URI'];

// Strip query string (?foo=bar) and decode URI
$uri = parse_url($uri, PHP_URL_PATH);
$uri = rtrim($uri, '/'); // Normalize URI to prevent trailing slash issues

// If root URL (/) load the landing page
if ($uri === '' || $uri === '/' || $uri === '/index.php') {
    require __DIR__ . '/../App/Views/landing.php';
    exit;
}

// Dispatch the request
$routeInfo = $dispatcher->dispatch($httpMethod, $uri);
var_dump($routeInfo);

switch ($routeInfo[0]) {
    case FastRoute\Dispatcher::NOT_FOUND:
        http_response_code(404);
        echo "404 Not Found - `$uri` does not exist.";
        break;

    case FastRoute\Dispatcher::METHOD_NOT_ALLOWED:
        http_response_code(405);
        echo "405 Method Not Allowed.";
        break;

    case FastRoute\Dispatcher::FOUND:
        $handler = $routeInfo[1];
        $vars = $routeInfo[2];

        if (is_callable($handler)) {
            call_user_func_array($handler, $vars);
        } elseif (is_array($handler) && count($handler) === 2) {
            [$controller, $method] = $handler;
            if (class_exists($controller) && method_exists($controller, $method)) {
                $instance = new $controller();
                call_user_func_array([$instance, $method], $vars);
            } else {
                http_response_code(500);
                echo "500 Internal Server Error: Controller or Method Not Found.";
            }
        } else {
            http_response_code(500);
            echo "500 Internal Server Error: Invalid Route Handler.";
        }
        break;
}
=== public/error_log.php ===
<?php
echo "<pre>";
echo "Checking last 20 Apache/Nginx error logs...\n\n";

// Read logs (Modify path based on your server setup)
$logPaths = [
    "/var/log/apache2/error.log",
    "/var/log/httpd/error_log",
    "/var/log/nginx/error.log",
];

foreach ($logPaths as $logPath) {
    if (file_exists($logPath)) {
        echo "Reading log file: $logPath\n";
        echo shell_exec("tail -n 20 " . escapeshellarg($logPath));
    } else {
        echo "Log file not found: $logPath\n";
    }
}

echo "</pre>";
?>
=== public/js/booking.js ===
import ajax from './ajax';

document.addEventListener('DOMContentLoaded', function() {
    const pickupDateInput = document.getElementById('pickup-date');
    const bookingForm = document.getElementById('booking-form');

    pickupDateInput.addEventListener('change', fetchAvailableVehicles);
    bookingForm.addEventListener('submit', submitBookingRequest);

    // Fetch available vehicles when users select a pickup date
    function fetchAvailableVehicles() {
        const pickupDate = pickupDateInput.value;
        if (!pickupDate) return;

        showLoadingIndicator();

        fetch(`/vehicles/available?pickup_date=${pickupDate}`)
            .then(response => response.json())
            .then(data => {
                hideLoadingIndicator();
                if (data.vehicles && data.vehicles.length > 0) {
                    displayAvailableVehicles(data.vehicles);
                } else {
                    showError('No vehicles available for the selected date.');
                }
            })
            .catch(error => {
                hideLoadingIndicator();
                console.error('Error fetching available vehicles:', error);
                showError('Error fetching available vehicles.');
            });
    }

    // Display available vehicles on the UI
    function displayAvailableVehicles(vehicles) {
        const vehiclesContainer = document.getElementById('vehicles-container');
        vehiclesContainer.innerHTML = '';

        vehicles.forEach(vehicle => {
            const vehicleElement = document.createElement('div');
            vehicleElement.className = 'vehicle';
            vehicleElement.innerHTML = `
                <p>${vehicle.name}</p>
                <p>${vehicle.type}</p>
            `;
            vehiclesContainer.appendChild(vehicleElement);
        });
    }

    // Function to handle real-time vehicle availability updates
    function updateVehicleAvailability() {
        // Ensure real-time updates are handled properly
        // Example: Fetch availability from server and update UI
    }

    // Validate pickup & drop-off locations before submission
    function validateLocations() {
        const pickupLocation = document.getElementById('pickup-location').value;
        const dropoffLocation = document.getElementById('dropoff-location').value;

        if (!pickupLocation || !dropoffLocation) {
            showError('Pickup and drop-off locations are required.');
            return false;
        }

        return true;
    }

    // Form validation before submission
    function validateBookingForm() {
        let isValid = true;
        // Ensure all required fields are validated
        // Example: Check if all required fields are filled
        return isValid;
    }

    // Submit booking requests via AJAX to /booking/create API
    function submitBookingRequest(event) {
        event.preventDefault();

        if (!validateLocations()) return;

        const formData = new FormData(bookingForm);

        showLoadingIndicator();

        fetch('/booking/create', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            hideLoadingIndicator();
            if (data.success) {
                // Handle successful booking
                alert('Booking successful!');
            } else {
                showError(data.error || 'Error creating booking.');
            }
        })
        .catch(error => {
            hideLoadingIndicator();
            console.error('Error creating booking:', error);
            showError('Error creating booking.');
        });
    }

    // Example usage in booking.js
    async function createBooking(bookingDetails) {
        try {
            const response = await ajax.post('/bookings', bookingDetails);
            // ...handle successful booking...
        } catch (error) {
            // ...handle booking error...
        }
    }

    // Show loading indicator
    function showLoadingIndicator() {
        const loadingIndicator = document.getElementById('loading-indicator');
        loadingIndicator.style.display = 'block';
    }

    // Hide loading indicator
    function hideLoadingIndicator() {
        const loadingIndicator = document.getElementById('loading-indicator');
        loadingIndicator.style.display = 'none';
    }

    // Show error messages
    function showError(message) {
        const errorContainer = document.getElementById('error-container');
        errorContainer.innerText = message;
        errorContainer.style.display = 'block';
    }

    // Display error messages correctly
    function displayErrorMessage(message) {
        // Ensure error messages are shown to the user
        // Example: Update error message element with the provided message
    }
});
=== public/js/ajax.js ===
class Ajax {
    constructor() {
        this.baseUrl = '/api'; // Base URL for API requests
        this.token = null; // Authentication token
    }

    setToken(token) {
        this.token = token;
    }

    async request(endpoint, method = 'GET', data = null) {
        const url = `${this.baseUrl}${endpoint}`;
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': this.token ? `Bearer ${this.token}` : ''
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, options);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('API call failed:', error);
            throw error;
        }
    }

    get(endpoint) {
        return this.request(endpoint, 'GET');
    }

    post(endpoint, data) {
        return this.request(endpoint, 'POST', data);
    }

    put(endpoint, data) {
        return this.request(endpoint, 'PUT', data);
    }

    delete(endpoint) {
        return this.request(endpoint, 'DELETE');
    }
}

const ajax = new Ajax();
export default ajax;
=== public/js/dashboard.js ===
// Function to fetch real-time statistics
function fetchStatistics() {
    fetch('/api/statistics')
        .then(response => response.json())
        .then(data => {
            updateWidgets(data);
        })
        .catch(error => {
            showErrorToast('Failed to fetch statistics.');
            console.error('Error fetching statistics:', error);
        });
}

// Function to update dashboard widgets
function updateWidgets(data) {
    // Example: Update a widget with ID 'total-users'
    const totalUsersWidget = document.getElementById('total-users');
    if (totalUsersWidget) {
        totalUsersWidget.innerText = data.totalUsers;
    }

    // Update other widgets similarly
    // ...existing code...
}

// Ensure responsive UI updates
window.addEventListener('resize', () => {
    // Handle responsive updates
    // ...existing code...
});

// Fetch statistics on page load and set interval for real-time updates
document.addEventListener('DOMContentLoaded', () => {
    fetchStatistics();
    setInterval(fetchStatistics, 60000); // Update every 60 seconds
});
=== public/js/notifications.js ===
import ajax from './ajax';

document.addEventListener('DOMContentLoaded', function() {
    fetchNotifications();

    // Fetch notifications from the server
    async function fetchNotifications() {
        try {
            const notifications = await ajax.get('/notifications');
            displayNotifications(notifications);
        } catch (error) {
            console.error('Error fetching notifications:', error);
        }
    }

    // Display notifications on the UI
    function displayNotifications(notifications) {
        const notificationsContainer = document.getElementById('notifications-container');
        notificationsContainer.innerHTML = '';

        notifications.forEach(notification => {
            const notificationElement = document.createElement('div');
            notificationElement.className = 'notification';
            notificationElement.innerHTML = `
                <p>${notification.message}</p>
                <button class="mark-as-read" data-id="${notification.id}">Mark as read</button>
            `;
            notificationsContainer.appendChild(notificationElement);
        });

        // Add event listeners to mark-as-read buttons
        document.querySelectorAll('.mark-as-read').forEach(button => {
            button.addEventListener('click', function() {
                markAsRead(this.dataset.id);
            });
        });
    }

    // Mark a notification as read
    function markAsRead(notificationId) {
        fetch(`/notifications/${notificationId}/read`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetchNotifications();
            } else {
                console.error('Error marking notification as read:', data.error);
            }
        })
        .catch(error => console.error('Error marking notification as read:', error));
    }
});
=== public/js/forms.js ===
document.addEventListener('DOMContentLoaded', function() {
    // Handle input validation across all forms
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function(event) {
            let isValid = true;
            const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');
            inputs.forEach(input => {
                if (!input.value.trim()) {
                    isValid = false;
                    showError(input, 'This field is required.');
                } else {
                    clearError(input);
                }
            });
            if (!isValid) {
                event.preventDefault();
            }
        });

        // Real-time field validation
        const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                if (input.value.trim()) {
                    clearError(input);
                } else {
                    showError(input, 'This field is required.');
                }
            });
        });
    });

    function showError(input, message) {
        let error = input.nextElementSibling;
        if (!error || !error.classList.contains('error-message')) {
            error = document.createElement('div');
            error.classList.add('error-message');
            input.parentNode.insertBefore(error, input.nextSibling);
        }
        error.textContent = message;
        input.classList.add('error');
    }

    function clearError(input) {
        let error = input.nextElementSibling;
        if (error && error.classList.contains('error-message')) {
            error.remove();
        }
        input.classList.remove('error');
    }
});
=== public/js/profile.js ===
// Function to handle profile updates
async function updateProfile(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    
    if (!validateProfileForm(formData)) {
        return;
    }

    try {
        const response = await fetch('/api/profile/update', {
            method: 'POST',
            body: formData
        });
        const data = await response.json();
        if (data.success) {
            alert('Profile updated successfully');
        } else {
            alert('Error updating profile: ' + data.message);
        }
    } catch (error) {
        console.error('Error updating profile:', error);
    }
}

// Function to allow avatar image uploads
function handleAvatarUpload(event) {
    const fileInput = event.target;
    const file = fileInput.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            document.getElementById('avatar-preview').src = e.target.result;
        };
        reader.readAsDataURL(file);
    }
}

// Function to validate form inputs before saving
function validateProfileForm(formData) {
    const name = formData.get('name');
    const email = formData.get('email');
    const password = formData.get('password');

    if (!name || !email || (password && password.length < 6)) {
        alert('Please fill out all required fields and ensure password is at least 6 characters long.');
        return false;
    }
    return true;
}

// Initialize profile form
function initProfileForm() {
    document.getElementById('profile-form').addEventListener('submit', updateProfile);
    document.getElementById('avatar-upload').addEventListener('change', handleAvatarUpload);
}

// Call initProfileForm when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', initProfileForm);
=== public/js/auth.js ===
import ajax from './ajax';

document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');

    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
    }

    if (registerForm) {
        registerForm.addEventListener('submit', handleRegister);
    }

    // Handle login form submission
    async function handleLogin(event) {
        event.preventDefault();

        const formData = new FormData(loginForm);
        const username = formData.get('username');
        const password = formData.get('password');

        try {
            const response = await ajax.post('/login', { username, password });
            ajax.setToken(response.token);
            redirectToDashboard();
        } catch (error) {
            console.error('Error during login:', error);
            showError('Error during login.');
        }
    }

    // Handle registration form submission
    async function handleRegister(event) {
        event.preventDefault();

        const formData = new FormData(registerForm);
        const username = formData.get('username');
        const password = formData.get('password');

        try {
            const response = await ajax.post('/register', { username, password });
            ajax.setToken(response.token);
            redirectToDashboard();
        } catch (error) {
            console.error('Error during registration:', error);
            showError('Error during registration.');
        }
    }

    // Redirect to dashboard
    function redirectToDashboard() {
        window.location.href = '/dashboard';
    }

    // Show error messages
    function showError(message) {
        const errorContainer = document.getElementById('error-container');
        errorContainer.innerText = message;
        errorContainer.style.display = 'block';
    }

    // Logout functionality
    function logout() {
        localStorage.removeItem('token');
        window.location.href = '/login';
    }

    // Automatically refresh expired sessions
    function refreshSession() {
        const token = localStorage.getItem('token');
        if (!token) return;

        const payload = JSON.parse(atob(token.split('.')[1]));
        const expiration = payload.exp * 1000;
        const now = Date.now();

        if (now >= expiration) {
            logout();
        }
    }

    setInterval(refreshSession, 60000); // Check session every minute
});
=== public/js/toasts.js ===
// Function to create a toast
function createToast(type, message, autoDismiss = true, dismissTime = 3000) {
    const toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        console.error('Toast container not found');
        return;
    }

    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.innerText = message;

    toastContainer.appendChild(toast);

    if (autoDismiss) {
        setTimeout(() => {
            toast.remove();
        }, dismissTime);
    }
}

// Function to show success toast
function showSuccessToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('success', message, autoDismiss, dismissTime);
}

// Function to show warning toast
function showWarningToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('warning', message, autoDismiss, dismissTime);
}

// Function to show error toast
function showErrorToast(message, autoDismiss = true, dismissTime = 3000) {
    createToast('error', message, autoDismiss, dismissTime);
}

// Ensure toast container exists
document.addEventListener('DOMContentLoaded', () => {
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        document.body.appendChild(toastContainer);
    }
});
=== public/js/documents.js ===
// Function to handle document uploads securely
async function uploadDocument(event) {
    event.preventDefault();
    const formData = new FormData(event.target);

    try {
        const response = await fetch('/api/documents/upload', {
            method: 'POST',
            body: formData
        });
        const data = await response.json();
        if (data.success) {
            alert('Document uploaded successfully');
            previewDocument(data.documentUrl);
        } else {
            alert('Error uploading document: ' + data.message);
        }
    } catch (error) {
        console.error('Error uploading document:', error);
    }
}

// Function to enable previewing contracts before signing
function previewDocument(documentUrl) {
    const previewFrame = document.getElementById('document-preview');
    previewFrame.src = documentUrl;
    previewFrame.style.display = 'block';
}

// Function to integrate with SignatureService.php for digital signing
async function signDocument(documentId) {
    try {
        const response = await fetch('/api/documents/sign', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ documentId })
        });
        const data = await response.json();
        if (data.success) {
            alert('Document signed successfully');
        } else {
            alert('Error signing document: ' + data.message);
        }
    } catch (error) {
        console.error('Error signing document:', error);
    }
}

// Initialize document form
function initDocumentForm() {
    document.getElementById('document-upload-form').addEventListener('submit', uploadDocument);
    document.getElementById('sign-button').addEventListener('click', () => {
        const documentId = document.getElementById('document-id').value;
        signDocument(documentId);
    });
}

// Call initDocumentForm when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', initDocumentForm);

// Function to handle document uploads securely
function handleDocumentUpload(file) {
    // Implement secure upload logic here
    // Example: Use FormData to send the file via AJAX
    const formData = new FormData();
    formData.append('document', file);

    fetch('/upload', {
        method: 'POST',
        body: formData,
        headers: {
            'Authorization': 'Bearer ' + getAuthToken() // Ensure secure upload
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('Upload successful:', data);
    })
    .catch(error => {
        console.error('Error uploading document:', error);
    });
}

// Function to enable previewing contracts before signing
function previewContract(file) {
    const reader = new FileReader();
    reader.onload = function(event) {
        const previewFrame = document.getElementById('contractPreview');
        previewFrame.src = event.target.result;
    };
    reader.readAsDataURL(file);
}

// Function to support digital signatures via API integration
function signDocument(documentId, signature) {
    fetch('/sign', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + getAuthToken() // Ensure secure signing
        },
        body: JSON.stringify({
            documentId: documentId,
            signature: signature
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Document signed successfully:', data);
    })
    .catch(error => {
        console.error('Error signing document:', error);
    });
}

// Helper function to get authentication token
function getAuthToken() {
    // Implement token retrieval logic here
    return 'your-auth-token';
}

// Example usage
document.getElementById('uploadButton').addEventListener('change', function(event) {
    const file = event.target.files[0];
    handleDocumentUpload(file);
    previewContract(file);
});

document.getElementById('signButton').addEventListener('click', function() {
    const documentId = 'example-document-id';
    const signature = 'example-signature';
    signDocument(documentId, signature);
});
=== public/js/payments.js ===
import ajax from './ajax';

document.addEventListener('DOMContentLoaded', function() {
    const paymentForm = document.getElementById('paymentForm');

    paymentForm.addEventListener('submit', function(event) {
        event.preventDefault();
        if (validateForm()) {
            const paymentDetails = new FormData(paymentForm);
            processPayment(paymentDetails);
        }
    });

    function validateForm() {
        let isValid = true;
        const cardNumber = document.getElementById('cardNumber').value;
        const expiryDate = document.getElementById('expiryDate').value;
        const cvv = document.getElementById('cvv').value;
        const errorMessage = document.getElementById('errorMessage');

        errorMessage.innerHTML = '';

        if (!cardNumber.match(/^\d{16}$/)) {
            errorMessage.innerHTML += '<p>Invalid card number. Must be 16 digits.</p>';
            isValid = false;
        }
        if (!expiryDate.match(/^\d{2}\/\d{2}$/)) {
            errorMessage.innerHTML += '<p>Invalid expiry date. Must be in MM/YY format.</p>';
            isValid = false;
        }
        if (!cvv.match(/^\d{3}$/)) {
            errorMessage.innerHTML += '<p>Invalid CVV. Must be 3 digits.</p>';
            isValid = false;
        }

        return isValid;
    }

    async function processPayment(paymentDetails) {
        try {
            const response = await ajax.post('/payments', paymentDetails);
            if (response.success) {
                window.location.href = '/booking/confirmation';
            } else {
                displayErrors(response.errors);
            }
        } catch (error) {
            displayErrors(['An error occurred while processing the payment. Please try again.']);
        }
    }

    function displayErrors(errors) {
        const errorMessage = document.getElementById('errorMessage');
        errorMessage.innerHTML = '';
        errors.forEach(function(error) {
            errorMessage.innerHTML += `<p>${error}</p>`;
        });
    }
});
=== public/js/register.js ===
document.getElementById('registerForm').addEventListener('submit', async function (e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });

        const result = await response.json();

        if (response.ok) {
            showToast('success', 'Registration successful! Welcome to Carfuse.');
            this.reset();
        } else {
            showToast('error', result.message || 'Registration failed.');
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('error', 'An unexpected error occurred.');
    }
});

function showToast(type, message) {
    const toastContainer = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-bg-${type} border-0 show`;
    toast.role = 'alert';
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>`;
    toastContainer.appendChild(toast);
    setTimeout(() => toast.remove(), 5000);
}
