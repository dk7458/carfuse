=== App/Services/Audit/UserAuditService.php ===
<?php

namespace App\Services\Audit;

use App\Helpers\DatabaseHelper;
use App\Helpers\SecurityHelper;
use Psr\Log\LoggerInterface;
use Exception;
use DateTimeImmutable;

class UserAuditService
{
    private LoggerInterface $logger;
    private string $requestId;

    public function __construct(LoggerInterface $logger, ?string $requestId = null)
    {
        $this->logger = $logger;
        $this->requestId = $requestId ?? uniqid('req_', true);
    }

    private function getClientIp(): string {
        foreach (['HTTP_X_FORWARDED_FOR', 'HTTP_CLIENT_IP'] as $header) {
            if (!empty($_SERVER[$header])) {
                $ip = trim(explode(',', $_SERVER[$header])[0]);
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    return $ip;
                }
            }
        }
        return $_SERVER['REMOTE_ADDR'] ?? '0.0.0.0';
    }

    private function getUserAgent(): string {
        return $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown';
    }

    private function logEvent(
        string $category,
        string $action,
        string $message,
        array $context = [],
        ?int $userId = null,
        string $logLevel = 'info'
    ): ?int {
        // Sanitize message and context
        $message = SecurityHelper::sanitizeString($message);
        $context = $this->sanitizeContext($context);
        // Auto-append defaults if missing
        $context['action']     = $action;
        $context['request_id'] = $this->requestId;
        $context['user_agent'] = $context['user_agent'] ?? $this->getUserAgent();
        $context['ip_address'] = $context['ip_address'] ?? $this->getClientIp();
        $timestamp = (new DateTimeImmutable())->format('Y-m-d H:i:s');

        $data = [
            'action'          => $category,
            'message'         => $message,
            'details'         => json_encode($context, JSON_UNESCAPED_UNICODE|JSON_PARTIAL_OUTPUT_ON_ERROR),
            'user_reference'  => $userId,
            'created_at'      => $timestamp,
            'log_level'       => $logLevel,
            'request_id'      => $this->requestId,
        ];

        try {
            return DatabaseHelper::insert('audit_logs', $data, true);
        } catch (Exception $e) {
            $this->logger->error("UserAuditService logEvent failed: " . $e->getMessage(), [
                'request_id' => $this->requestId,
                'category'   => $category
            ]);
            return null;
        }
    }

    private function sanitizeContext(array $context): array {
        $sensitiveKeys = ['password', 'secret', 'token', 'auth', 'key', 'apiKey', 'api_key', 'credential', 'credit_card', 'card_number', 'cvv', 'ssn'];
        $sanitized = [];
        foreach ($context as $key => $value) {
            if ($value === null) continue;
            $lower = strtolower($key);
            $isSensitive = false;
            foreach ($sensitiveKeys as $sKey) {
                if (strpos($lower, $sKey) !== false) { $isSensitive = true; break; }
            }
            $sanitized[$key] = $isSensitive ? '[REDACTED]' : (is_array($value) ? $this->sanitizeContext($value) : $value);
        }
        return $sanitized;
    }

    // Public log methods â€“ each directly inserts a log.

    public function logAuthEvent(
        string $action,
        string $message,
        array $context = [],
        ?int $userId = null,
        string $logLevel = 'info'
    ): ?int {
        return $this->logEvent('auth', $action, $message, $context, $userId, $logLevel);
    }

    public function logUserAction(
        string $action,
        string $message,
        array $context = [],
        ?int $userId = null,
        string $logLevel = 'info'
    ): ?int {
        return $this->logEvent('user', $action, $message, $context, $userId, $logLevel);
    }

    public function logSystemEvent(
        string $action,
        string $message,
        array $context = [],
        ?int $userId = null,
        string $logLevel = 'info'
    ): ?int {
        return $this->logEvent('system', $action, $message, $context, $userId, $logLevel);
    }

    public function logSecurityEvent(
        string $action,
        string $message,
        array $context = [],
        ?int $userId = null,
        string $logLevel = 'warning'
    ): ?int {
        return $this->logEvent('security', $action, $message, $context, $userId, $logLevel);
    }

    public function logApiRequest(
        string $endpoint,
        string $method,
        string $message,
        array $context = [],
        ?int $userId = null,
        string $logLevel = 'info'
    ): ?int {
        $context = array_merge($context, [
            'endpoint' => $endpoint,
            'method'   => $method
        ]);
        return $this->logEvent('api', 'api_request', $message, $context, $userId, $logLevel);
    }
}
=== App/Services/Audit/TransactionAuditService.php ===
<?php

namespace App\Services\Audit;

use App\Helpers\DatabaseHelper;
use App\Helpers\SecurityHelper;
use Psr\Log\LoggerInterface;
use Exception;
use DateTimeImmutable;

class TransactionAuditService
{
    private LoggerInterface $logger;
    private string $requestId;

    public function __construct(LoggerInterface $logger, ?string $requestId = null)
    {
        $this->logger = $logger;
        $this->requestId = $requestId ?? uniqid('req_', true);
    }
    
    private function getClientIp(): string {
        foreach (['HTTP_X_FORWARDED_FOR', 'HTTP_CLIENT_IP'] as $header) {
            if (!empty($_SERVER[$header])) {
                $ip = trim(explode(',', $_SERVER[$header])[0]);
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    return $ip;
                }
            }
        }
        return $_SERVER['REMOTE_ADDR'] ?? '0.0.0.0';
    }
    
    private function sanitizeContext(array $context): array {
        $sensitive = ['password', 'secret', 'token', 'auth', 'key', 'apiKey', 'api_key', 'credential', 'credit_card', 'card_number', 'cvv', 'ssn'];
        $sanitized = [];
        foreach ($context as $key => $value) {
            if ($value === null) continue;
            $lower = strtolower($key);
            $mask = false;
            foreach ($sensitive as $s) {
                if (strpos($lower, $s) !== false) { $mask = true; break; }
            }
            $sanitized[$key] = $mask ? '[REDACTED]' : (is_array($value) ? $this->sanitizeContext($value) : $value);
        }
        return $sanitized;
    }
    
    private function logTransactionEvent(string $category, string $message, array $context, string $logLevel = 'info'): ?int {
        $message = SecurityHelper::sanitizeString($message);
        $context = $this->sanitizeContext($context);
        $context['request_id'] = $this->requestId;
        $context['ip_address'] = $context['ip_address'] ?? $this->getClientIp();
        $timestamp = (new DateTimeImmutable())->format('Y-m-d H:i:s');
        
        $data = [
            'action'         => $category,
            'message'        => $message,
            'details'        => json_encode($context, JSON_UNESCAPED_UNICODE|JSON_PARTIAL_OUTPUT_ON_ERROR),
            'user_reference' => $context['user_id'] ?? null,
            'created_at'     => $timestamp,
            'log_level'      => $logLevel,
            'request_id'     => $this->requestId,
            'ip_address'     => $context['ip_address']
        ];
        
        try {
            return DatabaseHelper::insert('audit_logs', $data, true);
        } catch (Exception $e) {
            $this->logger->error("TransactionAuditService logTransactionEvent failed: " . $e->getMessage(), [
                'request_id' => $this->requestId
            ]);
            return null;
        }
    }
    
    private function calculateFraudIndicators(array $data): array {
        $indicators = [];
        if (isset($data['amount']) && $data['amount'] > 1000) {
            $indicators['high_amount'] = true;
        }
        if (isset($data['attempts']) && $data['attempts'] > 3) {
            $indicators['multiple_attempts'] = true;
        }
        if (isset($data['location'], $data['expected_location']) && $data['location'] !== $data['expected_location']) {
            $indicators['unusual_location'] = true;
        }
        if (isset($data['billing_country'], $data['shipping_country']) && $data['billing_country'] !== $data['shipping_country']) {
            $indicators['address_mismatch'] = true;
        }
        return $indicators;
    }
    
    private function calculateRiskScore(array $indicators): int {
        $weights = [
            'high_amount' => 15,
            'multiple_attempts' => 20,
            'unusual_location' => 30,
            'address_mismatch' => 25
        ];
        $score = 0;
        foreach ($indicators as $key => $flag) {
            if ($flag && isset($weights[$key])) { $score += $weights[$key]; }
        }
        return min($score, 100);
    }
    
    private function getRiskLevel(int $score): string {
        if ($score >= 70) return 'high';
        if ($score >= 50) return 'medium';
        if ($score >= 30) return 'low';
        return 'minimal';
    }
    
    private function getLogLevelForRisk(int $score): string {
        if ($score >= 70) return 'critical';
        if ($score >= 50) return 'error';
        if ($score >= 30) return 'warning';
        return 'info';
    }
    
    private function getLogLevelForStatus(string $status): string {
        $map = [
            'completed' => 'info', 'success' => 'info', 'pending' => 'info', 'processing' => 'info',
            'failed' => 'warning', 'declined' => 'warning', 'error' => 'error', 'fraud' => 'error',
            'cancelled' => 'info', 'refunded' => 'info'
        ];
        $s = strtolower($status);
        return $map[$s] ?? 'info';
    }
    
    public function recordPaymentSuccess(array $paymentData): ?int {
        $message = "Payment processed successfully";
        if (isset($paymentData['amount'])) {
            $message .= sprintf(" for %.2f %s", $paymentData['amount'], $paymentData['currency'] ?? '');
        }
        $paymentData['payment_status'] = 'completed';
        return $this->logTransactionEvent('payment', $message, $paymentData, 'info');
    }
    
    public function recordFraudValidationFailure(array $paymentData, array $fraudIndicators = [], ?int $riskScore = null): ?int {
        if (empty($fraudIndicators)) {
            $fraudIndicators = $this->calculateFraudIndicators($paymentData);
        }
        if ($riskScore === null) {
            $riskScore = $this->calculateRiskScore($fraudIndicators);
        }
        $riskLevel = $this->getRiskLevel($riskScore);
        $message = sprintf("Potential fraud detected (%s risk) with score %d", $riskLevel, $riskScore);
        $context = array_merge($paymentData, [
            'fraud_indicators' => $fraudIndicators,
            'risk_score' => $riskScore,
            'risk_level' => $riskLevel
        ]);
        return $this->logTransactionEvent('fraud_attempt', $message, $context, $this->getLogLevelForRisk($riskScore));
    }
    
    public function recordTransaction(string $transactionType, array $transactionData, string $status, ?string $message = null): ?int {
        if ($message === null) {
            $message = ucfirst($transactionType) . " transaction " . $status;
            if (isset($transactionData['amount'])) {
                $message .= sprintf(" for %.2f %s", $transactionData['amount'], $transactionData['currency'] ?? '');
            }
        }
        $transactionData = array_merge($transactionData, ['transaction_type' => $transactionType, 'status' => $status]);
        $logLevel = $this->getLogLevelForStatus($status);
        return $this->logTransactionEvent($transactionType, $message, $transactionData, $logLevel);
    }
}
=== App/Services/Audit/LogManagementService.php ===
<?php

namespace App\Services\Audit;

use App\Helpers\DatabaseHelper;
use App\Helpers\LogQueryBuilder;
use App\Helpers\SecurityHelper;
use Psr\Log\LoggerInterface;
use Exception;
use DateTime;

class LogManagementService
{
    // Configuration constants
    private const MAX_EXPORT_ROWS = 10000;
    private const BATCH_DELETE_SIZE = 1000;
    private const EXPORT_EXPIRY_HOURS = 24;
    
    private LoggerInterface $logger;
    private string $requestId;
    
    public function __construct(LoggerInterface $logger, string $requestId)
    {
        $this->logger = $logger;
        $this->requestId = $requestId;
    }
    
    /**
     * Retrieve logs from the audit_logs table with applied filters and pagination
     *
     * @param array $filters Various filters to apply (category, user_id, etc.)
     * @return array Paginated result containing logs and pagination metadata
     */
    public function getLogs(array $filters = []): array
    {
        try {
            // Get the query parts from LogQueryBuilder
            $query = LogQueryBuilder::buildSelectQuery($filters);
            
            // Execute the count query if pagination is needed
            $totalItems = 0;
            $totalPages = 0;
            
            if (!($filters['skip_pagination'] ?? false)) {
                $countResult = DatabaseHelper::select(
                    $query['countSql'],
                    $query['params'],
                    true
                );
                $totalItems = $countResult[0]['total'] ?? 0;
                $perPage = $query['perPage'];
                $totalPages = ceil($totalItems / $perPage);
            }
            
            // Execute the main query
            $logs = DatabaseHelper::select(
                $query['mainSql'],
                $query['params'],
                true
            );
            
            // Process results - parse JSON and format dates
            foreach ($logs as &$log) {
                if (isset($log['details']) && is_string($log['details'])) {
                    $log['details'] = json_decode($log['details'], true) ?? [];
                }
                
                if (!empty($log['created_at'])) {
                    $date = new DateTime($log['created_at']);
                    $log['formatted_date'] = $date->format('Y-m-d H:i:s');
                }
            }
            
            // Build the result array
            $result = ['data' => $logs];
            
            // Add pagination data if needed
            if (!($filters['skip_pagination'] ?? false)) {
                $page = $query['page'];
                $perPage = $query['perPage'];
                $offset = ($page - 1) * $perPage;
                
                $result['pagination'] = [
                    'total' => $totalItems,
                    'per_page' => $perPage,
                    'current_page' => $page,
                    'last_page' => $totalPages,
                    'from' => $offset + 1,
                    'to' => min($offset + $perPage, $totalItems),
                ];
            }
            
            return $result;
        } catch (Exception $e) {
            $this->logger->error("[Audit] Failed to get logs: " . $e->getMessage(), [
                'request_id' => $this->requestId,
                'filters' => $filters
            ]);
            throw $e; // Re-throw for higher-level handling
        }
    }
    
    /**
     * Delete logs from the audit_logs table based on specific filters
     *
     * @param array $filters Filters to determine which logs to delete
     * @param bool $forceBulkDelete Set to true to bypass safeguards for bulk deletion
     * @return int Number of logs deleted
     */
    public function deleteLogs(array $filters, bool $forceBulkDelete = false): int
    {
        try {
            // Get the query parts from LogQueryBuilder
            list($whereClause, $params) = LogQueryBuilder::buildWhereClause($filters);
            
            // Safety check: prevent accidental deletion of all logs
            if ($whereClause === "1=1" && count($params) === 0 && !$forceBulkDelete) {
                throw new Exception('Attempted to delete all logs without explicit confirmation');
            }
            
            // Get IDs to delete for batch processing
            $sql = "SELECT id FROM audit_logs WHERE {$whereClause}";
            
            // Add limit for safety if not forced bulk delete
            if (!$forceBulkDelete) {
                $sql .= " LIMIT " . self::MAX_EXPORT_ROWS;
            }
            
            $logIds = DatabaseHelper::select($sql, $params, true);
            $ids = array_column($logIds, 'id');
            
            if (empty($ids)) {
                return 0; // No matching logs to delete
            }
            
            // Log the deletion attempt
            $this->logger->info("[Audit] Deleting logs", [
                'request_id' => $this->requestId,
                'count' => count($ids)
            ]);
            
            // Use batch processing to delete
            $totalDeleted = 0;
            $batches = array_chunk($ids, self::BATCH_DELETE_SIZE);
            
            foreach ($batches as $batch) {
                $placeholders = implode(',', array_fill(0, count($batch), '?'));
                $deletedCount = DatabaseHelper::safeQuery(function ($pdo) use ($placeholders, $batch) {
                    $stmt = $pdo->prepare("DELETE FROM audit_logs WHERE id IN ({$placeholders})");
                    $stmt->execute($batch);
                    return $stmt->rowCount();
                }, true);
                
                $totalDeleted += $deletedCount;
            }
            
            return $totalDeleted;
        } catch (Exception $e) {
            $this->logger->error("[Audit] Failed to delete logs: " . $e->getMessage(), [
                'request_id' => $this->requestId,
                'filters' => $filters
            ]);
            throw $e; // Re-throw for higher-level handling
        }
    }
    
    /**
     * Export logs to a CSV file based on provided filters
     *
     * @param array $filters Filters to determine which logs to export
     * @return array Path info for the exported file
     */
    public function exportLogs(array $filters): array
    {
        try {
            // Create export file information
            $exportId = date('Ymd_His') . '_' . substr(uniqid(), -8);
            $filename = 'audit_logs_export_' . $exportId . '.csv';
            $exportDir = rtrim(sys_get_temp_dir(), '/') . '/secure_exports';
            
            // Ensure export directory exists with proper permissions
            if (!is_dir($exportDir)) {
                mkdir($exportDir, 0750, true);
            }
            
            $filepath = $exportDir . '/' . $filename;
            
            // Get export SQL from LogQueryBuilder
            $exportSql = LogQueryBuilder::buildExportQuery($filters, $filepath);
            
            // Execute export query
            $rowsExported = DatabaseHelper::executeExport($exportSql['sql'], $exportSql['params']);
            
            // Set appropriate permissions for the file
            chmod($filepath, 0640);
            
            // Calculate expiry time
            $expiryTime = time() + (self::EXPORT_EXPIRY_HOURS * 3600);
            
            // Return export information
            return [
                'file_path' => $filepath,
                'file_name' => $filename,
                'export_id' => $exportId,
                'row_count' => $rowsExported,
                'expiry_time' => $expiryTime,
                'expiry_formatted' => date('Y-m-d H:i:s', $expiryTime)
            ];
        } catch (Exception $e) {
            $this->logger->error("[Audit] Failed to export logs: " . $e->getMessage(), [
                'request_id' => $this->requestId,
                'filters' => $filters
            ]);
            throw $e; // Re-throw for higher-level handling
        }
    }
    
    /**
     * Get a single log entry by ID
     *
     * @param int $logId Log ID
     * @return array|null Log data or null if not found
     */
    public function getLogById(int $logId): ?array
    {
        try {
            $sql = "SELECT * FROM audit_logs WHERE id = ? LIMIT 1";
            $logs = DatabaseHelper::select($sql, [$logId], true);
            
            if (empty($logs)) {
                return null;
            }
            
            $log = $logs[0];
            
            // Parse JSON details if present
            if (isset($log['details']) && is_string($log['details'])) {
                $log['details'] = json_decode($log['details'], true) ?? [];
            }
            
            // Format timestamp
            if (!empty($log['created_at'])) {
                $date = new DateTime($log['created_at']);
                $log['formatted_date'] = $date->format('Y-m-d H:i:s');
            }
            
            return $log;
        } catch (Exception $e) {
            $this->logger->error("[Audit] Failed to get log by ID: " . $e->getMessage(), [
                'request_id' => $this->requestId,
                'log_id' => $logId
            ]);
            throw $e; // Re-throw for higher-level handling
        }
    }
}
